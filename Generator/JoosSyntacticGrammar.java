//******************************************************
// Autogenerated code. Do not modify this file manually.
//******************************************************
package cs444.generator.parser;

import java.io.Writer;
import java.util.LinkedList;
import java.util.List;

import cs444.generator.lexer.grammar.JoosGrammar;

public class JoosSyntacticGrammarextends Language {

    private static final JoosGrammar tokenGrammar = new JoosGrammar();
    private static final String startRule = "CompilationUnit";
    private static final List<String> rules = new LinkedList<String>();

    static{
        rules.add("Identifier id");
        rules.add("QualifiedIdentifier Identifier N_dot_Identifier_0");
        rules.add("N_dot_Identifier_0 N_dot_Identifier_0 dot Identifier");
        rules.add("N_dot_Identifier_0  ");
        rules.add("Literal IntegerLiteral");
        rules.add("Literal char_literal");
        rules.add("Literal str_literal");
        rules.add("Literal BooleanLiteral");
        rules.add("Literal null");
        rules.add("IntegerLiteral decimal_integer_literal");
        rules.add("BooleanLiteral true");
        rules.add("BooleanLiteral false");
        rules.add("Expression Expression1");
        rules.add("Expression Expression1 AssignmentOperator Expression1");
        rules.add("AssignmentOperator becomes");
        rules.add("Type Identifier N_dot_Identifier_0 BracketsOpt");
        rules.add("Type BasicType");
        rules.add("StatementExpression Expression");
        rules.add("ConstantExpression Expression");
        rules.add("Expression1 Expression2");
        rules.add("Expression2 Expression3");
        rules.add("Expression2 Expression3 Expression2Rest");
        rules.add("Expression2Rest N_Infixop_Expression3_0");
        rules.add("N_Infixop_Expression3_0 N_Infixop_Expression3_0 Infixop Expression3");
        rules.add("N_Infixop_Expression3_0  ");
        rules.add("Expression2Rest Expression3 instanceof Type");
        rules.add("Infixop dpipe");
        rules.add("Infixop dampersand");
        rules.add("Infixop pipe");
        rules.add("Infixop ampersand");
        rules.add("Infixop eq");
        rules.add("Infixop ne");
        rules.add("Infixop lt");
        rules.add("Infixop gt");
        rules.add("Infixop le");
        rules.add("Infixop ge");
        rules.add("Infixop plus");
        rules.add("Infixop minus");
        rules.add("Infixop star");
        rules.add("Infixop slash");
        rules.add("Infixop pct");
        rules.add("Expression3 PrefixOp Expression3");
        rules.add("Expression3 Expression Expression3");
        rules.add("Expression3 Type Expression3");
        rules.add("Expression3 Primary N_Selector_0");
        rules.add("N_Selector_0 N_Selector_0 Selector");
        rules.add("N_Selector_0  ");
        rules.add("Primary lparen Expression rparen");
        rules.add("Primary this");
        rules.add("Primary this Arguments");
        rules.add("Primary super SuperSuffix");
        rules.add("Primary Literal");
        rules.add("Primary new Creator");
        rules.add("Primary Identifier N_dot_Identifier_0");
        rules.add("Primary Identifier N_dot_Identifier_0 IdentifierSuffix");
        rules.add("Primary BasicType BracketsOpt dot class");
        rules.add("Primary void dot class");
        rules.add("IdentifierSuffix lbrace rbracket BracketsOpt dot class");
        rules.add("IdentifierSuffix lbrace Expression rbracket");
        rules.add("IdentifierSuffix Arguments");
        rules.add("IdentifierSuffix dot class");
        rules.add("IdentifierSuffix dot this");
        rules.add("IdentifierSuffix dot super Arguments");
        rules.add("IdentifierSuffix dot new InnerCreator");
        rules.add("PrefixOp exclamation");
        rules.add("PrefixOp plus");
        rules.add("PrefixOp minus");
        rules.add("Selector dot Identifier");
        rules.add("Selector dot Identifier Arguments");
        rules.add("Selector dot this");
        rules.add("Selector dot super SuperSuffix");
        rules.add("Selector dot new InnerCreator");
        rules.add("Selector lbracket Expression rbracket");
        rules.add("SuperSuffix Arguments");
        rules.add("SuperSuffix dot Identifier");
        rules.add("SuperSuffix dot Identifier Arguments");
        rules.add("BasicType byte");
        rules.add("BasicType short");
        rules.add("BasicType char");
        rules.add("BasicType int");
        rules.add("BasicType long");
        rules.add("BasicType float");
        rules.add("BasicType double");
        rules.add("BasicType boolean");
        rules.add("ArgumentsOpt");
        rules.add("ArgumentsOpt Arguments");
        rules.add("Arguments lparen rparen");
        rules.add("Arguments lparen Expression N_comma_Expression_0 rparen");
        rules.add("N_comma_Expression_0 N_comma_Expression_0 comma Expression");
        rules.add("N_comma_Expression_0  ");
        rules.add("BracketsOpt N_lbracket_rbracket_0");
        rules.add("N_lbracket_rbracket_0 N_lbracket_rbracket_0 lbracket rbracket");
        rules.add("N_lbracket_rbracket_0  ");
        rules.add("Creator QualifiedIdentifier ArrayCreatorRest");
        rules.add("Creator QualifiedIdentifier ClassCreatorRest");
        rules.add("InnerCreator Identifier ClassCreatorRest");
        rules.add("ArrayCreatorRest lbracket rbracket BracketsOpt ArrayInitializer");
        rules.add("ArrayCreatorRest lbracket Expression rbracket N_lbracket_Expression_rbracket_0 BracketsOpt");
        rules.add("N_lbracket_Expression_rbracket_0 N_lbracket_Expression_rbracket_0 lbracket Expression rbracket");
        rules.add("N_lbracket_Expression_rbracket_0  ");
        rules.add("ClassCreatorRest Arguments");
        rules.add("ClassCreatorRest Arguments ClassBody");
        rules.add("ArrayInitializer lbrace rbrace");
        rules.add("N_comma_VariableInitializer_0 N_comma_VariableInitializer_0 comma VariableInitializer");
        rules.add("N_comma_VariableInitializer_0  ");
        rules.add("ArrayInitializer lbrace VariableInitializer N_comma_VariableInitializer_0 rbrace");
        rules.add("ArrayInitializer lbrace VariableInitializer N_comma_VariableInitializer_0 comma rbrace");
        rules.add("VariableInitializer ArrayInitializer");
        rules.add("VariableInitializer Expression");
        rules.add("ParExpression lparen Expression rparen");
        rules.add("Block lbrace BlockStatements rbrace");
        rules.add("BlockStatements N_BlockStatement_0");
        rules.add("N_BlockStatement_0 N_BlockStatement_0 BlockStatement");
        rules.add("N_BlockStatement_0  ");
        rules.add("BlockStatement LocalVariableDeclarationStatement");
        rules.add("BlockStatement ClassOrInterfaceDeclaration");
        rules.add("BlockStatement Statement");
        rules.add("LocalVariableDeclarationStatement Type VariableDeclarators semi");
        rules.add("LocalVariableDeclarationStatement final Type VariableDeclarators semi");
        rules.add("Statement Block");
        rules.add("Statement if ParExpression Statement");
        rules.add("Statement if ParExpression Statement else Statement");
        rules.add("Statement for lparen ForInitOpt semi semi ForUpdateOpt rparen Statement");
        rules.add("Statement for lparen ForInitOpt semi Expression semi ForUpdateOpt rparen Statement");
        rules.add("Statement while ParExpression Statement");
        rules.add("Statement do Statement while ParExpression semi");
        rules.add("Statement try Block Catches");
        rules.add("Statement try Block finally Block");
        rules.add("Statement try Block Catches finally Block");
        rules.add("Statement synchronized ParExpression Block");
        rules.add("Statement return semi");
        rules.add("Statement return Expression semi");
        rules.add("Statement throw Expression semi");
        rules.add("Statement break");
        rules.add("Statement break Identifier");
        rules.add("Statement continue");
        rules.add("Statement continue Identifier");
        rules.add("Statement semi");
        rules.add("Statement StatementExpression");
        rules.add("Catches CatchClause N_CatchClause_0");
        rules.add("N_CatchClause_0 N_CatchClause_0 CatchClause");
        rules.add("N_CatchClause_0  ");
        rules.add("CatchClause catch lparen FormalParameter rparen Block");
        rules.add("MoreStatementExpressions N_comma_StatementExpression_0");
        rules.add("N_comma_StatementExpression_0 N_comma_StatementExpression_0 comma StatementExpression");
        rules.add("N_comma_StatementExpression_0  ");
        rules.add("ForInit StatementExpression MoreStatementExpressions");
        rules.add("ForInit Type VariableDeclarators");
        rules.add("ForInit final Type VariableDeclarators");
        rules.add("ForUpdate StatementExpression MoreStatementExpressions");
        rules.add("ModifiersOpt N_Modifier_0");
        rules.add("N_Modifier_0 N_Modifier_0 Modifier");
        rules.add("N_Modifier_0  ");
        rules.add("Modifier public");
        rules.add("Modifier protected");
        rules.add("Modifier private");
        rules.add("Modifier static");
        rules.add("Modifier abstract");
        rules.add("Modifier final");
        rules.add("Modifier native");
        rules.add("Modifier synchronized");
        rules.add("Modifier transient");
        rules.add("Modifier volatile");
        rules.add("Modifier strictfp");
        rules.add("VariableDeclarators VariableDeclarator N_comma_VariableDeclarator_0");
        rules.add("N_comma_VariableDeclarator_0 N_comma_VariableDeclarator_0 comma VariableDeclarator");
        rules.add("N_comma_VariableDeclarator_0  ");
        rules.add("VariableDeclaratorsRest VariableDeclaratorRest N_comma_VariableDeclarator_0");
        rules.add("ConstantDeclaratorsRest ConstantDeclaratorRest N_comma_ConstantDeclarator_0");
        rules.add("N_comma_ConstantDeclarator_0 N_comma_ConstantDeclarator_0 comma ConstantDeclarator");
        rules.add("N_comma_ConstantDeclarator_0  ");
        rules.add("VariableDeclarator Identifier VariableDeclaratorRest");
        rules.add("ConstantDeclarator Identifier ConstantDeclaratorRest");
        rules.add("VariableDeclaratorRest BracketsOpt");
        rules.add("VariableDeclaratorRest BracketsOpt becomes VariableInitializer");
        rules.add("ConstantDeclaratorRest BracketsOpt becomes VariableInitializer");
        rules.add("VariableDeclaratorId Identifier BracketsOpt");
        rules.add("N_ImportDeclaration_0 N_ImportDeclaration_0 ImportDeclaration");
        rules.add("N_ImportDeclaration_0  ");
        rules.add("CompilationUnit N_ImportDeclaration_0 N_TypeDeclaration_0");
        rules.add("N_TypeDeclaration_0 N_TypeDeclaration_0 TypeDeclaration");
        rules.add("N_TypeDeclaration_0  ");
        rules.add("CompilationUnit package QualifiedIdentifier semi N_ImportDeclaration_0 N_TypeDeclaration_0");
        rules.add("ImportDeclaration import Identifier N_dot_Identifier_0 semi");
        rules.add("ImportDeclaration import Identifier N_dot_Identifier_0 dot star semi");
        rules.add("TypeDeclaration ClassOrInterfaceDeclaration");
        rules.add("TypeDeclaration semi");
        rules.add("ClassOrInterfaceDeclaration ModifiersOpt ClassDeclaration");
        rules.add("ClassOrInterfaceDeclaration ModifiersOpt InterfaceDeclaration");
        rules.add("ClassDeclaration class Identifier ClassBody");
        rules.add("ClassDeclaration class Identifier extends Type ClassBody");
        rules.add("ClassDeclaration class Identifier implements TypeList ClassBody");
        rules.add("ClassDeclaration class Identifier extends Type implements TypeList ClassBody");
        rules.add("InterfaceDeclaration interface Identifier InterfaceBody");
        rules.add("InterfaceDeclaration interface Identifier extends TypeList InterfaceBody");
        rules.add("TypeList Type N_comma_Type_0");
        rules.add("N_comma_Type_0 N_comma_Type_0 comma Type");
        rules.add("N_comma_Type_0  ");
        rules.add("ClassBody lbrace N_ClassBodyDeclaration_0 rbrace");
        rules.add("N_ClassBodyDeclaration_0 N_ClassBodyDeclaration_0 ClassBodyDeclaration");
        rules.add("N_ClassBodyDeclaration_0  ");
        rules.add("InterfaceBody lbrace N_InterfaceBodyDeclaration_0 rbrace");
        rules.add("N_InterfaceBodyDeclaration_0 N_InterfaceBodyDeclaration_0 InterfaceBodyDeclaration");
        rules.add("N_InterfaceBodyDeclaration_0  ");
        rules.add("ClassBodyDeclaration semi");
        rules.add("ClassBodyDeclaration Block");
        rules.add("ClassBodyDeclaration static Block");
        rules.add("ClassBodyDeclaration ModifiersOpt MemberDecl");
        rules.add("MemberDecl MethodOrFieldDecl");
        rules.add("MemberDecl void Identifier MethodDeclaratorRest");
        rules.add("MemberDecl Identifier ConstructorDeclaratorRest");
        rules.add("MemberDecl ClassOrInterfaceDeclaration");
        rules.add("MethodOrFieldDecl Type Identifier MethodOrFieldRest");
        rules.add("MethodOrFieldRest VariableDeclaratorRest");
        rules.add("MethodOrFieldRest MethodDeclaratorRest");
        rules.add("InterfaceBodyDeclaration semi");
        rules.add("InterfaceBodyDeclaration ModifiersOpt InterfaceMemberDecl");
        rules.add("InterfaceMemberDecl InterfaceMethodOrFieldDecl");
        rules.add("InterfaceMemberDecl void Identifier VoidInterfaceMethodDeclaratorRest");
        rules.add("InterfaceMemberDecl ClassOrInterfaceDeclaration");
        rules.add("InterfaceMethodOrFieldDecl Type Identifier InterfaceMethodOrFieldRest");
        rules.add("InterfaceMethodOrFieldRest ConstantDeclaratorsRest semi");
        rules.add("InterfaceMethodOrFieldRest InterfaceMethodDeclaratorRest");
        rules.add("MethodDeclaratorRest FormalParameters BracketsOpt MethodBody");
        rules.add("MethodDeclaratorRest FormalParameters BracketsOpt semi");
        rules.add("MethodDeclaratorRest FormalParameters BracketsOpt throws QualifiedIdentifierList MethodBody");
        rules.add("MethodDeclaratorRest FormalParameters BracketsOpt throws QualifiedIdentifierList semi");
        rules.add("VoidMethodDeclaratorRest FormalParameters MethodBody");
        rules.add("VoidMethodDeclaratorRest FormalParameters semi");
        rules.add("VoidMethodDeclaratorRest FormalParameters throws QualifiedIdentifierList MethodBody");
        rules.add("VoidMethodDeclaratorRest FormalParameters throws QualifiedIdentifierList semi");
        rules.add("InterfaceMethodDeclaratorRest FormalParameters BracketsOpt semi");
        rules.add("InterfaceMethodDeclaratorRest FormalParameters BracketsOpt throws QualifiedIdentifierList semi");
        rules.add("VoidInterfaceMethodDeclaratorRest FormalParameters semi");
        rules.add("VoidInterfaceMethodDeclaratorRest FormalParameters throws QualifiedIdentifierList semi");
        rules.add("ConstructorDeclaratorRest FormalParameters MethodBody");
        rules.add("ConstructorDeclaratorRest FormalParameters throws QualifiedIdentifierList MethodBody");
        rules.add("QualifiedIdentifierList QualifiedIdentifier N_comma_QualifiedIdentifier_0");
        rules.add("N_comma_QualifiedIdentifier_0 N_comma_QualifiedIdentifier_0 comma QualifiedIdentifier");
        rules.add("N_comma_QualifiedIdentifier_0  ");
        rules.add("FormalParameters");
        rules.add("FormalParameters FormalParameter N_comma_FormalParameter_0");
        rules.add("N_comma_FormalParameter_0 N_comma_FormalParameter_0 comma FormalParameter");
        rules.add("N_comma_FormalParameter_0  ");
        rules.add("FormalParameter Type VariableDeclaratorId");
        rules.add("FormalParameter final Type VariableDeclaratorId");
        rules.add("MethodBody Block");
    }
}
