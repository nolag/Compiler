package cs444.generator.lexer.grammar;

import java.io.IOException;
import java.io.Writer;

import cs444.generator.Generator;

public class TokenClassGenerator extends Generator {

    private final LexicalGrammar grammar;

    public TokenClassGenerator(LexicalGrammar grammar, Writer writer) {
        super(writer);

        this.grammar = grammar;
    }

    @Override
    public void generate() throws IOException {

        writeLine("//******************************************************");
        writeLine("// Autogenerated code. Do not modify this file manually.");
        writeLine("//******************************************************");

        writeLine("package cs444.lexer;");

        writeLine("");

        writeLine("import java.util.HashMap;");
        writeLine("import java.util.Map;");

        writeLine("public final class Token {");
        indent();

        writeLine("public enum Type {");
        indent();

        TokenMetadata[] data = grammar.getTokenMetadata();
        for (TokenMetadata info : data) {
            String line = info.name;
            writeLine(line + ",");
        }

        writeLine("EOF");

        dedent();
        writeLine("}");

        writeLine("public static enum Parse {VALID, SYNTAX_ONLY, IGNORE}");

        StringBuilder sb = new StringBuilder("public static final Map<Type, Parse> typeToParse = new HashMap<Type, Parse>(){{");

        for (TokenMetadata info : data) {
            sb.append("put(Type.").append(info.name).append(", Parse.").append(info.type).append("); ");
        }

        sb.append("}};");
        writeLine(sb.toString());
        writeLine("public final Type type;");
        writeLine("public final String lexeme;");

        writeLine("public Token(Type type, String lexeme) {");
        indent();

        writeLine("this.type = type;");
        writeLine("this.lexeme = lexeme;");

        dedent();
        writeLine("}");

        writeLine("@Override");
        writeLine("public String toString() {");
        indent();
        writeLine("return \"<\" + type.toString() + \", \" + lexeme.trim() + \">\";");
        dedent();
        writeLine("}");

        dedent();
        writeLine("}");
    }
}
