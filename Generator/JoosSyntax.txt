// you can use comments

QualifiedIdentifier:

id { dot id }

Literal:

IntegerLiteral

char_literal

str_literal

BooleanLiteral

null

IntegerLiteral:

decimal_integer_literal

BooleanLiteral:

(true | false)

Type:

id { dot id } BracketsOpt

BasicType

StatementExpression:

Expression

// ConstantExpression: // TODO: unused

// Expression

Expression:

Expression1 [ = Expression]

Expression1:

[Expression1 dpipe] Expression2

Expression2:

[Expression2 dampersand] Expression3

Expression3:

[Expression3 pipe] Expression4

Expression4:

[Expression4 &] Expression5

Expression5:

[Expression5 (== | !=)] Expression6

Expression6:

[Expression6 (< | > | <= | >=)] Expression7

Expression7:

Primary // TODO: finish this

// Expression2Rest:

// {Infixop Expression3}        // TODO: fix this rule

// Expression3 instanceof Type   // I think Expression3 should not be here
instanceof Type

Infixop:

dpipe

dampersand

pipe

// ^ TODO: Is this not a feature?

ampersand

eq

ne

lt

gt

le

ge

plus

minus

star

slash

pct

// TODO: investigate this rule. It is from original version of Syntax
// ( Expression | Type ) Expression3     // this one is odd. It's not italic in "The specs", but seems to be a BNF expr

Primary {Selector}

Primary:

ParExpression

Literal

// new Creator        // TODO: fix this rule

id { . id } [ IdentifierSuffix ]

IdentifierSuffix:

lbracket ( Expression ) rbracket

Arguments

PrefixOp:

!

+

-

Selector:

. id [Arguments]

lbracket Expression rbracket

BasicType:

byte

short

char

int

long

float

double

boolean

ArgumentsOpt:

[ Arguments ]

Arguments:

lparen [Expression { , Expression }] rparen

BracketsOpt:

[ lbracket rbracket ]   // O or 1 because Joos doesnt support multi array

Creator:

QualifiedIdentifier ( ArrayCreatorRest | ClassCreatorRest )

ArrayCreatorRest:

lbracket Expression rbracket

ClassCreatorRest:

Arguments [ClassBody]

VariableInitializer:

Expression

ParExpression:

lparen Expression rparen

Block:

lbrace BlockStatements rbrace

BlockStatements:

{ BlockStatement }

BlockStatement:

LocalVariableDeclarationStatement

Statement

LocalVariableDeclarationStatement:

[final] Type VariableDeclarators ;

Statement:

OpenStatement

ClosedStatement

OpenStatement:

if ParExpression Statement

if ParExpression ClosedStatement else OpenStatement

ForLoopHeader OpenStatement

WhileLoopHeader OpenStatement

ClosedStatement:

Block

if ParExpression ClosedStatement else ClosedStatement

ForLoopHeader ClosedStatement

WhileLoopHeader ClosedStatement

do Statement while ParExpression ;

return [Expression] ;

;

StatementExpression ;

ForLoopHeader:

for lparen [ForInit] ; [Expression] ; [ForUpdate] rparen

WhileLoopHeader:

while ParExpression

MoreStatementExpressions:

{ , StatementExpression }

ForInit:

StatementExpression MoreStatementExpressions

[final] Type VariableDeclarators

ForUpdate:

StatementExpression MoreStatementExpressions

Modifier:

public

protected

private

static

abstract

final

native

synchronized

transient

volatile

strictfp

VariableDeclarators:

VariableDeclarator { , VariableDeclarator }

VariableDeclaratorsRest:

VariableDeclaratorRest { , VariableDeclarator }

ConstantDeclaratorsRest:

ConstantDeclaratorRest { , ConstantDeclarator }

VariableDeclarator:

id VariableDeclaratorRest

ConstantDeclarator:

id ConstantDeclaratorRest

VariableDeclaratorRest:

[= VariableInitializer]

ConstantDeclaratorRest:

BracketsOpt = VariableInitializer

VariableDeclaratorId:

id BracketsOpt

CompilationUnit:

[package QualifiedIdentifier ; ] {ImportDeclaration} {TypeDeclaration}

ImportDeclaration:

import id { . id } [ . * ] ;

TypeDeclaration:

{Modifier} (ClassDeclaration | InterfaceDeclaration)

;

ClassDeclaration:

class id [extends Type] ClassBody

class id [extends Type] implements TypeList ClassBody

InterfaceDeclaration:

interface id [extends TypeList] InterfaceBody

TypeList:

Type { , Type}

ClassBody:

lbrace {ClassBodyDeclaration} rbrace

InterfaceBody:

lbrace {InterfaceBodyDeclaration} rbrace

ClassBodyDeclaration:

{Modifier} MemberDecl

MemberDecl:

;

( MethodDecl | FieldDecl )

MethodDecl:

(BasicType | QualifiedIdentifier) BracketsOpt MethodDeclaratorRest MethodBody

void MethodDeclaratorRest MethodBody

id ConstructorDeclaratorRest

FieldDecl:

BasicType BracketsOpt id VariableDeclaratorRest ;

QualifiedIdentifier BracketsOpt id VariableDeclaratorRest ;

InterfaceBodyDeclaration:

;

{Modifier} InterfaceMemberDecl

InterfaceMemberDecl:

InterfaceMethodOrFieldDecl

void id VoidInterfaceMethodDeclaratorRest

InterfaceMethodOrFieldDecl:

Type id InterfaceMethodOrFieldRest

InterfaceMethodOrFieldRest:

ConstantDeclaratorsRest ;

InterfaceMethodDeclaratorRest

MethodDeclaratorRest:

id FormalParameters

VoidMethodDeclaratorRest:

FormalParameters ( MethodBody | ; )

InterfaceMethodDeclaratorRest:

FormalParameters BracketsOpt ;

VoidInterfaceMethodDeclaratorRest:

FormalParameters ;

ConstructorDeclaratorRest:

FormalParameters MethodBody

QualifiedIdentifierList:

QualifiedIdentifier { , QualifiedIdentifier}

FormalParameters:

lparen [FormalParameter { , FormalParameter}] rparen

FormalParameter:

[final] Type VariableDeclaratorId

MethodBody:

;

Block
