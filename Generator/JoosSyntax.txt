// you can use comments

Identifier:

id

QualifiedIdentifier:

Identifier { dot Identifier }

Literal:

IntegerLiteral

char_literal

str_literal

BooleanLiteral

null

IntegerLiteral:

decimal_integer_literal

BooleanLiteral:

(true | false)

Expression:

Expression1 [AssignmentOperator Expression1]

AssignmentOperator:

=

Type:

Identifier { dot Identifier } BracketsOpt

BasicType

StatementExpression:

Expression

ConstantExpression:

Expression

Expression1:

Expression2

Expression2:

Expression3 [Expression2Rest]

Expression2Rest:

// {Infixop Expression3}        // TODO: fix this rule

// Expression3 instanceof Type   // I think Expression3 should not be here
instanceof Type

Infixop:

dpipe

dampersand

pipe

// ^ TODO: Is this not a feature?

ampersand

eq

ne

lt

gt

le

ge

plus

minus

star

slash

pct

Expression3:

PrefixOp Expression3

Type Expression3     // TODO: check if we actually need the whole rule
// ( Expression | Type ) Expression3     // this one is odd. It's not italic in "The specs", but seems to be a BNF expr

Primary {Selector}

Primary:

ParExpression

Literal

// new Creator        // TODO: fix this rule

// Identifier { . Identifier } [ IdentifierSuffix]         // TODO: fix this rule

IdentifierSuffix:

lbracket ( Expression ) rbracket

Arguments

PrefixOp:

!

+

-

Selector:

. Identifier [Arguments]

lbracket Expression rbracket

BasicType:

byte

short

char

int

long

float

double

boolean

ArgumentsOpt:

[ Arguments ]

Arguments:

lparen [Expression { , Expression }] rparen

BracketsOpt:

{ lbracket rbracket }

Creator:

QualifiedIdentifier ( ArrayCreatorRest | ClassCreatorRest )

ArrayCreatorRest:

lbracket Expression rbracket

ClassCreatorRest:

Arguments [ClassBody]

VariableInitializer:

Expression

ParExpression:

lparen Expression rparen

Block:

lbrace BlockStatements rbrace

BlockStatements:

{ BlockStatement }

BlockStatement:

LocalVariableDeclarationStatement

ClassOrInterfaceDeclaration

Statement

LocalVariableDeclarationStatement:

[final] Type VariableDeclarators ;

Statement:

Block

if ParExpression Statement [else Statement]

for lparen ForInit ; [Expression] ; ForUpdate rparen Statement

while ParExpression Statement

do Statement while ParExpression ;

return [Expression] ;

;

StatementExpression

MoreStatementExpressions:

{ , StatementExpression }

ForInit:

StatementExpression MoreStatementExpressions

[final] Type VariableDeclarators

ForUpdate:

StatementExpression MoreStatementExpressions

ModifiersOpt:

{ Modifier }

Modifier:

public

protected

private

static

abstract

final

native

synchronized

transient

volatile

strictfp

VariableDeclarators:

VariableDeclarator { , VariableDeclarator }

VariableDeclaratorsRest:

VariableDeclaratorRest { , VariableDeclarator }

ConstantDeclaratorsRest:

ConstantDeclaratorRest { , ConstantDeclarator }

VariableDeclarator:

Identifier VariableDeclaratorRest

ConstantDeclarator:

Identifier ConstantDeclaratorRest

VariableDeclaratorRest:

BracketsOpt [= VariableInitializer]

ConstantDeclaratorRest:

BracketsOpt = VariableInitializer

VariableDeclaratorId:

Identifier BracketsOpt

CompilationUnit:

[package QualifiedIdentifier ; ] {ImportDeclaration} {TypeDeclaration}

ImportDeclaration:

import Identifier { . Identifier } [ . * ] ;

TypeDeclaration:

ClassOrInterfaceDeclaration

;

ClassOrInterfaceDeclaration:

ModifiersOpt (ClassDeclaration | InterfaceDeclaration)

ClassDeclaration:

class Identifier [extends Type] ClassBody

class Identifier [extends Type] implements TypeList ClassBody

InterfaceDeclaration:

interface Identifier [extends TypeList] InterfaceBody

TypeList:

Type { , Type}

ClassBody:

lbrace {ClassBodyDeclaration} rbrace

InterfaceBody:

lbrace {InterfaceBodyDeclaration} rbrace

ClassBodyDeclaration:

;

ModifiersOpt MemberDecl

MemberDecl:

MethodOrFieldDecl

void Identifier MethodDeclaratorRest

Identifier ConstructorDeclaratorRest

ClassDeclaration

InterfaceDeclaration

MethodOrFieldDecl:

Type Identifier MethodOrFieldRest

MethodOrFieldRest:

VariableDeclaratorRest

MethodDeclaratorRest

InterfaceBodyDeclaration:

;

ModifiersOpt InterfaceMemberDecl

InterfaceMemberDecl:

InterfaceMethodOrFieldDecl

void Identifier VoidInterfaceMethodDeclaratorRest

ClassOrInterfaceDeclaration

InterfaceMethodOrFieldDecl:

Type Identifier InterfaceMethodOrFieldRest

InterfaceMethodOrFieldRest:

ConstantDeclaratorsRest ;

InterfaceMethodDeclaratorRest

MethodDeclaratorRest:

FormalParameters BracketsOpt [throws QualifiedIdentifierList] (MethodBody | ; )

VoidMethodDeclaratorRest:

FormalParameters [throws QualifiedIdentifierList] ( MethodBody | ; )

InterfaceMethodDeclaratorRest:

FormalParameters BracketsOpt [throws QualifiedIdentifierList] ;

VoidInterfaceMethodDeclaratorRest:

FormalParameters [throws QualifiedIdentifierList] ;

ConstructorDeclaratorRest:

FormalParameters [throws QualifiedIdentifierList] MethodBody

QualifiedIdentifierList:

QualifiedIdentifier { , QualifiedIdentifier}

FormalParameters:

( [FormalParameter { , FormalParameter}] )

FormalParameter:

[final] Type VariableDeclaratorId

MethodBody:

Block
