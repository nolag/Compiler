// From http://www.dai-arc.polito.it/dai-arc/manual/tools/jcat/main/node224.html#javasyntacticgrammar

Literal:

decimal_integer_literal

(true | false)

char_literal

str_literal

null

Type:

PrimitiveType

ReferenceType

PrimitiveType:

NumericType

boolean

NumericType:

IntegralType

IntegralType:

(byte | short | int | char)

ReferenceType:

Name

ArrayType


ClassType:

Name

InterfaceType:

Name

ArrayType:

PrimitiveType lbracket rbracket

Name lbracket rbracket

Name:

SimpleName

Name . id

SimpleName:

id

CompilationUnit:

[PackageDeclaration] [ImportDeclarations] [TypeDeclarations]

ImportDeclarations:

ImportDeclaration

ImportDeclarations ImportDeclaration

TypeDeclarations:

TypeDeclaration

TypeDeclarations TypeDeclaration

PackageDeclaration:

package Name ;

ImportDeclaration:

import Name ;

import Name . * ;

TypeDeclaration:

ClassDeclaration

InterfaceDeclaration

;

Modifiers:

Modifier

Modifiers Modifier

Modifier:

(public | protected | private)

static

(abstract | final | native | synchronized | transient | volatile)

ClassDeclaration:

[Modifiers] class id [extends ClassType] [implements InterfaceTypeList] ClassBody

InterfaceTypeList:

InterfaceType

InterfaceTypeList , InterfaceType

ClassBody:

lbrace [ClassBodyDeclarations] rbrace

ClassBodyDeclarations:

ClassBodyDeclaration

ClassBodyDeclarations ClassBodyDeclaration

ClassBodyDeclaration:

ClassMemberDeclaration

ConstructorDeclaration

ClassMemberDeclaration:

FieldDeclaration

MethodDeclaration

EmptyStatement

FieldDeclaration:

[Modifiers] Type VariableDeclarators ;

VariableDeclarators:

VariableDeclarator

// VariableDeclarators , VariableDeclarator

VariableDeclarator:

VariableDeclaratorId

VariableDeclaratorId = VariableInitializer

VariableDeclaratorId:

id

//No multi dim arrays
//VariableDeclaratorId lbracket rbracket

//No array after variable name in declaration
//id lbracket rbracket

VariableInitializer:

Expression

MethodDeclaration:

MethodHeader MethodBody

MethodHeader:

[Modifiers] Type MethodDeclarator

[Modifiers] void MethodDeclarator

MethodDeclarator:

id lparen [FormalParameterList] rparen

MethodDeclarator lbracket rbracket

FormalParameterList:

FormalParameter

FormalParameterList , FormalParameter

FormalParameter:

Type VariableDeclaratorId

ClassTypeList:

ClassType

ClassTypeList , ClassType

MethodBody:

Block

;

ConstructorDeclaration:

[Modifiers] ConstructorDeclarator ConstructorBody

ConstructorDeclarator:

SimpleName lparen [FormalParameterList] rparen

ConstructorBody:

//lbrace [ExplicitConstructorInvocation] [BlockStatements] rbrace  NOT ALLOWED IN JOOS

Block

//ExplicitConstructorInvocation:

//this lparen [ArgumentList] rparen ;

//super lparen [ArgumentList] rparen ;

InterfaceDeclaration:

[Modifiers] interface id [extends InterfaceTypeList] InterfaceBody

InterfaceBody:

lbrace [InterfaceMemberDeclarations] rbrace

InterfaceMemberDeclarations:

InterfaceMemberDeclaration

InterfaceMemberDeclarations InterfaceMemberDeclaration

InterfaceMemberDeclaration:

AbstractMethodDeclaration

AbstractMethodDeclaration:

MethodHeader ;

VariableInitializers:

VariableInitializer

VariableInitializers , VariableInitializer

Block:

lbrace [BlockStatements] rbrace

BlockStatements:

BlockStatement

BlockStatements BlockStatement

BlockStatement:

LocalVariableDeclarationStatement

Statement

LocalVariableDeclarationStatement:

LocalVariableDeclaration ;

LocalVariableDeclaration:

Type VariableDeclarators

Statement:

StatementWithoutTrailingSubstatement

IfThenStatement

IfThenElseStatement

WhileStatement

ForStatement

StatementNoShortIf:

StatementWithoutTrailingSubstatement

IfThenElseStatementNoShortIf

WhileStatementNoShortIf

ForStatementNoShortIf

StatementWithoutTrailingSubstatement:

Block

EmptyStatement

ExpressionStatement

ReturnStatement

EmptyStatement:

;

ExpressionStatement:

StatementExpression ;

StatementExpression:

Assignment

MethodInvocation

ClassInstanceCreationExpression

IfThenStatement:

if lparen Expression rparen Statement

IfThenElseStatement:

if lparen Expression rparen StatementNoShortIf else Statement

IfThenElseStatementNoShortIf:

if lparen Expression rparen StatementNoShortIf else StatementNoShortIf

WhileStatement:

while lparen Expression rparen Statement

WhileStatementNoShortIf:

while lparen Expression rparen StatementNoShortIf

ForStatement:

for lparen [ForInit] ; [Expression] ; [ForUpdate] rparen Statement

ForStatementNoShortIf:

for lparen [ForInit] ; [Expression] ; [ForUpdate] rparen StatementNoShortIf

ForInit:

StatementExpression

LocalVariableDeclaration

ForUpdate:

StatementExpression

ReturnStatement:

return [Expression] ;

BracketPrimary:

lparen Expression rparen

Primary:

PrimaryNoNewArray

ArrayCreationExpression

PrimaryNoNewArray:

Literal

this

BracketPrimary

ClassInstanceCreationExpression

FieldAccess

MethodInvocation

ArrayAccess

super

ClassInstanceCreationExpression:

new ClassType lparen [ArgumentList] rparen

ArgumentList:

Expression

ArgumentList , Expression

ArrayCreationExpression:

new PrimitiveType DimExpr
//new PrimitiveType DimExprs [Dims]

new Name DimExpr
//new Name DimExprs [Dims]

//DimExprs:

//DimExpr

//DimExprs DimExpr

DimExpr:

lbracket Expression rbracket

Dims:

lbracket rbracket

//Dims lbracket rbracket

FieldAccess:

Primary . id

MethodInvocation:

Name lparen [ArgumentList] rparen

Primary . id lparen [ArgumentList] rparen

//super . id lparen [ArgumentList] rparen

ArrayAccess:

Name lbracket Expression rbracket

PrimaryNoNewArray lbracket Expression rbracket

PostfixExpression:

Primary

Name

UnaryExpression:

- UnaryExpression

UnaryExpressionNotPlusMinus

UnaryExpressionNotPlusMinus:

PostfixExpression

! UnaryExpression

CastExpression

CastExpression:

lparen PrimitiveType [Dims] rparen UnaryExpression

lparen Expression rparen UnaryExpressionNotPlusMinus

lparen Name Dims rparen UnaryExpressionNotPlusMinus

MultiplicativeExpression:

UnaryExpression

MultiplicativeExpression * UnaryExpression

MultiplicativeExpression / UnaryExpression

MultiplicativeExpression % UnaryExpression

AdditiveExpression:

MultiplicativeExpression

AdditiveExpression + MultiplicativeExpression

AdditiveExpression - MultiplicativeExpression

RelationalExpression:

AdditiveExpression

RelationalExpression < AdditiveExpression

RelationalExpression > AdditiveExpression

RelationalExpression <= AdditiveExpression

RelationalExpression >= AdditiveExpression

RelationalExpression instanceof ReferenceType

EqualityExpression:

RelationalExpression

EqualityExpression == RelationalExpression

EqualityExpression != RelationalExpression

AndExpression:

EqualityExpression

AndExpression & EqualityExpression

InclusiveOrExpression:

AndExpression

InclusiveOrExpression pipe AndExpression

ConditionalAndExpression:

InclusiveOrExpression

ConditionalAndExpression && InclusiveOrExpression

ConditionalOrExpression:

ConditionalAndExpression

ConditionalOrExpression dpipe ConditionalAndExpression

AssignmentExpression:

ConditionalOrExpression

Assignment

Assignment:

LeftHandSide AssignmentOperator AssignmentExpression

LeftHandSide:

Name

FieldAccess

ArrayAccess

AssignmentOperator:

=

Expression:

AssignmentExpression

ConstantExpression:

Expression
