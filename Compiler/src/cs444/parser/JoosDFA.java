//This file is automatically generated do not modify by hand.
package cs444.parser;

import java.util.HashMap;
import java.util.Map;

import cs444.parser.IParserRule;
import cs444.parser.symbols.SymbolState;
import cs444.parser.symbols.factories.NonTerminalFactory;
public class JoosDFA implements IParserRule{
    public Map<Integer, Map<String, SymbolState>> getRules() {
        
        Map<Integer, Map<String, SymbolState>> rules = new HashMap<Integer, Map<String, SymbolState>>();
        NonTerminalFactory MORESTATEMENTEXPRESSIONS = new NonTerminalFactory("MORESTATEMENTEXPRESSIONS");
        NonTerminalFactory N_DOT_ID_0 = new NonTerminalFactory("N_DOT_ID_0");
        NonTerminalFactory N_CLASSBODYDECLARATION_0 = new NonTerminalFactory("N_CLASSBODYDECLARATION_0");
        NonTerminalFactory INFIXOP = new NonTerminalFactory("INFIXOP");
        NonTerminalFactory INTEGERLITERAL = new NonTerminalFactory("INTEGERLITERAL");
        NonTerminalFactory N_COMMA_CONSTANTDECLARATOR_0 = new NonTerminalFactory("N_COMMA_CONSTANTDECLARATOR_0");
        NonTerminalFactory QUALIFIEDIDENTIFIERLIST = new NonTerminalFactory("QUALIFIEDIDENTIFIERLIST");
        NonTerminalFactory FIELDDECL = new NonTerminalFactory("FIELDDECL");
        NonTerminalFactory CREATOR = new NonTerminalFactory("CREATOR");
        NonTerminalFactory N_COMMA_VARIABLEDECLARATOR_0 = new NonTerminalFactory("N_COMMA_VARIABLEDECLARATOR_0");
        NonTerminalFactory CLASSBODY = new NonTerminalFactory("CLASSBODY");
        NonTerminalFactory BOOLEANLITERAL = new NonTerminalFactory("BOOLEANLITERAL");
        NonTerminalFactory FORMALPARAMETERS = new NonTerminalFactory("FORMALPARAMETERS");
        NonTerminalFactory N_COMMA_TYPE_0 = new NonTerminalFactory("N_COMMA_TYPE_0");
        NonTerminalFactory CONSTANTDECLARATORREST = new NonTerminalFactory("CONSTANTDECLARATORREST");
        NonTerminalFactory N_COMMA_QUALIFIEDIDENTIFIER_0 = new NonTerminalFactory("N_COMMA_QUALIFIEDIDENTIFIER_0");
        NonTerminalFactory METHODDECLARATORREST = new NonTerminalFactory("METHODDECLARATORREST");
        NonTerminalFactory INTERFACEMETHODORFIELDDECL = new NonTerminalFactory("INTERFACEMETHODORFIELDDECL");
        NonTerminalFactory BRACKETSOPT = new NonTerminalFactory("BRACKETSOPT");
        NonTerminalFactory STATEMENT = new NonTerminalFactory("STATEMENT");
        NonTerminalFactory MODIFIER = new NonTerminalFactory("MODIFIER");
        NonTerminalFactory ARRAYCREATORREST = new NonTerminalFactory("ARRAYCREATORREST");
        NonTerminalFactory FORMALPARAMETER = new NonTerminalFactory("FORMALPARAMETER");
        NonTerminalFactory N_COMMA_FORMALPARAMETER_0 = new NonTerminalFactory("N_COMMA_FORMALPARAMETER_0");
        NonTerminalFactory TYPE = new NonTerminalFactory("TYPE");
        NonTerminalFactory N_COMMA_EXPRESSION_0 = new NonTerminalFactory("N_COMMA_EXPRESSION_0");
        NonTerminalFactory MEMBERDECL = new NonTerminalFactory("MEMBERDECL");
        NonTerminalFactory SELECTOR = new NonTerminalFactory("SELECTOR");
        NonTerminalFactory VARIABLEINITIALIZER = new NonTerminalFactory("VARIABLEINITIALIZER");
        NonTerminalFactory N_COMMA_STATEMENTEXPRESSION_0 = new NonTerminalFactory("N_COMMA_STATEMENTEXPRESSION_0");
        NonTerminalFactory ASSIGNMENTOPERATOR = new NonTerminalFactory("ASSIGNMENTOPERATOR");
        NonTerminalFactory CONSTANTDECLARATOR = new NonTerminalFactory("CONSTANTDECLARATOR");
        NonTerminalFactory N_SELECTOR_0 = new NonTerminalFactory("N_SELECTOR_0");
        NonTerminalFactory CONSTRUCTORDECLARATORREST = new NonTerminalFactory("CONSTRUCTORDECLARATORREST");
        NonTerminalFactory VARIABLEDECLARATORSREST = new NonTerminalFactory("VARIABLEDECLARATORSREST");
        NonTerminalFactory TYPELIST = new NonTerminalFactory("TYPELIST");
        NonTerminalFactory VARIABLEDECLARATORS = new NonTerminalFactory("VARIABLEDECLARATORS");
        NonTerminalFactory BASICTYPE = new NonTerminalFactory("BASICTYPE");
        NonTerminalFactory INTERFACEMETHODORFIELDREST = new NonTerminalFactory("INTERFACEMETHODORFIELDREST");
        NonTerminalFactory STATEMENTEXPRESSION = new NonTerminalFactory("STATEMENTEXPRESSION");
        NonTerminalFactory N_INTERFACEBODYDECLARATION_0 = new NonTerminalFactory("N_INTERFACEBODYDECLARATION_0");
        NonTerminalFactory EXPRESSION = new NonTerminalFactory("EXPRESSION");
        NonTerminalFactory COMPILATIONUNIT = new NonTerminalFactory("COMPILATIONUNIT");
        NonTerminalFactory VOIDMETHODDECLARATORREST = new NonTerminalFactory("VOIDMETHODDECLARATORREST");
        NonTerminalFactory INTERFACEDECLARATION = new NonTerminalFactory("INTERFACEDECLARATION");
        NonTerminalFactory CLASSBODYDECLARATION = new NonTerminalFactory("CLASSBODYDECLARATION");
        NonTerminalFactory CONSTANTEXPRESSION = new NonTerminalFactory("CONSTANTEXPRESSION");
        NonTerminalFactory FORUPDATE = new NonTerminalFactory("FORUPDATE");
        NonTerminalFactory CLASSDECLARATION = new NonTerminalFactory("CLASSDECLARATION");
        NonTerminalFactory VARIABLEDECLARATORID = new NonTerminalFactory("VARIABLEDECLARATORID");
        NonTerminalFactory ARGUMENTS = new NonTerminalFactory("ARGUMENTS");
        NonTerminalFactory FORINIT = new NonTerminalFactory("FORINIT");
        NonTerminalFactory METHODBODY = new NonTerminalFactory("METHODBODY");
        NonTerminalFactory QUALIFIEDIDENTIFIER = new NonTerminalFactory("QUALIFIEDIDENTIFIER");
        NonTerminalFactory N_TYPEDECLARATION_0 = new NonTerminalFactory("N_TYPEDECLARATION_0");
        NonTerminalFactory IDENTIFIERSUFFIX = new NonTerminalFactory("IDENTIFIERSUFFIX");
        NonTerminalFactory N_BLOCKSTATEMENT_0 = new NonTerminalFactory("N_BLOCKSTATEMENT_0");
        NonTerminalFactory LOCALVARIABLEDECLARATIONSTATEMENT = new NonTerminalFactory("LOCALVARIABLEDECLARATIONSTATEMENT");
        NonTerminalFactory INTERFACEMETHODDECLARATORREST = new NonTerminalFactory("INTERFACEMETHODDECLARATORREST");
        NonTerminalFactory TYPEDECLARATION = new NonTerminalFactory("TYPEDECLARATION");
        NonTerminalFactory LITERAL = new NonTerminalFactory("LITERAL");
        NonTerminalFactory PRIMARY = new NonTerminalFactory("PRIMARY");
        NonTerminalFactory S = new NonTerminalFactory("S");
        NonTerminalFactory INTERFACEBODY = new NonTerminalFactory("INTERFACEBODY");
        NonTerminalFactory ARGUMENTSOPT = new NonTerminalFactory("ARGUMENTSOPT");
        NonTerminalFactory INTERFACEBODYDECLARATION = new NonTerminalFactory("INTERFACEBODYDECLARATION");
        NonTerminalFactory N_MODIFIER_0 = new NonTerminalFactory("N_MODIFIER_0");
        NonTerminalFactory METHODDECL = new NonTerminalFactory("METHODDECL");
        NonTerminalFactory BLOCKSTATEMENTS = new NonTerminalFactory("BLOCKSTATEMENTS");
        NonTerminalFactory CONSTANTDECLARATORSREST = new NonTerminalFactory("CONSTANTDECLARATORSREST");
        NonTerminalFactory PREFIXOP = new NonTerminalFactory("PREFIXOP");
        NonTerminalFactory EXPRESSION2REST = new NonTerminalFactory("EXPRESSION2REST");
        NonTerminalFactory BLOCK = new NonTerminalFactory("BLOCK");
        NonTerminalFactory BLOCKSTATEMENT = new NonTerminalFactory("BLOCKSTATEMENT");
        NonTerminalFactory VARIABLEDECLARATORREST = new NonTerminalFactory("VARIABLEDECLARATORREST");
        NonTerminalFactory N_IMPORTDECLARATION_0 = new NonTerminalFactory("N_IMPORTDECLARATION_0");
        NonTerminalFactory VOIDINTERFACEMETHODDECLARATORREST = new NonTerminalFactory("VOIDINTERFACEMETHODDECLARATORREST");
        NonTerminalFactory EXPRESSION1 = new NonTerminalFactory("EXPRESSION1");
        NonTerminalFactory INTERFACEMEMBERDECL = new NonTerminalFactory("INTERFACEMEMBERDECL");
        NonTerminalFactory IMPORTDECLARATION = new NonTerminalFactory("IMPORTDECLARATION");
        NonTerminalFactory PAREXPRESSION = new NonTerminalFactory("PAREXPRESSION");
        NonTerminalFactory EXPRESSION3 = new NonTerminalFactory("EXPRESSION3");
        NonTerminalFactory CLASSCREATORREST = new NonTerminalFactory("CLASSCREATORREST");
        NonTerminalFactory EXPRESSION2 = new NonTerminalFactory("EXPRESSION2");
        NonTerminalFactory VARIABLEDECLARATOR = new NonTerminalFactory("VARIABLEDECLARATOR");
        
        Map<String, SymbolState> state142 = new HashMap<String, SymbolState>();
        rules.put(142, state142);
        state142.put("PUBLIC", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        Map<String, SymbolState> state227 = new HashMap<String, SymbolState>();
        rules.put(227, state227);
        state227.put("VOLATILE", new SymbolState(CLASSBODY,  3));
        Map<String, SymbolState> state84 = new HashMap<String, SymbolState>();
        rules.put(84, state84);
        state84.put("TYPE", new SymbolState(1));
        state84.put("BYTE", new SymbolState(2));
        Map<String, SymbolState> state34 = new HashMap<String, SymbolState>();
        rules.put(34, state34);
        state34.put("BYTE", new SymbolState(STATEMENTEXPRESSION,  1));
        Map<String, SymbolState> state48 = new HashMap<String, SymbolState>();
        rules.put(48, state48);
        state48.put("NATIVE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state147 = new HashMap<String, SymbolState>();
        rules.put(147, state147);
        state147.put("RPAREN", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  0));
        Map<String, SymbolState> state36 = new HashMap<String, SymbolState>();
        rules.put(36, state36);
        state36.put("PROTECTED", new SymbolState(CLASSDECLARATION,  7));
        Map<String, SymbolState> state58 = new HashMap<String, SymbolState>();
        rules.put(58, state58);
        state58.put("COMMA", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state10 = new HashMap<String, SymbolState>();
        rules.put(10, state10);
        state10.put("DOUBLE", new SymbolState(N_MODIFIER_0,  2));
        Map<String, SymbolState> state12 = new HashMap<String, SymbolState>();
        rules.put(12, state12);
        state12.put("WHILE", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state73 = new HashMap<String, SymbolState>();
        rules.put(73, state73);
        state73.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state42 = new HashMap<String, SymbolState>();
        rules.put(42, state42);
        state42.put("LBRACE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state193 = new HashMap<String, SymbolState>();
        rules.put(193, state193);
        state193.put("COMMA", new SymbolState(3));
        Map<String, SymbolState> state29 = new HashMap<String, SymbolState>();
        rules.put(29, state29);
        state29.put("STATIC", new SymbolState(TYPEDECLARATION,  1));
        Map<String, SymbolState> state60 = new HashMap<String, SymbolState>();
        rules.put(60, state60);
        state60.put("STATIC", new SymbolState(METHODDECL,  2));
        state12.put("TRUE", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state101 = new HashMap<String, SymbolState>();
        rules.put(101, state101);
        state101.put("STATEMENT", new SymbolState(4));
        state12.put("SEMI", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state70 = new HashMap<String, SymbolState>();
        rules.put(70, state70);
        state70.put("CHAR", new SymbolState(5));
        Map<String, SymbolState> state83 = new HashMap<String, SymbolState>();
        rules.put(83, state83);
        state83.put("RPAREN", new SymbolState(FORUPDATE,  2));
        Map<String, SymbolState> state98 = new HashMap<String, SymbolState>();
        rules.put(98, state98);
        state98.put("DOUBLE", new SymbolState(6));
        Map<String, SymbolState> state95 = new HashMap<String, SymbolState>();
        rules.put(95, state95);
        state95.put("CHAR_LITERAL", new SymbolState(STATEMENT,  9));
        Map<String, SymbolState> state13 = new HashMap<String, SymbolState>();
        rules.put(13, state13);
        state13.put("COMMA", new SymbolState(VARIABLEDECLARATORREST,  0));
        Map<String, SymbolState> state203 = new HashMap<String, SymbolState>();
        rules.put(203, state203);
        state203.put("ID", new SymbolState(METHODDECL,  2));
        Map<String, SymbolState> state129 = new HashMap<String, SymbolState>();
        rules.put(129, state129);
        state129.put("CHAR", new SymbolState(5));
        state129.put("BOOLEANLITERAL", new SymbolState(7));
        Map<String, SymbolState> state62 = new HashMap<String, SymbolState>();
        rules.put(62, state62);
        state62.put("ID", new SymbolState(METHODDECLARATORREST,  2));
        Map<String, SymbolState> state69 = new HashMap<String, SymbolState>();
        rules.put(69, state69);
        state69.put("RBRACE", new SymbolState(STATEMENT,  1));
        Map<String, SymbolState> state177 = new HashMap<String, SymbolState>();
        rules.put(177, state177);
        state177.put("STATEMENT", new SymbolState(8));
        state58.put("LONG", new SymbolState(BOOLEANLITERAL,  1));
        state73.put("VOLATILE", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state112 = new HashMap<String, SymbolState>();
        rules.put(112, state112);
        state112.put("VOLATILE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state215 = new HashMap<String, SymbolState>();
        rules.put(215, state215);
        state215.put("PRIVATE", new SymbolState(IMPORTDECLARATION,  4));
        Map<String, SymbolState> state90 = new HashMap<String, SymbolState>();
        rules.put(90, state90);
        state90.put("BYTE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state215.put("PUBLIC", new SymbolState(IMPORTDECLARATION,  4));
        Map<String, SymbolState> state44 = new HashMap<String, SymbolState>();
        rules.put(44, state44);
        state44.put("DOUBLE", new SymbolState(FIELDDECL,  5));
        state112.put("FINAL", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state16 = new HashMap<String, SymbolState>();
        rules.put(16, state16);
        state16.put("RBRACE", new SymbolState(LITERAL,  1));
        state73.put("CLASS", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state194 = new HashMap<String, SymbolState>();
        rules.put(194, state194);
        state194.put("LBRACE", new SymbolState(N_COMMA_TYPE_0,  3));
        Map<String, SymbolState> state166 = new HashMap<String, SymbolState>();
        rules.put(166, state166);
        state166.put("STATIC", new SymbolState(FIELDDECL,  5));
        Map<String, SymbolState> state116 = new HashMap<String, SymbolState>();
        rules.put(116, state116);
        state116.put("TRANSIENT", new SymbolState(INTERFACEMEMBERDECL,  3));
        Map<String, SymbolState> state50 = new HashMap<String, SymbolState>();
        rules.put(50, state50);
        state50.put("STATIC", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state207 = new HashMap<String, SymbolState>();
        rules.put(207, state207);
        state207.put("TYPE", new SymbolState(9));
        Map<String, SymbolState> state216 = new HashMap<String, SymbolState>();
        rules.put(216, state216);
        state216.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state34.put("CHAR_LITERAL", new SymbolState(STATEMENTEXPRESSION,  1));
        Map<String, SymbolState> state94 = new HashMap<String, SymbolState>();
        rules.put(94, state94);
        state94.put("MODIFIER", new SymbolState(10));
        state129.put("LONG", new SymbolState(11));
        Map<String, SymbolState> state143 = new HashMap<String, SymbolState>();
        rules.put(143, state143);
        state143.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state36.put("PRIVATE", new SymbolState(CLASSDECLARATION,  7));
        Map<String, SymbolState> state53 = new HashMap<String, SymbolState>();
        rules.put(53, state53);
        state53.put("ID", new SymbolState(13));
        state94.put("PRIVATE", new SymbolState(14));
        Map<String, SymbolState> state68 = new HashMap<String, SymbolState>();
        rules.put(68, state68);
        state68.put("FLOAT", new SymbolState(15));
        Map<String, SymbolState> state151 = new HashMap<String, SymbolState>();
        rules.put(151, state151);
        state151.put("NULL", new SymbolState(16));
        state50.put("DOUBLE", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state185 = new HashMap<String, SymbolState>();
        rules.put(185, state185);
        state185.put("INTEGERLITERAL", new SymbolState(17));
        Map<String, SymbolState> state97 = new HashMap<String, SymbolState>();
        rules.put(97, state97);
        state97.put("SEMI", new SymbolState(N_DOT_ID_0,  3));
        state227.put("PRIVATE", new SymbolState(CLASSBODY,  3));
        Map<String, SymbolState> state49 = new HashMap<String, SymbolState>();
        rules.put(49, state49);
        state49.put("SEMI", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        Map<String, SymbolState> state45 = new HashMap<String, SymbolState>();
        rules.put(45, state45);
        state45.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENT,  1));
        Map<String, SymbolState> state46 = new HashMap<String, SymbolState>();
        rules.put(46, state46);
        state46.put("DO", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state39 = new HashMap<String, SymbolState>();
        rules.put(39, state39);
        state39.put("SHORT", new SymbolState(STATEMENT,  2));
        Map<String, SymbolState> state175 = new HashMap<String, SymbolState>();
        rules.put(175, state175);
        state175.put("CLASS", new SymbolState(18));
        Map<String, SymbolState> state24 = new HashMap<String, SymbolState>();
        rules.put(24, state24);
        state24.put("CHAR", new SymbolState(LITERAL,  1));
        state16.put("FOR", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state55 = new HashMap<String, SymbolState>();
        rules.put(55, state55);
        state55.put("FINAL", new SymbolState(19));
        state94.put("BASICTYPE", new SymbolState(20));
        state34.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENTEXPRESSION,  1));
        state12.put("FLOAT", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state115 = new HashMap<String, SymbolState>();
        rules.put(115, state115);
        state115.put("SYNCHRONIZED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state67 = new HashMap<String, SymbolState>();
        rules.put(67, state67);
        state67.put("TYPE", new SymbolState(21));
        Map<String, SymbolState> state140 = new HashMap<String, SymbolState>();
        rules.put(140, state140);
        state140.put("VOID", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state95.put("CHAR", new SymbolState(STATEMENT,  9));
        Map<String, SymbolState> state131 = new HashMap<String, SymbolState>();
        rules.put(131, state131);
        state131.put("PROTECTED", new SymbolState(MEMBERDECL,  1));
        state48.put("SEMI", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state200 = new HashMap<String, SymbolState>();
        rules.put(200, state200);
        state200.put("NATIVE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        Map<String, SymbolState> state209 = new HashMap<String, SymbolState>();
        rules.put(209, state209);
        state209.put("NULL", new SymbolState(BLOCKSTATEMENT,  1));
        Map<String, SymbolState> state135 = new HashMap<String, SymbolState>();
        rules.put(135, state135);
        state135.put("NULL", new SymbolState(STATEMENT,  3));
        state34.put("FALSE", new SymbolState(STATEMENTEXPRESSION,  1));
        state101.put("RETURN", new SymbolState(22));
        Map<String, SymbolState> state107 = new HashMap<String, SymbolState>();
        rules.put(107, state107);
        state107.put("CLASS", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state136 = new HashMap<String, SymbolState>();
        rules.put(136, state136);
        state136.put("SEMI", new SymbolState(N_COMMA_CONSTANTDECLARATOR_0,  0));
        Map<String, SymbolState> state150 = new HashMap<String, SymbolState>();
        rules.put(150, state150);
        state150.put("INT", new SymbolState(23));
        Map<String, SymbolState> state104 = new HashMap<String, SymbolState>();
        rules.put(104, state104);
        state104.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state107.put("ID", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state17 = new HashMap<String, SymbolState>();
        rules.put(17, state17);
        state17.put("LONG", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state32 = new HashMap<String, SymbolState>();
        rules.put(32, state32);
        state32.put("STR_LITERAL", new SymbolState(24));
        Map<String, SymbolState> state106 = new HashMap<String, SymbolState>();
        rules.put(106, state106);
        state106.put("LBRACE", new SymbolState(BRACKETSOPT,  2));
        Map<String, SymbolState> state220 = new HashMap<String, SymbolState>();
        rules.put(220, state220);
        state220.put("LBRACKET", new SymbolState(25));
        state95.put("TRUE", new SymbolState(STATEMENT,  9));
        state58.put("CHAR", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state64 = new HashMap<String, SymbolState>();
        rules.put(64, state64);
        state64.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state10.put("CLASS", new SymbolState(N_MODIFIER_0,  2));
        Map<String, SymbolState> state202 = new HashMap<String, SymbolState>();
        rules.put(202, state202);
        state202.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state225 = new HashMap<String, SymbolState>();
        rules.put(225, state225);
        state225.put("BRACKETSOPT", new SymbolState(26));
        Map<String, SymbolState> state170 = new HashMap<String, SymbolState>();
        rules.put(170, state170);
        state170.put("LONG", new SymbolState(N_MODIFIER_0,  0));
        state95.put("INT", new SymbolState(STATEMENT,  9));
        Map<String, SymbolState> state76 = new HashMap<String, SymbolState>();
        rules.put(76, state76);
        state76.put("DOUBLE", new SymbolState(BLOCK,  3));
        state115.put("STRICTFP", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state168 = new HashMap<String, SymbolState>();
        rules.put(168, state168);
        state168.put("STRICTFP", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state112.put("FLOAT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state208 = new HashMap<String, SymbolState>();
        rules.put(208, state208);
        state208.put("FINAL", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        Map<String, SymbolState> state148 = new HashMap<String, SymbolState>();
        rules.put(148, state148);
        state148.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state117 = new HashMap<String, SymbolState>();
        rules.put(117, state117);
        state117.put("RBRACE", new SymbolState(CLASSBODYDECLARATION,  2));
        state64.put("VOID", new SymbolState(MODIFIER,  1));
        state117.put("STATIC", new SymbolState(CLASSBODYDECLARATION,  2));
        Map<String, SymbolState> state205 = new HashMap<String, SymbolState>();
        rules.put(205, state205);
        state205.put("SEMI", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state57 = new HashMap<String, SymbolState>();
        rules.put(57, state57);
        state57.put("NULL", new SymbolState(BLOCKSTATEMENT,  1));
        Map<String, SymbolState> state7 = new HashMap<String, SymbolState>();
        rules.put(7, state7);
        state7.put("STR_LITERAL", new SymbolState(LITERAL,  1));
        state168.put("NATIVE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state177.put("BLOCK", new SymbolState(27));
        state220.put("SEMI", new SymbolState(BRACKETSOPT,  0));
        state135.put("DOUBLE", new SymbolState(STATEMENT,  3));
        state57.put("ID", new SymbolState(BLOCKSTATEMENT,  1));
        state202.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        state112.put("PRIVATE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state85 = new HashMap<String, SymbolState>();
        rules.put(85, state85);
        state85.put("CHAR_LITERAL", new SymbolState(28));
        Map<String, SymbolState> state152 = new HashMap<String, SymbolState>();
        rules.put(152, state152);
        state152.put("INTEGERLITERAL", new SymbolState(17));
        state64.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state180 = new HashMap<String, SymbolState>();
        rules.put(180, state180);
        state180.put("STRICTFP", new SymbolState(INTERFACEMEMBERDECL,  1));
        Map<String, SymbolState> state14 = new HashMap<String, SymbolState>();
        rules.put(14, state14);
        state14.put("CHAR", new SymbolState(MODIFIER,  1));
        state185.put("NULL", new SymbolState(16));
        Map<String, SymbolState> state87 = new HashMap<String, SymbolState>();
        rules.put(87, state87);
        state87.put("PUBLIC", new SymbolState(N_IMPORTDECLARATION_0,  2));
        Map<String, SymbolState> state37 = new HashMap<String, SymbolState>();
        rules.put(37, state37);
        state37.put("INT", new SymbolState(23));
        state216.put("SEMI", new SymbolState(29));
        state166.put("CHAR", new SymbolState(FIELDDECL,  5));
        state94.put("STATIC", new SymbolState(30));
        state150.put("DOUBLE", new SymbolState(6));
        Map<String, SymbolState> state100 = new HashMap<String, SymbolState>();
        rules.put(100, state100);
        state100.put("BYTE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state28 = new HashMap<String, SymbolState>();
        rules.put(28, state28);
        state28.put("DECIMAL_INTEGER_LITERAL", new SymbolState(LITERAL,  1));
        state55.put("ID", new SymbolState(31));
        state60.put("CHAR", new SymbolState(METHODDECL,  2));
        state148.put("NATIVE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state219 = new HashMap<String, SymbolState>();
        rules.put(219, state219);
        state219.put("PRIVATE", new SymbolState(FORMALPARAMETERS,  2));
        state129.put("FLOAT", new SymbolState(15));
        Map<String, SymbolState> state80 = new HashMap<String, SymbolState>();
        rules.put(80, state80);
        state80.put("LONG", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state35 = new HashMap<String, SymbolState>();
        rules.put(35, state35);
        state35.put("PAREXPRESSION", new SymbolState(32));
        state219.put("DOUBLE", new SymbolState(FORMALPARAMETERS,  2));
        Map<String, SymbolState> state176 = new HashMap<String, SymbolState>();
        rules.put(176, state176);
        state176.put("FINAL", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state98.put("CHAR", new SymbolState(5));
        Map<String, SymbolState> state51 = new HashMap<String, SymbolState>();
        rules.put(51, state51);
        state51.put("ID", new SymbolState(N_DOT_ID_0,  0));
        Map<String, SymbolState> state172 = new HashMap<String, SymbolState>();
        rules.put(172, state172);
        state172.put("NULL", new SymbolState(16));
        state215.put("EOF", new SymbolState(IMPORTDECLARATION,  4));
        state28.put("CHAR_LITERAL", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state196 = new HashMap<String, SymbolState>();
        rules.put(196, state196);
        state196.put("LBRACE", new SymbolState(33));
        state215.put("INTERFACE", new SymbolState(IMPORTDECLARATION,  4));
        Map<String, SymbolState> state226 = new HashMap<String, SymbolState>();
        rules.put(226, state226);
        state226.put("ID", new SymbolState(31));
        state115.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state149 = new HashMap<String, SymbolState>();
        rules.put(149, state149);
        state149.put("STATIC", new SymbolState(CLASSDECLARATION,  5));
        state200.put("RBRACE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state166.put("PUBLIC", new SymbolState(FIELDDECL,  5));
        state148.put("CHAR", new SymbolState(MODIFIER,  1));
        state143.put("EXPRESSION", new SymbolState(34));
        Map<String, SymbolState> state91 = new HashMap<String, SymbolState>();
        rules.put(91, state91);
        state91.put("PUBLIC", new SymbolState(N_TYPEDECLARATION_0,  2));
        state101.put("WHILE", new SymbolState(35));
        state150.put("TYPE", new SymbolState(1));
        Map<String, SymbolState> state127 = new HashMap<String, SymbolState>();
        rules.put(127, state127);
        state127.put("CLASSBODY", new SymbolState(36));
        state14.put("BYTE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state54 = new HashMap<String, SymbolState>();
        rules.put(54, state54);
        state54.put("LPAREN", new SymbolState(37));
        Map<String, SymbolState> state199 = new HashMap<String, SymbolState>();
        rules.put(199, state199);
        state199.put("CHAR", new SymbolState(FORMALPARAMETERS,  4));
        Map<String, SymbolState> state31 = new HashMap<String, SymbolState>();
        rules.put(31, state31);
        state31.put("LBRACE", new SymbolState(N_DOT_ID_0,  0));
        state94.put("INT", new SymbolState(23));
        state24.put("TRUE", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state27 = new HashMap<String, SymbolState>();
        rules.put(27, state27);
        state27.put("FLOAT", new SymbolState(STATEMENT,  1));
        Map<String, SymbolState> state15 = new HashMap<String, SymbolState>();
        rules.put(15, state15);
        state15.put("LBRACE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state30 = new HashMap<String, SymbolState>();
        rules.put(30, state30);
        state30.put("SHORT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state138 = new HashMap<String, SymbolState>();
        rules.put(138, state138);
        state138.put("FALSE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        Map<String, SymbolState> state224 = new HashMap<String, SymbolState>();
        rules.put(224, state224);
        state224.put("SEMI", new SymbolState(VARIABLEDECLARATOR,  2));
        state185.put("BOOLEANLITERAL", new SymbolState(7));
        state76.put("BOOLEAN", new SymbolState(BLOCK,  3));
        state219.put("SEMI", new SymbolState(FORMALPARAMETERS,  2));
        state30.put("CLASS", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state153 = new HashMap<String, SymbolState>();
        rules.put(153, state153);
        state153.put("STATIC", new SymbolState(MEMBERDECL,  1));
        state152.put("EXPRESSION", new SymbolState(38));
        Map<String, SymbolState> state22 = new HashMap<String, SymbolState>();
        rules.put(22, state22);
        state22.put("SEMI", new SymbolState(39));
        Map<String, SymbolState> state121 = new HashMap<String, SymbolState>();
        rules.put(121, state121);
        state121.put("PROTECTED", new SymbolState(METHODDECL,  4));
        state205.put("STR_LITERAL", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state40 = new HashMap<String, SymbolState>();
        rules.put(40, state40);
        state40.put("RBRACE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state85.put("BOOLEANLITERAL", new SymbolState(7));
        Map<String, SymbolState> state82 = new HashMap<String, SymbolState>();
        rules.put(82, state82);
        state82.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        state12.put("DOUBLE", new SymbolState(INTEGERLITERAL,  1));
        state135.put("FLOAT", new SymbolState(STATEMENT,  3));
        state28.put("CHAR", new SymbolState(LITERAL,  1));
        state10.put("CHAR", new SymbolState(N_MODIFIER_0,  2));
        state149.put("PRIVATE", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state206 = new HashMap<String, SymbolState>();
        rules.put(206, state206);
        state206.put("LBRACE", new SymbolState(40));
        state60.put("VOLATILE", new SymbolState(METHODDECL,  2));
        Map<String, SymbolState> state178 = new HashMap<String, SymbolState>();
        rules.put(178, state178);
        state178.put("LONG", new SymbolState(STATEMENT,  3));
        state199.put("PUBLIC", new SymbolState(FORMALPARAMETERS,  4));
        state76.put("INT", new SymbolState(BLOCK,  3));
        Map<String, SymbolState> state0 = new HashMap<String, SymbolState>();
        rules.put(0, state0);
        state0.put("N_IMPORTDECLARATION_0", new SymbolState(41));
        state131.put("NATIVE", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state128 = new HashMap<String, SymbolState>();
        rules.put(128, state128);
        state128.put("VOLATILE", new SymbolState(IMPORTDECLARATION,  6));
        state10.put("PROTECTED", new SymbolState(N_MODIFIER_0,  2));
        state170.put("BOOLEAN", new SymbolState(N_MODIFIER_0,  0));
        state170.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state103 = new HashMap<String, SymbolState>();
        rules.put(103, state103);
        state103.put("DOUBLE", new SymbolState(6));
        state55.put("DOUBLE", new SymbolState(6));
        state57.put("DO", new SymbolState(BLOCKSTATEMENT,  1));
        state121.put("SHORT", new SymbolState(METHODDECL,  4));
        state24.put("FLOAT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state223 = new HashMap<String, SymbolState>();
        rules.put(223, state223);
        state223.put("FLOAT", new SymbolState(STATEMENT,  5));
        state94.put("SHORT", new SymbolState(42));
        state12.put("FOR", new SymbolState(INTEGERLITERAL,  1));
        state178.put("RETURN", new SymbolState(STATEMENT,  3));
        state219.put("PUBLIC", new SymbolState(FORMALPARAMETERS,  2));
        Map<String, SymbolState> state181 = new HashMap<String, SymbolState>();
        rules.put(181, state181);
        state181.put("DOUBLE", new SymbolState(METHODBODY,  1));
        state29.put("FINAL", new SymbolState(TYPEDECLARATION,  1));
        state37.put("LITERAL", new SymbolState(43));
        state82.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state48.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state82.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        state143.put("BLOCK", new SymbolState(27));
        Map<String, SymbolState> state188 = new HashMap<String, SymbolState>();
        rules.put(188, state188);
        state188.put("SEMI", new SymbolState(44));
        Map<String, SymbolState> state197 = new HashMap<String, SymbolState>();
        rules.put(197, state197);
        state197.put("INT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state60.put("LONG", new SymbolState(METHODDECL,  2));
        state177.put("SEMI", new SymbolState(45));
        state69.put("ID", new SymbolState(STATEMENT,  1));
        state177.put("TRUE", new SymbolState(46));
        state10.put("BYTE", new SymbolState(N_MODIFIER_0,  2));
        state181.put("STRICTFP", new SymbolState(METHODBODY,  1));
        state129.put("NULL", new SymbolState(16));
        Map<String, SymbolState> state183 = new HashMap<String, SymbolState>();
        rules.put(183, state183);
        state183.put("STATIC", new SymbolState(INTERFACEDECLARATION,  3));
        state48.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state200.put("SHORT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        Map<String, SymbolState> state89 = new HashMap<String, SymbolState>();
        rules.put(89, state89);
        state89.put("SYNCHRONIZED", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state100.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state138.put("INT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state227.put("CLASS", new SymbolState(CLASSBODY,  3));
        state199.put("VOLATILE", new SymbolState(FORMALPARAMETERS,  4));
        state0.put("TRANSIENT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state170.put("SHORT", new SymbolState(N_MODIFIER_0,  0));
        state73.put("PRIVATE", new SymbolState(CLASSDECLARATION,  5));
        state57.put("FLOAT", new SymbolState(BLOCKSTATEMENT,  1));
        Map<String, SymbolState> state33 = new HashMap<String, SymbolState>();
        rules.put(33, state33);
        state33.put("SEMI", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        Map<String, SymbolState> state113 = new HashMap<String, SymbolState>();
        rules.put(113, state113);
        state113.put("INTERFACEBODY", new SymbolState(47));
        state50.put("LONG", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state184 = new HashMap<String, SymbolState>();
        rules.put(184, state184);
        state184.put("DO", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state94.put("NATIVE", new SymbolState(48));
        state121.put("SYNCHRONIZED", new SymbolState(METHODDECL,  4));
        Map<String, SymbolState> state102 = new HashMap<String, SymbolState>();
        rules.put(102, state102);
        state102.put("ABSTRACT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state170.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state104.put("PROTECTED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state20 = new HashMap<String, SymbolState>();
        rules.put(20, state20);
        state20.put("ID", new SymbolState(BRACKETSOPT,  0));
        state58.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BOOLEANLITERAL,  1));
        state219.put("FINAL", new SymbolState(FORMALPARAMETERS,  2));
        state67.put("INT", new SymbolState(23));
        state226.put("INT", new SymbolState(23));
        state100.put("INT", new SymbolState(MODIFIER,  1));
        state69.put("INT", new SymbolState(STATEMENT,  1));
        state143.put("LBRACE", new SymbolState(49));
        state176.put("BOOLEAN", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state116.put("LONG", new SymbolState(INTERFACEMEMBERDECL,  3));
        state131.put("SHORT", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state165 = new HashMap<String, SymbolState>();
        rules.put(165, state165);
        state165.put("SEMI", new SymbolState(50));
        state91.put("STATIC", new SymbolState(N_TYPEDECLARATION_0,  2));
        state60.put("DOUBLE", new SymbolState(METHODDECL,  2));
        state89.put("ID", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state180.put("PRIVATE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state94.put("ID", new SymbolState(51));
        state97.put("ID", new SymbolState(N_DOT_ID_0,  3));
        state37.put("SHORT", new SymbolState(42));
        state87.put("STATIC", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state58.put("BYTE", new SymbolState(BOOLEANLITERAL,  1));
        state40.put("LONG", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state128.put("NATIVE", new SymbolState(IMPORTDECLARATION,  6));
        state170.put("RBRACE", new SymbolState(52));
        state140.put("ID", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state44.put("TRANSIENT", new SymbolState(FIELDDECL,  5));
        state7.put("TRUE", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state43 = new HashMap<String, SymbolState>();
        rules.put(43, state43);
        state43.put("COMMA", new SymbolState(EXPRESSION,  1));
        state7.put("LBRACE", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state124 = new HashMap<String, SymbolState>();
        rules.put(124, state124);
        state124.put("COMMA", new SymbolState(53));
        state178.put("FINAL", new SymbolState(STATEMENT,  3));
        state135.put("FALSE", new SymbolState(STATEMENT,  3));
        state176.put("SYNCHRONIZED", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state129.put("LITERAL", new SymbolState(43));
        state69.put("RETURN", new SymbolState(STATEMENT,  1));
        state82.put("VOID", new SymbolState(N_MODIFIER_0,  0));
        state60.put("FLOAT", new SymbolState(METHODDECL,  2));
        state150.put("SHORT", new SymbolState(42));
        state197.put("SYNCHRONIZED", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state69.put("DO", new SymbolState(STATEMENT,  1));
        Map<String, SymbolState> state52 = new HashMap<String, SymbolState>();
        rules.put(52, state52);
        state52.put("NATIVE", new SymbolState(INTERFACEBODY,  3));
        state128.put("ABSTRACT", new SymbolState(IMPORTDECLARATION,  6));
        state177.put("FOR", new SymbolState(54));
        state131.put("VOID", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state171 = new HashMap<String, SymbolState>();
        rules.put(171, state171);
        state171.put("VOLATILE", new SymbolState(N_TYPEDECLARATION_0,  0));
        Map<String, SymbolState> state78 = new HashMap<String, SymbolState>();
        rules.put(78, state78);
        state78.put("CHAR_LITERAL", new SymbolState(28));
        state170.put("N_MODIFIER_0", new SymbolState(55));
        state170.put("CHAR", new SymbolState(N_MODIFIER_0,  0));
        state12.put("COMMA", new SymbolState(INTEGERLITERAL,  1));
        state76.put("CHAR_LITERAL", new SymbolState(BLOCK,  3));
        state121.put("RBRACE", new SymbolState(METHODDECL,  4));
        Map<String, SymbolState> state77 = new HashMap<String, SymbolState>();
        rules.put(77, state77);
        state77.put("COMMA", new SymbolState(FORMALPARAMETER,  2));
        state115.put("VOLATILE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state200.put("TRANSIENT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        Map<String, SymbolState> state59 = new HashMap<String, SymbolState>();
        rules.put(59, state59);
        state59.put("FINAL", new SymbolState(METHODDECL,  4));
        state37.put("FORINIT", new SymbolState(56));
        state131.put("ABSTRACT", new SymbolState(MEMBERDECL,  1));
        state185.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        Map<String, SymbolState> state217 = new HashMap<String, SymbolState>();
        rules.put(217, state217);
        state217.put("STRICTFP", new SymbolState(MEMBERDECL,  1));
        state129.put("LOCALVARIABLEDECLARATIONSTATEMENT", new SymbolState(57));
        state129.put("FALSE", new SymbolState(58));
        state7.put("WHILE", new SymbolState(LITERAL,  1));
        state121.put("PUBLIC", new SymbolState(METHODDECL,  4));
        state180.put("SEMI", new SymbolState(INTERFACEMEMBERDECL,  1));
        state185.put("LITERAL", new SymbolState(43));
        state40.put("CHAR", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state17.put("DOUBLE", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state108 = new HashMap<String, SymbolState>();
        rules.put(108, state108);
        state108.put("METHODBODY", new SymbolState(59));
        state199.put("PRIVATE", new SymbolState(FORMALPARAMETERS,  4));
        state12.put("RBRACE", new SymbolState(INTEGERLITERAL,  1));
        state226.put("TYPE", new SymbolState(1));
        state51.put("CONSTRUCTORDECLARATORREST", new SymbolState(60));
        state129.put("BASICTYPE", new SymbolState(61));
        Map<String, SymbolState> state173 = new HashMap<String, SymbolState>();
        rules.put(173, state173);
        state173.put("STRICTFP", new SymbolState(TYPEDECLARATION,  2));
        state90.put("DOUBLE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state50.put("PROTECTED", new SymbolState(METHODBODY,  1));
        state22.put("STR_LITERAL", new SymbolState(24));
        state181.put("BOOLEAN", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state71 = new HashMap<String, SymbolState>();
        rules.put(71, state71);
        state71.put("FORMALPARAMETERS", new SymbolState(62));
        state178.put("FOR", new SymbolState(STATEMENT,  3));
        state197.put("STRICTFP", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state227.put("PROTECTED", new SymbolState(CLASSBODY,  3));
        state172.put("STATEMENTEXPRESSION", new SymbolState(63));
        state94.put("TRANSIENT", new SymbolState(64));
        state57.put("LONG", new SymbolState(BLOCKSTATEMENT,  1));
        state129.put("BOOLEAN", new SymbolState(65));
        state15.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state1 = new HashMap<String, SymbolState>();
        rules.put(1, state1);
        state1.put("N_COMMA_TYPE_0", new SymbolState(66));
        state78.put("TRUE", new SymbolState(46));
        state227.put("SEMI", new SymbolState(CLASSBODY,  3));
        state196.put("EXTENDS", new SymbolState(67));
        state10.put("INT", new SymbolState(N_MODIFIER_0,  2));
        state203.put("SYNCHRONIZED", new SymbolState(METHODDECL,  2));
        Map<String, SymbolState> state141 = new HashMap<String, SymbolState>();
        rules.put(141, state141);
        state141.put("COMMA", new SymbolState(BRACKETSOPT,  0));
        state59.put("SEMI", new SymbolState(METHODDECL,  4));
        state64.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state121.put("VOID", new SymbolState(METHODDECL,  4));
        state39.put("ID", new SymbolState(STATEMENT,  2));
        state42.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state142.put("BOOLEAN", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state73.put("SEMI", new SymbolState(CLASSDECLARATION,  5));
        state49.put("RBRACE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state107.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state203.put("FINAL", new SymbolState(METHODDECL,  2));
        state200.put("STRICTFP", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state30.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state216.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state223.put("SEMI", new SymbolState(STATEMENT,  5));
        state71.put("LPAREN", new SymbolState(68));
        state181.put("VOID", new SymbolState(METHODBODY,  1));
        state143.put("STATEMENTEXPRESSION", new SymbolState(69));
        state68.put("FINAL", new SymbolState(70));
        state58.put("STR_LITERAL", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state118 = new HashMap<String, SymbolState>();
        rules.put(118, state118);
        state118.put("ID", new SymbolState(13));
        state153.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        state14.put("FLOAT", new SymbolState(MODIFIER,  1));
        state176.put("ID", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state22.put("BOOLEANLITERAL", new SymbolState(7));
        state22.put("TRUE", new SymbolState(46));
        Map<String, SymbolState> state213 = new HashMap<String, SymbolState>();
        rules.put(213, state213);
        state213.put("RPAREN", new SymbolState(VARIABLEDECLARATORID,  2));
        state199.put("SEMI", new SymbolState(FORMALPARAMETERS,  4));
        state112.put("INT", new SymbolState(MODIFIER,  1));
        state208.put("STATIC", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        Map<String, SymbolState> state81 = new HashMap<String, SymbolState>();
        rules.put(81, state81);
        state81.put("ID", new SymbolState(71));
        state76.put("FINAL", new SymbolState(BLOCK,  3));
        Map<String, SymbolState> state5 = new HashMap<String, SymbolState>();
        rules.put(5, state5);
        state5.put("ID", new SymbolState(BASICTYPE,  1));
        state0.put("NATIVE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state101.put("STATEMENTEXPRESSION", new SymbolState(69));
        state177.put("EXPRESSION", new SymbolState(34));
        state43.put("FOR", new SymbolState(EXPRESSION,  1));
        state90.put("VOID", new SymbolState(INTERFACEBODYDECLARATION,  1));
        Map<String, SymbolState> state133 = new HashMap<String, SymbolState>();
        rules.put(133, state133);
        state133.put("TYPE", new SymbolState(72));
        state48.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state91.put("FINAL", new SymbolState(N_TYPEDECLARATION_0,  2));
        state10.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  2));
        state208.put("DOUBLE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state12.put("RPAREN", new SymbolState(INTEGERLITERAL,  1));
        state15.put("ID", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state160 = new HashMap<String, SymbolState>();
        rules.put(160, state160);
        state160.put("CLASSBODY", new SymbolState(73));
        state7.put("RPAREN", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state162 = new HashMap<String, SymbolState>();
        rules.put(162, state162);
        state162.put("STAR", new SymbolState(74));
        state199.put("LBRACE", new SymbolState(FORMALPARAMETERS,  4));
        Map<String, SymbolState> state191 = new HashMap<String, SymbolState>();
        rules.put(191, state191);
        state191.put("LBRACE", new SymbolState(TYPE,  3));
        state128.put("SYNCHRONIZED", new SymbolState(IMPORTDECLARATION,  6));
        Map<String, SymbolState> state19 = new HashMap<String, SymbolState>();
        rules.put(19, state19);
        state19.put("CLASS", new SymbolState(MODIFIER,  1));
        state37.put("STATEMENTEXPRESSION", new SymbolState(75));
        state153.put("LONG", new SymbolState(MEMBERDECL,  1));
        state176.put("CHAR", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state116.put("BOOLEAN", new SymbolState(INTERFACEMEMBERDECL,  3));
        Map<String, SymbolState> state8 = new HashMap<String, SymbolState>();
        rules.put(8, state8);
        state8.put("RBRACE", new SymbolState(STATEMENT,  8));
        Map<String, SymbolState> state167 = new HashMap<String, SymbolState>();
        rules.put(167, state167);
        state167.put("SEMI", new SymbolState(N_COMMA_CONSTANTDECLARATOR_0,  3));
        state24.put("COMMA", new SymbolState(LITERAL,  1));
        state19.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state112.put("VOID", new SymbolState(MODIFIER,  1));
        state46.put("LBRACE", new SymbolState(BOOLEANLITERAL,  1));
        state216.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state228 = new HashMap<String, SymbolState>();
        rules.put(228, state228);
        state228.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  3));
        Map<String, SymbolState> state186 = new HashMap<String, SymbolState>();
        rules.put(186, state186);
        state186.put("RBRACE", new SymbolState(76));
        state228.put("NATIVE", new SymbolState(CLASSDECLARATION,  3));
        state39.put("FOR", new SymbolState(STATEMENT,  2));
        state153.put("CHAR", new SymbolState(MEMBERDECL,  1));
        state39.put("NULL", new SymbolState(STATEMENT,  2));
        Map<String, SymbolState> state47 = new HashMap<String, SymbolState>();
        rules.put(47, state47);
        state47.put("PUBLIC", new SymbolState(INTERFACEDECLARATION,  5));
        state173.put("FINAL", new SymbolState(TYPEDECLARATION,  2));
        state180.put("SYNCHRONIZED", new SymbolState(INTERFACEMEMBERDECL,  1));
        state24.put("RPAREN", new SymbolState(LITERAL,  1));
        state46.put("INT", new SymbolState(BOOLEANLITERAL,  1));
        state101.put("FOR", new SymbolState(54));
        state117.put("ABSTRACT", new SymbolState(CLASSBODYDECLARATION,  2));
        state62.put("LBRACE", new SymbolState(METHODDECLARATORREST,  2));
        state90.put("INT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state180.put("VOID", new SymbolState(INTERFACEMEMBERDECL,  1));
        state104.put("SEMI", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state65 = new HashMap<String, SymbolState>();
        rules.put(65, state65);
        state65.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state67.put("BYTE", new SymbolState(2));
        state10.put("VOLATILE", new SymbolState(N_MODIFIER_0,  2));
        state39.put("WHILE", new SymbolState(STATEMENT,  2));
        state173.put("SEMI", new SymbolState(TYPEDECLARATION,  2));
        state217.put("SEMI", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state123 = new HashMap<String, SymbolState>();
        rules.put(123, state123);
        state123.put("VARIABLEDECLARATORID", new SymbolState(77));
        state91.put("NATIVE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state0.put("STATIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state55.put("PRIVATE", new SymbolState(14));
        state8.put("LBRACE", new SymbolState(STATEMENT,  8));
        state129.put("SEMI", new SymbolState(45));
        state17.put("BOOLEAN", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state38 = new HashMap<String, SymbolState>();
        rules.put(38, state38);
        state38.put("SEMI", new SymbolState(78));
        state100.put("STATIC", new SymbolState(MODIFIER,  1));
        state184.put("CHAR_LITERAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state199.put("DOUBLE", new SymbolState(FORMALPARAMETERS,  4));
        state170.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state45.put("FLOAT", new SymbolState(STATEMENT,  1));
        state115.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state187 = new HashMap<String, SymbolState>();
        rules.put(187, state187);
        state187.put("BRACKETSOPT", new SymbolState(79));
        state28.put("FINAL", new SymbolState(LITERAL,  1));
        state138.put("BYTE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state10.put("VOID", new SymbolState(N_MODIFIER_0,  2));
        state133.put("FLOAT", new SymbolState(15));
        state55.put("VOLATILE", new SymbolState(80));
        state129.put("STR_LITERAL", new SymbolState(24));
        state209.put("BOOLEAN", new SymbolState(BLOCKSTATEMENT,  1));
        state178.put("CHAR_LITERAL", new SymbolState(STATEMENT,  3));
        state20.put("BRACKETSOPT", new SymbolState(81));
        state0.put("FINAL", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state76.put("SHORT", new SymbolState(BLOCK,  3));
        state29.put("NATIVE", new SymbolState(TYPEDECLARATION,  1));
        state208.put("SYNCHRONIZED", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state34.put("RBRACE", new SymbolState(STATEMENTEXPRESSION,  1));
        state68.put("BASICTYPE", new SymbolState(61));
        state59.put("STATIC", new SymbolState(METHODDECL,  4));
        Map<String, SymbolState> state192 = new HashMap<String, SymbolState>();
        rules.put(192, state192);
        state192.put("BECOMES", new SymbolState(BRACKETSOPT,  0));
        state36.put("INTERFACE", new SymbolState(CLASSDECLARATION,  7));
        state16.put("INT", new SymbolState(LITERAL,  1));
        state33.put("N_CLASSBODYDECLARATION_0", new SymbolState(82));
        state50.put("SEMI", new SymbolState(METHODBODY,  1));
        state147.put("MORESTATEMENTEXPRESSIONS", new SymbolState(83));
        Map<String, SymbolState> state41 = new HashMap<String, SymbolState>();
        rules.put(41, state41);
        state41.put("FINAL", new SymbolState(N_TYPEDECLARATION_0,  0));
        state8.put("STR_LITERAL", new SymbolState(STATEMENT,  8));
        state13.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  0));
        state82.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state116.put("VOLATILE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state80.put("STATIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state21 = new HashMap<String, SymbolState>();
        rules.put(21, state21);
        state21.put("IMPLEMENTS", new SymbolState(84));
        Map<String, SymbolState> state2 = new HashMap<String, SymbolState>();
        rules.put(2, state2);
        state2.put("COMMA", new SymbolState(BASICTYPE,  1));
        state35.put("LPAREN", new SymbolState(85));
        state70.put("BOOLEAN", new SymbolState(65));
        state64.put("ID", new SymbolState(MODIFIER,  1));
        state140.put("SEMI", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state103.put("CHAR", new SymbolState(5));
        state70.put("DOUBLE", new SymbolState(6));
        state226.put("SHORT", new SymbolState(42));
        state116.put("STRICTFP", new SymbolState(INTERFACEMEMBERDECL,  3));
        state34.put("INT", new SymbolState(STATEMENTEXPRESSION,  1));
        state44.put("BYTE", new SymbolState(FIELDDECL,  5));
        state168.put("FLOAT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state84.put("BOOLEAN", new SymbolState(65));
        Map<String, SymbolState> state61 = new HashMap<String, SymbolState>();
        rules.put(61, state61);
        state61.put("IMPLEMENTS", new SymbolState(TYPE,  1));
        state223.put("DOUBLE", new SymbolState(STATEMENT,  5));
        state104.put("DOUBLE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state96 = new HashMap<String, SymbolState>();
        rules.put(96, state96);
        state96.put("FORMALPARAMETERS", new SymbolState(86));
        state51.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state131.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        state117.put("LONG", new SymbolState(CLASSBODYDECLARATION,  2));
        state55.put("MODIFIER", new SymbolState(10));
        state43.put("LONG", new SymbolState(EXPRESSION,  1));
        state57.put("FINAL", new SymbolState(BLOCKSTATEMENT,  1));
        state171.put("IMPORTDECLARATION", new SymbolState(87));
        state62.put("VOID", new SymbolState(METHODDECLARATORREST,  2));
        state104.put("INTERFACE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state159 = new HashMap<String, SymbolState>();
        rules.put(159, state159);
        state159.put("FORUPDATE", new SymbolState(88));
        state172.put("EXPRESSION", new SymbolState(34));
        state58.put("RBRACE", new SymbolState(BOOLEANLITERAL,  1));
        state85.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        Map<String, SymbolState> state145 = new HashMap<String, SymbolState>();
        rules.put(145, state145);
        state145.put("TRUE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state34.put("STR_LITERAL", new SymbolState(STATEMENTEXPRESSION,  1));
        state60.put("PRIVATE", new SymbolState(METHODDECL,  2));
        Map<String, SymbolState> state174 = new HashMap<String, SymbolState>();
        rules.put(174, state174);
        state174.put("LBRACE", new SymbolState(49));
        state140.put("FINAL", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state28.put("COMMA", new SymbolState(LITERAL,  1));
        state170.put("INTERFACEBODYDECLARATION", new SymbolState(89));
        state226.put("BYTE", new SymbolState(2));
        state62.put("FINAL", new SymbolState(METHODDECLARATORREST,  2));
        state76.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BLOCK,  3));
        state71.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  0));
        state52.put("CLASS", new SymbolState(INTERFACEBODY,  3));
        state121.put("INT", new SymbolState(METHODDECL,  4));
        state94.put("FINAL", new SymbolState(19));
        state143.put("LITERAL", new SymbolState(43));
        state145.put("FOR", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state166.put("TRANSIENT", new SymbolState(FIELDDECL,  5));
        state121.put("BYTE", new SymbolState(METHODDECL,  4));
        state70.put("FLOAT", new SymbolState(15));
        state91.put("TRANSIENT", new SymbolState(N_TYPEDECLARATION_0,  2));
        state87.put("PROTECTED", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state27.put("LONG", new SymbolState(STATEMENT,  1));
        state29.put("PRIVATE", new SymbolState(TYPEDECLARATION,  1));
        state138.put("DECIMAL_INTEGER_LITERAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state178.put("STR_LITERAL", new SymbolState(STATEMENT,  3));
        state37.put("EXPRESSION", new SymbolState(34));
        state82.put("BOOLEAN", new SymbolState(N_MODIFIER_0,  0));
        state45.put("BOOLEAN", new SymbolState(STATEMENT,  1));
        state17.put("SHORT", new SymbolState(LITERAL,  1));
        state170.put("SEMI", new SymbolState(90));
        state24.put("CHAR_LITERAL", new SymbolState(LITERAL,  1));
        state10.put("BOOLEAN", new SymbolState(N_MODIFIER_0,  2));
        state89.put("VOLATILE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state41.put("STATIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state104.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state112.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state100.put("FLOAT", new SymbolState(MODIFIER,  1));
        state34.put("RETURN", new SymbolState(STATEMENTEXPRESSION,  1));
        state200.put("SYNCHRONIZED", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state67.put("LONG", new SymbolState(11));
        state59.put("PUBLIC", new SymbolState(METHODDECL,  4));
        state14.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state84.put("ID", new SymbolState(31));
        state24.put("FALSE", new SymbolState(LITERAL,  1));
        state149.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  5));
        state197.put("SHORT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state64.put("FLOAT", new SymbolState(MODIFIER,  1));
        state184.put("RBRACE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state128.put("SEMI", new SymbolState(IMPORTDECLARATION,  6));
        state216.put("TYPEDECLARATION", new SymbolState(91));
        state135.put("SEMI", new SymbolState(STATEMENT,  3));
        state178.put("RBRACE", new SymbolState(STATEMENT,  3));
        state39.put("DOUBLE", new SymbolState(STATEMENT,  2));
        state32.put("NULL", new SymbolState(16));
        state40.put("SYNCHRONIZED", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state171.put("TRANSIENT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state1.put("LBRACE", new SymbolState(N_COMMA_TYPE_0,  0));
        state129.put("ID", new SymbolState(31));
        state51.put("LPAREN", new SymbolState(68));
        state184.put("BYTE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state168.put("LONG", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state115.put("ABSTRACT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state182 = new HashMap<String, SymbolState>();
        rules.put(182, state182);
        state182.put("N_DOT_ID_0", new SymbolState(92));
        state8.put("BOOLEAN", new SymbolState(STATEMENT,  8));
        state138.put("SHORT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state166.put("DOUBLE", new SymbolState(FIELDDECL,  5));
        state41.put("IMPORTDECLARATION", new SymbolState(87));
        state140.put("VOLATILE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state117.put("CHAR", new SymbolState(CLASSBODYDECLARATION,  2));
        state16.put("CHAR", new SymbolState(LITERAL,  1));
        state47.put("EOF", new SymbolState(INTERFACEDECLARATION,  5));
        state175.put("NATIVE", new SymbolState(48));
        state30.put("INT", new SymbolState(MODIFIER,  1));
        state0.put("COMPILATIONUNIT", new SymbolState(93));
        state153.put("NATIVE", new SymbolState(MEMBERDECL,  1));
        state228.put("VOLATILE", new SymbolState(CLASSDECLARATION,  3));
        state16.put("FALSE", new SymbolState(LITERAL,  1));
        state14.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state60.put("PUBLIC", new SymbolState(METHODDECL,  2));
        state183.put("PROTECTED", new SymbolState(INTERFACEDECLARATION,  3));
        state82.put("N_MODIFIER_0", new SymbolState(94));
        state223.put("BOOLEAN", new SymbolState(STATEMENT,  5));
        state145.put("CHAR_LITERAL", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state60.put("SEMI", new SymbolState(METHODDECL,  2));
        state10.put("ID", new SymbolState(N_MODIFIER_0,  2));
        state90.put("ABSTRACT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state215.put("SYNCHRONIZED", new SymbolState(IMPORTDECLARATION,  4));
        state209.put("DO", new SymbolState(BLOCKSTATEMENT,  1));
        state209.put("LONG", new SymbolState(BLOCKSTATEMENT,  1));
        state89.put("FLOAT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state49.put("FINAL", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state52.put("EOF", new SymbolState(INTERFACEBODY,  3));
        state116.put("RBRACE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state32.put("BOOLEANLITERAL", new SymbolState(7));
        state207.put("ID", new SymbolState(31));
        state159.put("CHAR_LITERAL", new SymbolState(28));
        state16.put("WHILE", new SymbolState(LITERAL,  1));
        state44.put("ID", new SymbolState(FIELDDECL,  5));
        state80.put("VOID", new SymbolState(MODIFIER,  1));
        state117.put("PUBLIC", new SymbolState(CLASSBODYDECLARATION,  2));
        state82.put("DOUBLE", new SymbolState(N_MODIFIER_0,  0));
        state42.put("ID", new SymbolState(BASICTYPE,  1));
        state19.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state116.put("SHORT", new SymbolState(INTERFACEMEMBERDECL,  3));
        state36.put("SEMI", new SymbolState(CLASSDECLARATION,  7));
        state215.put("STRICTFP", new SymbolState(IMPORTDECLARATION,  4));
        state87.put("SYNCHRONIZED", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state57.put("BYTE", new SymbolState(BLOCKSTATEMENT,  1));
        state2.put("ID", new SymbolState(BASICTYPE,  1));
        state49.put("TRUE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state76.put("STR_LITERAL", new SymbolState(BLOCK,  3));
        state24.put("BYTE", new SymbolState(LITERAL,  1));
        state76.put("PUBLIC", new SymbolState(BLOCK,  3));
        state17.put("NULL", new SymbolState(LITERAL,  1));
        state219.put("BOOLEAN", new SymbolState(FORMALPARAMETERS,  2));
        state143.put("STATEMENT", new SymbolState(95));
        state95.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENT,  9));
        state209.put("FLOAT", new SymbolState(BLOCKSTATEMENT,  1));
        state153.put("SHORT", new SymbolState(MEMBERDECL,  1));
        state40.put("SEMI", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state50.put("PRIVATE", new SymbolState(METHODBODY,  1));
        state85.put("STR_LITERAL", new SymbolState(24));
        state34.put("WHILE", new SymbolState(STATEMENTEXPRESSION,  1));
        Map<String, SymbolState> state120 = new HashMap<String, SymbolState>();
        rules.put(120, state120);
        state120.put("ID", new SymbolState(96));
        state208.put("VOLATILE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        Map<String, SymbolState> state195 = new HashMap<String, SymbolState>();
        rules.put(195, state195);
        state195.put("CLASS", new SymbolState(TYPEDECLARATION,  2));
        state180.put("BOOLEAN", new SymbolState(INTERFACEMEMBERDECL,  1));
        state47.put("SEMI", new SymbolState(INTERFACEDECLARATION,  5));
        state135.put("WHILE", new SymbolState(STATEMENT,  3));
        state41.put("TRANSIENT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state121.put("DOUBLE", new SymbolState(METHODDECL,  4));
        state183.put("SYNCHRONIZED", new SymbolState(INTERFACEDECLARATION,  3));
        state112.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state109 = new HashMap<String, SymbolState>();
        rules.put(109, state109);
        state109.put("ID", new SymbolState(97));
        state30.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state219.put("ID", new SymbolState(FORMALPARAMETERS,  2));
        state223.put("FALSE", new SymbolState(STATEMENT,  5));
        Map<String, SymbolState> state204 = new HashMap<String, SymbolState>();
        rules.put(204, state204);
        state204.put("COMMA", new SymbolState(98));
        state166.put("VOID", new SymbolState(FIELDDECL,  5));
        state118.put("VARIABLEDECLARATORS", new SymbolState(99));
        state131.put("STRICTFP", new SymbolState(MEMBERDECL,  1));
        state44.put("VOID", new SymbolState(FIELDDECL,  5));
        state101.put("CHAR_LITERAL", new SymbolState(28));
        state181.put("SEMI", new SymbolState(METHODBODY,  1));
        state2.put("LBRACE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state110 = new HashMap<String, SymbolState>();
        rules.put(110, state110);
        state110.put("COMMA", new SymbolState(FORMALPARAMETER,  3));
        state223.put("LONG", new SymbolState(STATEMENT,  5));
        state197.put("NATIVE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state27.put("STR_LITERAL", new SymbolState(STATEMENT,  1));
        state29.put("PUBLIC", new SymbolState(TYPEDECLARATION,  1));
        state45.put("FALSE", new SymbolState(STATEMENT,  1));
        state64.put("BYTE", new SymbolState(MODIFIER,  1));
        state47.put("INTERFACE", new SymbolState(INTERFACEDECLARATION,  5));
        state199.put("PROTECTED", new SymbolState(FORMALPARAMETERS,  4));
        state0.put("ABSTRACT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state55.put("PROTECTED", new SymbolState(100));
        state129.put("DO", new SymbolState(101));
        state116.put("FINAL", new SymbolState(INTERFACEMEMBERDECL,  3));
        state131.put("CHAR", new SymbolState(MEMBERDECL,  1));
        state36.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  7));
        Map<String, SymbolState> state198 = new HashMap<String, SymbolState>();
        rules.put(198, state198);
        state198.put("ID", new SymbolState(13));
        state67.put("SHORT", new SymbolState(42));
        state216.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state106.put("IMPLEMENTS", new SymbolState(BRACKETSOPT,  2));
        state29.put("PROTECTED", new SymbolState(TYPEDECLARATION,  1));
        state183.put("VOLATILE", new SymbolState(INTERFACEDECLARATION,  3));
        state95.put("BYTE", new SymbolState(STATEMENT,  9));
        state78.put("EXPRESSION", new SymbolState(34));
        state148.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state19.put("CHAR", new SymbolState(MODIFIER,  1));
        state47.put("FINAL", new SymbolState(INTERFACEDECLARATION,  5));
        state17.put("CHAR_LITERAL", new SymbolState(LITERAL,  1));
        state159.put("EXPRESSION", new SymbolState(34));
        state39.put("RETURN", new SymbolState(STATEMENT,  2));
        state82.put("CLASSBODYDECLARATION", new SymbolState(102));
        state69.put("FINAL", new SymbolState(STATEMENT,  1));
        state117.put("BYTE", new SymbolState(CLASSBODYDECLARATION,  2));
        state145.put("STR_LITERAL", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state97.put("LBRACKET", new SymbolState(N_DOT_ID_0,  3));
        state14.put("CLASS", new SymbolState(MODIFIER,  1));
        state73.put("PROTECTED", new SymbolState(CLASSDECLARATION,  5));
        state102.put("TRANSIENT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        Map<String, SymbolState> state66 = new HashMap<String, SymbolState>();
        rules.put(66, state66);
        state66.put("COMMA", new SymbolState(103));
        state62.put("CHAR", new SymbolState(METHODDECLARATORREST,  2));
        state102.put("FLOAT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state82.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state112.put("ID", new SymbolState(MODIFIER,  1));
        state27.put("NULL", new SymbolState(STATEMENT,  1));
        state59.put("SYNCHRONIZED", new SymbolState(METHODDECL,  4));
        state98.put("FLOAT", new SymbolState(15));
        Map<String, SymbolState> state132 = new HashMap<String, SymbolState>();
        rules.put(132, state132);
        state132.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state209.put("ID", new SymbolState(BLOCKSTATEMENT,  1));
        state30.put("FINAL", new SymbolState(MODIFIER,  1));
        state104.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state148.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state175.put("ABSTRACT", new SymbolState(104));
        state145.put("DOUBLE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state101.put("DO", new SymbolState(101));
        state203.put("FLOAT", new SymbolState(METHODDECL,  2));
        state173.put("INTERFACE", new SymbolState(TYPEDECLARATION,  2));
        state195.put("STATIC", new SymbolState(TYPEDECLARATION,  2));
        state91.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state199.put("BYTE", new SymbolState(FORMALPARAMETERS,  4));
        state58.put("CHAR_LITERAL", new SymbolState(BOOLEANLITERAL,  1));
        state219.put("LBRACE", new SymbolState(FORMALPARAMETERS,  2));
        state149.put("CLASS", new SymbolState(CLASSDECLARATION,  5));
        state112.put("NATIVE", new SymbolState(MODIFIER,  1));
        state0.put("PUBLIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state31.put("N_DOT_ID_0", new SymbolState(105));
        state175.put("STATIC", new SymbolState(30));
        Map<String, SymbolState> state25 = new HashMap<String, SymbolState>();
        rules.put(25, state25);
        state25.put("RBRACKET", new SymbolState(106));
        state176.put("PRIVATE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state29.put("ABSTRACT", new SymbolState(TYPEDECLARATION,  1));
        state153.put("TRANSIENT", new SymbolState(MEMBERDECL,  1));
        state175.put("FINAL", new SymbolState(19));
        state14.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state82.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        state94.put("STRICTFP", new SymbolState(107));
        state81.put("METHODDECLARATORREST", new SymbolState(108));
        state41.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  0));
        state113.put("LBRACE", new SymbolState(40));
        state175.put("PRIVATE", new SymbolState(14));
        Map<String, SymbolState> state92 = new HashMap<String, SymbolState>();
        rules.put(92, state92);
        state92.put("DOT", new SymbolState(109));
        state59.put("STRICTFP", new SymbolState(METHODDECL,  4));
        state50.put("NATIVE", new SymbolState(METHODBODY,  1));
        state227.put("PUBLIC", new SymbolState(CLASSBODY,  3));
        state48.put("LONG", new SymbolState(MODIFIER,  1));
        state112.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state90.put("STATIC", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state192.put("BRACKETSOPT", new SymbolState(26));
        state68.put("DOUBLE", new SymbolState(6));
        state145.put("FALSE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state59.put("PRIVATE", new SymbolState(METHODDECL,  4));
        Map<String, SymbolState> state111 = new HashMap<String, SymbolState>();
        rules.put(111, state111);
        state111.put("SEMI", new SymbolState(N_COMMA_VARIABLEDECLARATOR_0,  0));
        state128.put("TRANSIENT", new SymbolState(IMPORTDECLARATION,  6));
        state112.put("BYTE", new SymbolState(MODIFIER,  1));
        state101.put("SEMI", new SymbolState(45));
        state47.put("PRIVATE", new SymbolState(INTERFACEDECLARATION,  5));
        Map<String, SymbolState> state105 = new HashMap<String, SymbolState>();
        rules.put(105, state105);
        state105.put("COMMA", new SymbolState(BRACKETSOPT,  0));
        Map<String, SymbolState> state189 = new HashMap<String, SymbolState>();
        rules.put(189, state189);
        state189.put("VARIABLEDECLARATORID", new SymbolState(110));
        state200.put("VOLATILE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state219.put("SYNCHRONIZED", new SymbolState(FORMALPARAMETERS,  2));
        state131.put("FINAL", new SymbolState(MEMBERDECL,  1));
        state138.put("WHILE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state107.put("LONG", new SymbolState(MODIFIER,  1));
        state143.put("DO", new SymbolState(101));
        state140.put("PRIVATE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state198.put("VARIABLEDECLARATOR", new SymbolState(111));
        state104.put("CHAR", new SymbolState(MODIFIER,  1));
        state176.put("TRANSIENT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state142.put("INT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state197.put("LONG", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state203.put("STRICTFP", new SymbolState(METHODDECL,  2));
        state131.put("PRIVATE", new SymbolState(MEMBERDECL,  1));
        state47.put("CLASS", new SymbolState(INTERFACEDECLARATION,  5));
        state8.put("TRUE", new SymbolState(STATEMENT,  8));
        state49.put("FOR", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state40.put("BYTE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state34.put("SEMI", new SymbolState(STATEMENTEXPRESSION,  1));
        state44.put("NATIVE", new SymbolState(FIELDDECL,  5));
        state107.put("FLOAT", new SymbolState(MODIFIER,  1));
        state80.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state89.put("STRICTFP", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state199.put("RBRACE", new SymbolState(FORMALPARAMETERS,  4));
        state175.put("PUBLIC", new SymbolState(112));
        state208.put("VOID", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state208.put("RBRACE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state223.put("STR_LITERAL", new SymbolState(STATEMENT,  5));
        state117.put("SEMI", new SymbolState(CLASSBODYDECLARATION,  2));
        state142.put("SEMI", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state103.put("BOOLEAN", new SymbolState(65));
        state145.put("FLOAT", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state228.put("STATIC", new SymbolState(CLASSDECLARATION,  3));
        state191.put("COMMA", new SymbolState(TYPE,  3));
        state57.put("BOOLEAN", new SymbolState(BLOCKSTATEMENT,  1));
        state100.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state19.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state106.put("RPAREN", new SymbolState(BRACKETSOPT,  2));
        state27.put("FOR", new SymbolState(STATEMENT,  1));
        state37.put("ID", new SymbolState(31));
        state128.put("IMPORT", new SymbolState(IMPORTDECLARATION,  6));
        state226.put("TYPELIST", new SymbolState(113));
        state58.put("SEMI", new SymbolState(BOOLEANLITERAL,  1));
        state176.put("SEMI", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state107.put("SHORT", new SymbolState(MODIFIER,  1));
        state197.put("PROTECTED", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state10.put("PRIVATE", new SymbolState(N_MODIFIER_0,  2));
        state177.put("FALSE", new SymbolState(58));
        state32.put("FOR", new SymbolState(54));
        state76.put("FOR", new SymbolState(BLOCK,  3));
        state67.put("CHAR", new SymbolState(5));
        Map<String, SymbolState> state11 = new HashMap<String, SymbolState>();
        rules.put(11, state11);
        state11.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state41.put("IMPORT", new SymbolState(114));
        state80.put("INT", new SymbolState(MODIFIER,  1));
        state107.put("CHAR", new SymbolState(MODIFIER,  1));
        state60.put("PROTECTED", new SymbolState(METHODDECL,  2));
        state142.put("ID", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state80.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state32.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state87.put("TRANSIENT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state172.put("BOOLEANLITERAL", new SymbolState(7));
        state70.put("SHORT", new SymbolState(42));
        state228.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  3));
        state12.put("DECIMAL_INTEGER_LITERAL", new SymbolState(INTEGERLITERAL,  1));
        state60.put("NATIVE", new SymbolState(METHODDECL,  2));
        state52.put("VOLATILE", new SymbolState(INTERFACEBODY,  3));
        state48.put("FINAL", new SymbolState(MODIFIER,  1));
        state153.put("PUBLIC", new SymbolState(MEMBERDECL,  1));
        state36.put("PUBLIC", new SymbolState(CLASSDECLARATION,  7));
        state28.put("FOR", new SymbolState(LITERAL,  1));
        state116.put("CHAR", new SymbolState(INTERFACEMEMBERDECL,  3));
        state95.put("SHORT", new SymbolState(STATEMENT,  9));
        state195.put("SYNCHRONIZED", new SymbolState(TYPEDECLARATION,  2));
        state116.put("STATIC", new SymbolState(INTERFACEMEMBERDECL,  3));
        state200.put("INT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state102.put("NATIVE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state80.put("ID", new SymbolState(MODIFIER,  1));
        state28.put("LONG", new SymbolState(LITERAL,  1));
        state225.put("BECOMES", new SymbolState(BRACKETSOPT,  0));
        state107.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state29.put("EOF", new SymbolState(TYPEDECLARATION,  1));
        state43.put("FALSE", new SymbolState(EXPRESSION,  1));
        state117.put("BOOLEAN", new SymbolState(CLASSBODYDECLARATION,  2));
        state19.put("SHORT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state163 = new HashMap<String, SymbolState>();
        rules.put(163, state163);
        state163.put("SEMI", new SymbolState(115));
        state27.put("CHAR_LITERAL", new SymbolState(STATEMENT,  1));
        state150.put("BOOLEAN", new SymbolState(65));
        state94.put("PUBLIC", new SymbolState(112));
        state30.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state98.put("ID", new SymbolState(31));
        state111.put("COMMA", new SymbolState(N_COMMA_VARIABLEDECLARATOR_0,  0));
        state24.put("FOR", new SymbolState(LITERAL,  1));
        state15.put("COMMA", new SymbolState(BASICTYPE,  1));
        state68.put("BOOLEAN", new SymbolState(65));
        state200.put("FLOAT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state8.put("SHORT", new SymbolState(STATEMENT,  8));
        state180.put("ID", new SymbolState(INTERFACEMEMBERDECL,  1));
        state215.put("FINAL", new SymbolState(IMPORTDECLARATION,  4));
        state203.put("NATIVE", new SymbolState(METHODDECL,  2));
        state195.put("PUBLIC", new SymbolState(TYPEDECLARATION,  2));
        state10.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  2));
        state37.put("BASICTYPE", new SymbolState(61));
        state176.put("DOUBLE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state96.put("VOIDINTERFACEMETHODDECLARATORREST", new SymbolState(116));
        state39.put("LBRACE", new SymbolState(STATEMENT,  2));
        state19.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state217.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        state64.put("CHAR", new SymbolState(MODIFIER,  1));
        state57.put("INT", new SymbolState(BLOCKSTATEMENT,  1));
        state94.put("MEMBERDECL", new SymbolState(117));
        state57.put("SHORT", new SymbolState(BLOCKSTATEMENT,  1));
        state195.put("NATIVE", new SymbolState(TYPEDECLARATION,  2));
        state34.put("LONG", new SymbolState(STATEMENTEXPRESSION,  1));
        state87.put("VOLATILE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state129.put("TYPE", new SymbolState(118));
        state30.put("VOID", new SymbolState(MODIFIER,  1));
        state80.put("NATIVE", new SymbolState(MODIFIER,  1));
        state98.put("FORMALPARAMETER", new SymbolState(119));
        state107.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state8.put("DOUBLE", new SymbolState(STATEMENT,  8));
        state60.put("TRANSIENT", new SymbolState(METHODDECL,  2));
        state203.put("STATIC", new SymbolState(METHODDECL,  2));
        state100.put("LONG", new SymbolState(MODIFIER,  1));
        state121.put("CHAR", new SymbolState(METHODDECL,  4));
        state138.put("DOUBLE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state90.put("FINAL", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state197.put("VOID", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state50.put("INT", new SymbolState(METHODBODY,  1));
        state208.put("PRIVATE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state135.put("FOR", new SymbolState(STATEMENT,  3));
        state226.put("CHAR", new SymbolState(5));
        state55.put("VOID", new SymbolState(120));
        state7.put("LONG", new SymbolState(LITERAL,  1));
        state17.put("FINAL", new SymbolState(LITERAL,  1));
        state80.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state76.put("BYTE", new SymbolState(BLOCK,  3));
        state60.put("ID", new SymbolState(METHODDECL,  2));
        state205.put("FALSE", new SymbolState(PAREXPRESSION,  3));
        state165.put("METHODBODY", new SymbolState(121));
        state2.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state40.put("SHORT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state44.put("PROTECTED", new SymbolState(FIELDDECL,  5));
        state223.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENT,  5));
        state65.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state138.put("BOOLEAN", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state215.put("CLASS", new SymbolState(IMPORTDECLARATION,  4));
        state76.put("STATIC", new SymbolState(BLOCK,  3));
        state131.put("SEMI", new SymbolState(MEMBERDECL,  1));
        state80.put("SHORT", new SymbolState(MODIFIER,  1));
        state219.put("VOID", new SymbolState(FORMALPARAMETERS,  2));
        state49.put("LONG", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state16.put("SEMI", new SymbolState(LITERAL,  1));
        state149.put("PUBLIC", new SymbolState(CLASSDECLARATION,  5));
        state98.put("FINAL", new SymbolState(70));
        state203.put("DOUBLE", new SymbolState(METHODDECL,  2));
        state181.put("FLOAT", new SymbolState(METHODBODY,  1));
        state153.put("SEMI", new SymbolState(MEMBERDECL,  1));
        state182.put("SEMI", new SymbolState(N_DOT_ID_0,  0));
        state87.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state64.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state145.put("SEMI", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state148.put("SHORT", new SymbolState(MODIFIER,  1));
        state183.put("PUBLIC", new SymbolState(INTERFACEDECLARATION,  3));
        state69.put("WHILE", new SymbolState(STATEMENT,  1));
        state217.put("ID", new SymbolState(MEMBERDECL,  1));
        state94.put("BOOLEAN", new SymbolState(65));
        Map<String, SymbolState> state154 = new HashMap<String, SymbolState>();
        rules.put(154, state154);
        state154.put("ID", new SymbolState(122));
        state173.put("PROTECTED", new SymbolState(TYPEDECLARATION,  2));
        state116.put("PRIVATE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state173.put("ABSTRACT", new SymbolState(TYPEDECLARATION,  2));
        state80.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state30.put("PROTECTED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state214 = new HashMap<String, SymbolState>();
        rules.put(214, state214);
        state214.put("SEMI", new SymbolState(FORINIT,  2));
        state219.put("LBRACKET", new SymbolState(FORMALPARAMETERS,  2));
        state183.put("FINAL", new SymbolState(INTERFACEDECLARATION,  3));
        state30.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state138.put("FOR", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state7.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state39.put("STR_LITERAL", new SymbolState(STATEMENT,  2));
        state121.put("STRICTFP", new SymbolState(METHODDECL,  4));
        state117.put("TRANSIENT", new SymbolState(CLASSBODYDECLARATION,  2));
        state58.put("FOR", new SymbolState(BOOLEANLITERAL,  1));
        state84.put("BASICTYPE", new SymbolState(61));
        state148.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state8.put("LONG", new SymbolState(STATEMENT,  8));
        state228.put("FINAL", new SymbolState(CLASSDECLARATION,  3));
        state200.put("VOID", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state173.put("NATIVE", new SymbolState(TYPEDECLARATION,  2));
        state44.put("SHORT", new SymbolState(FIELDDECL,  5));
        state62.put("PRIVATE", new SymbolState(METHODDECLARATORREST,  2));
        state112.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state180.put("ABSTRACT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state199.put("LONG", new SymbolState(FORMALPARAMETERS,  4));
        state166.put("SHORT", new SymbolState(FIELDDECL,  5));
        state129.put("FOR", new SymbolState(54));
        state133.put("ID", new SymbolState(31));
        Map<String, SymbolState> state122 = new HashMap<String, SymbolState>();
        rules.put(122, state122);
        state122.put("LPAREN", new SymbolState(68));
        state102.put("ID", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state92.put("SEMI", new SymbolState(QUALIFIEDIDENTIFIER,  2));
        state152.put("NULL", new SymbolState(16));
        state151.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state217.put("NATIVE", new SymbolState(MEMBERDECL,  1));
        state105.put("LBRACKET", new SymbolState(25));
        state195.put("PROTECTED", new SymbolState(TYPEDECLARATION,  2));
        state85.put("LITERAL", new SymbolState(43));
        state33.put("SYNCHRONIZED", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state183.put("STRICTFP", new SymbolState(INTERFACEDECLARATION,  3));
        state57.put("RETURN", new SymbolState(BLOCKSTATEMENT,  1));
        state62.put("DOUBLE", new SymbolState(METHODDECLARATORREST,  2));
        state87.put("PRIVATE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state43.put("RETURN", new SymbolState(EXPRESSION,  1));
        state67.put("DOUBLE", new SymbolState(6));
        state203.put("PROTECTED", new SymbolState(METHODDECL,  2));
        state82.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state40.put("PROTECTED", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state29.put("INTERFACE", new SymbolState(TYPEDECLARATION,  1));
        state180.put("FINAL", new SymbolState(INTERFACEMEMBERDECL,  1));
        state76.put("NULL", new SymbolState(BLOCK,  3));
        state76.put("RETURN", new SymbolState(BLOCK,  3));
        state128.put("STATIC", new SymbolState(IMPORTDECLARATION,  6));
        state70.put("ID", new SymbolState(31));
        state217.put("SHORT", new SymbolState(MEMBERDECL,  1));
        state59.put("LONG", new SymbolState(METHODDECL,  4));
        state31.put("ID", new SymbolState(N_DOT_ID_0,  0));
        state24.put("LONG", new SymbolState(LITERAL,  1));
        state202.put("EOF", new SymbolState(COMPILATIONUNIT,  2));
        state208.put("INT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state32.put("LBRACE", new SymbolState(49));
        state98.put("TYPE", new SymbolState(123));
        state121.put("SEMI", new SymbolState(METHODDECL,  4));
        state49.put("FLOAT", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state191.put("ID", new SymbolState(TYPE,  3));
        state228.put("PUBLIC", new SymbolState(CLASSDECLARATION,  3));
        state111.put("N_COMMA_VARIABLEDECLARATOR_0", new SymbolState(124));
        state52.put("STATIC", new SymbolState(INTERFACEBODY,  3));
        state104.put("FLOAT", new SymbolState(MODIFIER,  1));
        state183.put("PRIVATE", new SymbolState(INTERFACEDECLARATION,  3));
        state31.put("LBRACKET", new SymbolState(N_DOT_ID_0,  0));
        state199.put("ID", new SymbolState(FORMALPARAMETERS,  4));
        state228.put("PRIVATE", new SymbolState(CLASSDECLARATION,  3));
        state45.put("LONG", new SymbolState(STATEMENT,  1));
        state205.put("NULL", new SymbolState(PAREXPRESSION,  3));
        state103.put("INT", new SymbolState(23));
        state55.put("TYPE", new SymbolState(125));
        state178.put("FALSE", new SymbolState(STATEMENT,  3));
        state76.put("CHAR", new SymbolState(BLOCK,  3));
        state187.put("LBRACKET", new SymbolState(25));
        state148.put("STATIC", new SymbolState(MODIFIER,  1));
        state170.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state168.put("INT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state184.put("FLOAT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        Map<String, SymbolState> state93 = new HashMap<String, SymbolState>();
        rules.put(93, state93);
        state93.put("EOF", new SymbolState(126));
        state203.put("SEMI", new SymbolState(METHODDECL,  2));
        state84.put("TYPELIST", new SymbolState(127));
        state60.put("STRICTFP", new SymbolState(METHODDECL,  2));
        state89.put("LONG", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state142.put("ABSTRACT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state168.put("SEMI", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state195.put("VOLATILE", new SymbolState(TYPEDECLARATION,  2));
        Map<String, SymbolState> state23 = new HashMap<String, SymbolState>();
        rules.put(23, state23);
        state23.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state181.put("BYTE", new SymbolState(METHODBODY,  1));
        state8.put("RETURN", new SymbolState(STATEMENT,  8));
        state170.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state209.put("WHILE", new SymbolState(BLOCKSTATEMENT,  1));
        state5.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state90.put("PRIVATE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state170.put("INT", new SymbolState(N_MODIFIER_0,  0));
        state142.put("RBRACE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state23.put("ID", new SymbolState(BASICTYPE,  1));
        state90.put("RBRACE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state76.put("LBRACE", new SymbolState(BLOCK,  3));
        state176.put("SHORT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state143.put("STR_LITERAL", new SymbolState(24));
        state46.put("BOOLEAN", new SymbolState(BOOLEANLITERAL,  1));
        state171.put("FINAL", new SymbolState(N_TYPEDECLARATION_0,  0));
        state36.put("STRICTFP", new SymbolState(CLASSDECLARATION,  7));
        state148.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state7.put("DECIMAL_INTEGER_LITERAL", new SymbolState(LITERAL,  1));
        state200.put("STATIC", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state176.put("STATIC", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state143.put("WHILE", new SymbolState(35));
        Map<String, SymbolState> state74 = new HashMap<String, SymbolState>();
        rules.put(74, state74);
        state74.put("SEMI", new SymbolState(128));
        state174.put("SEMI", new SymbolState(50));
        state129.put("SHORT", new SymbolState(42));
        state219.put("CHAR", new SymbolState(FORMALPARAMETERS,  2));
        state49.put("N_BLOCKSTATEMENT_0", new SymbolState(129));
        state14.put("INT", new SymbolState(MODIFIER,  1));
        state55.put("PUBLIC", new SymbolState(112));
        state57.put("TRUE", new SymbolState(BLOCKSTATEMENT,  1));
        Map<String, SymbolState> state75 = new HashMap<String, SymbolState>();
        rules.put(75, state75);
        state75.put("MORESTATEMENTEXPRESSIONS", new SymbolState(130));
        state45.put("SEMI", new SymbolState(STATEMENT,  1));
        state39.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENT,  2));
        state168.put("BOOLEAN", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state178.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENT,  3));
        state183.put("SEMI", new SymbolState(INTERFACEDECLARATION,  3));
        state185.put("TRUE", new SymbolState(46));
        state34.put("NULL", new SymbolState(STATEMENTEXPRESSION,  1));
        state58.put("FALSE", new SymbolState(BOOLEANLITERAL,  1));
        state14.put("LONG", new SymbolState(MODIFIER,  1));
        state176.put("ABSTRACT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state199.put("FINAL", new SymbolState(FORMALPARAMETERS,  4));
        state39.put("DO", new SymbolState(STATEMENT,  2));
        state16.put("SHORT", new SymbolState(LITERAL,  1));
        state94.put("SEMI", new SymbolState(131));
        state29.put("SEMI", new SymbolState(TYPEDECLARATION,  1));
        state49.put("NULL", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state104.put("SHORT", new SymbolState(MODIFIER,  1));
        state27.put("BYTE", new SymbolState(STATEMENT,  1));
        state177.put("CHAR_LITERAL", new SymbolState(28));
        state197.put("CHAR", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state44.put("FLOAT", new SymbolState(FIELDDECL,  5));
        state208.put("ABSTRACT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state184.put("FOR", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state149.put("NATIVE", new SymbolState(CLASSDECLARATION,  5));
        state91.put("SYNCHRONIZED", new SymbolState(N_TYPEDECLARATION_0,  2));
        state106.put("ID", new SymbolState(BRACKETSOPT,  2));
        Map<String, SymbolState> state114 = new HashMap<String, SymbolState>();
        rules.put(114, state114);
        state114.put("ID", new SymbolState(132));
        state76.put("TRUE", new SymbolState(BLOCK,  3));
        state46.put("SEMI", new SymbolState(BOOLEANLITERAL,  1));
        state7.put("FINAL", new SymbolState(LITERAL,  1));
        state19.put("BYTE", new SymbolState(MODIFIER,  1));
        state43.put("INT", new SymbolState(EXPRESSION,  1));
        state102.put("SEMI", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state197.put("BOOLEAN", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state62.put("STATIC", new SymbolState(METHODDECLARATORREST,  2));
        state149.put("FINAL", new SymbolState(CLASSDECLARATION,  5));
        state43.put("CHAR_LITERAL", new SymbolState(EXPRESSION,  1));
        state12.put("FALSE", new SymbolState(INTEGERLITERAL,  1));
        state215.put("VOLATILE", new SymbolState(IMPORTDECLARATION,  4));
        state216.put("EOF", new SymbolState(COMPILATIONUNIT,  5));
        state30.put("BYTE", new SymbolState(MODIFIER,  1));
        state46.put("FINAL", new SymbolState(BOOLEANLITERAL,  1));
        state223.put("NULL", new SymbolState(STATEMENT,  5));
        state61.put("ID", new SymbolState(TYPE,  1));
        state178.put("DOUBLE", new SymbolState(STATEMENT,  3));
        state121.put("BOOLEAN", new SymbolState(METHODDECL,  4));
        state47.put("ABSTRACT", new SymbolState(INTERFACEDECLARATION,  5));
        state32.put("LITERAL", new SymbolState(43));
        state225.put("LPAREN", new SymbolState(68));
        state209.put("BYTE", new SymbolState(BLOCKSTATEMENT,  1));
        state205.put("RETURN", new SymbolState(PAREXPRESSION,  3));
        state46.put("RETURN", new SymbolState(BOOLEANLITERAL,  1));
        state37.put("FINAL", new SymbolState(133));
        Map<String, SymbolState> state79 = new HashMap<String, SymbolState>();
        rules.put(79, state79);
        state79.put("ID", new SymbolState(134));
        state78.put("FALSE", new SymbolState(58));
        state59.put("BYTE", new SymbolState(METHODDECL,  4));
        state43.put("TRUE", new SymbolState(EXPRESSION,  1));
        state207.put("INT", new SymbolState(23));
        state197.put("ABSTRACT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state107.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state46.put("BYTE", new SymbolState(BOOLEANLITERAL,  1));
        state140.put("ABSTRACT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state33.put("BYTE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state82.put("SEMI", new SymbolState(N_MODIFIER_0,  0));
        state104.put("CLASS", new SymbolState(MODIFIER,  1));
        state7.put("DO", new SymbolState(LITERAL,  1));
        state40.put("VOLATILE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state69.put("LONG", new SymbolState(STATEMENT,  1));
        state87.put("FINAL", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state97.put("LBRACE", new SymbolState(N_DOT_ID_0,  3));
        Map<String, SymbolState> state146 = new HashMap<String, SymbolState>();
        rules.put(146, state146);
        state146.put("SEMI", new SymbolState(135));
        state44.put("ABSTRACT", new SymbolState(FIELDDECL,  5));
        Map<String, SymbolState> state134 = new HashMap<String, SymbolState>();
        rules.put(134, state134);
        state134.put("FORMALPARAMETERS", new SymbolState(62));
        state223.put("FINAL", new SymbolState(STATEMENT,  5));
        state184.put("ID", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state24.put("FINAL", new SymbolState(LITERAL,  1));
        state52.put("SEMI", new SymbolState(INTERFACEBODY,  3));
        state52.put("FINAL", new SymbolState(INTERFACEBODY,  3));
        state183.put("TRANSIENT", new SymbolState(INTERFACEDECLARATION,  3));
        state73.put("FINAL", new SymbolState(CLASSDECLARATION,  5));
        state185.put("CHAR_LITERAL", new SymbolState(28));
        state27.put("CHAR", new SymbolState(STATEMENT,  1));
        state76.put("ABSTRACT", new SymbolState(BLOCK,  3));
        state172.put("CHAR_LITERAL", new SymbolState(28));
        state55.put("INT", new SymbolState(23));
        state202.put("SEMI", new SymbolState(29));
        state107.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state208.put("PUBLIC", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state208.put("ID", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state171.put("STATIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state59.put("VOLATILE", new SymbolState(METHODDECL,  4));
        state217.put("VOLATILE", new SymbolState(MEMBERDECL,  1));
        state177.put("INTEGERLITERAL", new SymbolState(17));
        state108.put("LBRACE", new SymbolState(49));
        state149.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  5));
        state24.put("NULL", new SymbolState(LITERAL,  1));
        state116.put("INT", new SymbolState(INTERFACEMEMBERDECL,  3));
        state227.put("FINAL", new SymbolState(CLASSBODY,  3));
        state176.put("FLOAT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state52.put("PRIVATE", new SymbolState(INTERFACEBODY,  3));
        state58.put("WHILE", new SymbolState(BOOLEANLITERAL,  1));
        state55.put("LONG", new SymbolState(11));
        state175.put("STRICTFP", new SymbolState(107));
        state57.put("SEMI", new SymbolState(BLOCKSTATEMENT,  1));
        state115.put("NATIVE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state180.put("RBRACE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state102.put("DOUBLE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state34.put("FOR", new SymbolState(STATEMENTEXPRESSION,  1));
        state58.put("SHORT", new SymbolState(BOOLEANLITERAL,  1));
        state62.put("BOOLEAN", new SymbolState(METHODDECLARATORREST,  2));
        state208.put("TRANSIENT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state205.put("TRUE", new SymbolState(PAREXPRESSION,  3));
        state43.put("RPAREN", new SymbolState(EXPRESSION,  1));
        state102.put("STRICTFP", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state17.put("LBRACE", new SymbolState(LITERAL,  1));
        state49.put("FALSE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state225.put("CONSTANTDECLARATORREST", new SymbolState(136));
        state30.put("STATIC", new SymbolState(MODIFIER,  1));
        state115.put("PROTECTED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state121.put("ABSTRACT", new SymbolState(METHODDECL,  4));
        state172.put("TRUE", new SymbolState(46));
        state33.put("PROTECTED", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state152.put("STR_LITERAL", new SymbolState(24));
        state0.put("PRIVATE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state192.put("LBRACKET", new SymbolState(25));
        state184.put("FALSE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state168.put("ABSTRACT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        Map<String, SymbolState> state9 = new HashMap<String, SymbolState>();
        rules.put(9, state9);
        state9.put("ID", new SymbolState(13));
        state143.put("SEMI", new SymbolState(45));
        state171.put("NATIVE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state48.put("FLOAT", new SymbolState(MODIFIER,  1));
        state177.put("STATEMENTEXPRESSION", new SymbolState(69));
        state177.put("BOOLEANLITERAL", new SymbolState(7));
        state203.put("PUBLIC", new SymbolState(METHODDECL,  2));
        state145.put("INT", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state67.put("ID", new SymbolState(31));
        state145.put("NULL", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state7.put("ID", new SymbolState(LITERAL,  1));
        state11.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state41.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state200.put("BOOLEAN", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state112.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state22.put("INTEGERLITERAL", new SymbolState(17));
        state62.put("ABSTRACT", new SymbolState(METHODDECLARATORREST,  2));
        Map<String, SymbolState> state179 = new HashMap<String, SymbolState>();
        rules.put(179, state179);
        state179.put("COMMA", new SymbolState(CONSTANTDECLARATORREST,  3));
        state45.put("INT", new SymbolState(STATEMENT,  1));
        state95.put("FALSE", new SymbolState(STATEMENT,  9));
        state129.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state213.put("COMMA", new SymbolState(VARIABLEDECLARATORID,  2));
        state217.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state207.put("BOOLEAN", new SymbolState(65));
        state202.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state69.put("LBRACE", new SymbolState(STATEMENT,  1));
        state27.put("WHILE", new SymbolState(STATEMENT,  1));
        state50.put("ID", new SymbolState(METHODBODY,  1));
        state173.put("CLASS", new SymbolState(TYPEDECLARATION,  2));
        state80.put("FINAL", new SymbolState(MODIFIER,  1));
        state90.put("NATIVE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state131.put("ID", new SymbolState(MEMBERDECL,  1));
        state52.put("ABSTRACT", new SymbolState(INTERFACEBODY,  3));
        state17.put("CHAR", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state161 = new HashMap<String, SymbolState>();
        rules.put(161, state161);
        state161.put("SEMI", new SymbolState(N_COMMA_VARIABLEDECLARATOR_0,  3));
        state140.put("INT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state95.put("FLOAT", new SymbolState(STATEMENT,  9));
        state106.put("SEMI", new SymbolState(BRACKETSOPT,  2));
        state68.put("FORMALPARAMETER", new SymbolState(137));
        state90.put("BOOLEAN", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state19.put("FLOAT", new SymbolState(MODIFIER,  1));
        state0.put("PROTECTED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state195.put("STRICTFP", new SymbolState(TYPEDECLARATION,  2));
        state150.put("CHAR", new SymbolState(5));
        state171.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  0));
        Map<String, SymbolState> state99 = new HashMap<String, SymbolState>();
        rules.put(99, state99);
        state99.put("SEMI", new SymbolState(138));
        state17.put("RETURN", new SymbolState(LITERAL,  1));
        state28.put("BYTE", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state4 = new HashMap<String, SymbolState>();
        rules.put(4, state4);
        state4.put("WHILE", new SymbolState(139));
        state33.put("LONG", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state45.put("NULL", new SymbolState(STATEMENT,  1));
        state94.put("DOUBLE", new SymbolState(6));
        state203.put("VOID", new SymbolState(METHODDECL,  2));
        state48.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state177.put("NULL", new SymbolState(16));
        state61.put("LBRACE", new SymbolState(TYPE,  1));
        state58.put("NULL", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state86 = new HashMap<String, SymbolState>();
        rules.put(86, state86);
        state86.put("SEMI", new SymbolState(140));
        state80.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state62.put("FLOAT", new SymbolState(METHODDECLARATORREST,  2));
        state32.put("CHAR_LITERAL", new SymbolState(28));
        state189.put("ID", new SymbolState(141));
        state173.put("PUBLIC", new SymbolState(TYPEDECLARATION,  2));
        state7.put("DOUBLE", new SymbolState(LITERAL,  1));
        state11.put("ID", new SymbolState(BASICTYPE,  1));
        state89.put("PROTECTED", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state166.put("INT", new SymbolState(FIELDDECL,  5));
        state44.put("INT", new SymbolState(FIELDDECL,  5));
        state36.put("STATIC", new SymbolState(CLASSDECLARATION,  7));
        state43.put("WHILE", new SymbolState(EXPRESSION,  1));
        state184.put("FINAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state180.put("VOLATILE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state62.put("SYNCHRONIZED", new SymbolState(METHODDECLARATORREST,  2));
        state82.put("BYTE", new SymbolState(N_MODIFIER_0,  0));
        state7.put("RETURN", new SymbolState(LITERAL,  1));
        state171.put("IMPORT", new SymbolState(114));
        state16.put("TRUE", new SymbolState(LITERAL,  1));
        state69.put("NULL", new SymbolState(STATEMENT,  1));
        state131.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state36.put("FINAL", new SymbolState(CLASSDECLARATION,  7));
        state46.put("TRUE", new SymbolState(BOOLEANLITERAL,  1));
        state33.put("CHAR", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state142.put("NATIVE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state7.put("SEMI", new SymbolState(LITERAL,  1));
        state39.put("FINAL", new SymbolState(STATEMENT,  2));
        state112.put("STATIC", new SymbolState(MODIFIER,  1));
        state172.put("STR_LITERAL", new SymbolState(24));
        state91.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  2));
        state187.put("ID", new SymbolState(BRACKETSOPT,  0));
        state219.put("FLOAT", new SymbolState(FORMALPARAMETERS,  2));
        state37.put("NULL", new SymbolState(16));
        state28.put("FALSE", new SymbolState(LITERAL,  1));
        state223.put("FOR", new SymbolState(STATEMENT,  5));
        state8.put("INT", new SymbolState(STATEMENT,  8));
        state132.put("SEMI", new SymbolState(N_DOT_ID_0,  0));
        state177.put("LITERAL", new SymbolState(43));
        state90.put("PUBLIC", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state28.put("RPAREN", new SymbolState(LITERAL,  1));
        state116.put("SEMI", new SymbolState(INTERFACEMEMBERDECL,  3));
        state89.put("SHORT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state60.put("ABSTRACT", new SymbolState(METHODDECL,  2));
        state112.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state217.put("SYNCHRONIZED", new SymbolState(MEMBERDECL,  1));
        state216.put("INTERFACE", new SymbolState(N_MODIFIER_0,  0));
        state46.put("ID", new SymbolState(BOOLEANLITERAL,  1));
        state149.put("VOLATILE", new SymbolState(CLASSDECLARATION,  5));
        state101.put("FALSE", new SymbolState(58));
        state60.put("RBRACE", new SymbolState(METHODDECL,  2));
        state78.put("BOOLEANLITERAL", new SymbolState(7));
        state217.put("PRIVATE", new SymbolState(MEMBERDECL,  1));
        state200.put("CHAR", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state117.put("STRICTFP", new SymbolState(CLASSBODYDECLARATION,  2));
        state62.put("INT", new SymbolState(METHODDECLARATORREST,  2));
        state57.put("LBRACE", new SymbolState(BLOCKSTATEMENT,  1));
        state175.put("MODIFIER", new SymbolState(10));
        state131.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        state145.put("LONG", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state87.put("STRICTFP", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state208.put("NATIVE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state135.put("STR_LITERAL", new SymbolState(STATEMENT,  3));
        state100.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state100.put("SEMI", new SymbolState(MODIFIER,  1));
        state228.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  3));
        state29.put("TRANSIENT", new SymbolState(TYPEDECLARATION,  1));
        state107.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state69.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENT,  1));
        state14.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state225.put("INTERFACEMETHODORFIELDREST", new SymbolState(142));
        state31.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state152.put("TRUE", new SymbolState(46));
        state133.put("LONG", new SymbolState(11));
        state10.put("STRICTFP", new SymbolState(N_MODIFIER_0,  2));
        state227.put("SYNCHRONIZED", new SymbolState(CLASSBODY,  3));
        state14.put("ID", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state164 = new HashMap<String, SymbolState>();
        rules.put(164, state164);
        state164.put("RPAREN", new SymbolState(143));
        state184.put("LBRACE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state173.put("EOF", new SymbolState(TYPEDECLARATION,  2));
        state17.put("TRUE", new SymbolState(LITERAL,  1));
        state90.put("STRICTFP", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state147.put("N_COMMA_STATEMENTEXPRESSION_0", new SymbolState(144));
        state89.put("ABSTRACT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state107.put("SEMI", new SymbolState(MODIFIER,  1));
        state100.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state91.put("PRIVATE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state41.put("PUBLIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state219.put("STRICTFP", new SymbolState(FORMALPARAMETERS,  2));
        state207.put("DOUBLE", new SymbolState(6));
        state32.put("EXPRESSION", new SymbolState(34));
        state23.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state10.put("SHORT", new SymbolState(N_MODIFIER_0,  2));
        state215.put("SEMI", new SymbolState(IMPORTDECLARATION,  4));
        state22.put("FALSE", new SymbolState(58));
        state10.put("PUBLIC", new SymbolState(N_MODIFIER_0,  2));
        state209.put("CHAR", new SymbolState(BLOCKSTATEMENT,  1));
        state65.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state203.put("BOOLEAN", new SymbolState(METHODDECL,  2));
        state129.put("BLOCKSTATEMENT", new SymbolState(145));
        state180.put("INT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state20.put("LBRACKET", new SymbolState(25));
        state43.put("NULL", new SymbolState(EXPRESSION,  1));
        state205.put("FOR", new SymbolState(PAREXPRESSION,  3));
        state84.put("CHAR", new SymbolState(5));
        state22.put("EXPRESSION", new SymbolState(146));
        state202.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state27.put("FALSE", new SymbolState(STATEMENT,  1));
        state14.put("SHORT", new SymbolState(MODIFIER,  1));
        state28.put("NULL", new SymbolState(LITERAL,  1));
        state159.put("STATEMENTEXPRESSION", new SymbolState(147));
        state101.put("BLOCK", new SymbolState(27));
        state90.put("SYNCHRONIZED", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state215.put("PROTECTED", new SymbolState(IMPORTDECLARATION,  4));
        state30.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state30.put("NATIVE", new SymbolState(MODIFIER,  1));
        state50.put("PUBLIC", new SymbolState(METHODBODY,  1));
        state8.put("CHAR_LITERAL", new SymbolState(STATEMENT,  8));
        state170.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        state66.put("LBRACE", new SymbolState(TYPELIST,  2));
        state94.put("SYNCHRONIZED", new SymbolState(148));
        state8.put("SEMI", new SymbolState(STATEMENT,  8));
        state19.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state17.put("FOR", new SymbolState(LITERAL,  1));
        state107.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state55.put("SYNCHRONIZED", new SymbolState(148));
        state171.put("SYNCHRONIZED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state62.put("SHORT", new SymbolState(METHODDECLARATORREST,  2));
        state48.put("STATIC", new SymbolState(MODIFIER,  1));
        state21.put("CLASSBODY", new SymbolState(149));
        state196.put("IMPLEMENTS", new SymbolState(150));
        state49.put("DOUBLE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state116.put("SYNCHRONIZED", new SymbolState(INTERFACEMEMBERDECL,  3));
        state58.put("INT", new SymbolState(BOOLEANLITERAL,  1));
        state173.put("STATIC", new SymbolState(TYPEDECLARATION,  2));
        state209.put("FALSE", new SymbolState(BLOCKSTATEMENT,  1));
        state71.put("BECOMES", new SymbolState(151));
        state19.put("ID", new SymbolState(MODIFIER,  1));
        state216.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        state145.put("DO", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state115.put("TRANSIENT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state37.put("CHAR", new SymbolState(5));
        state195.put("SEMI", new SymbolState(TYPEDECLARATION,  2));
        state58.put("DOUBLE", new SymbolState(BOOLEANLITERAL,  1));
        state46.put("FLOAT", new SymbolState(BOOLEANLITERAL,  1));
        state87.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state200.put("PUBLIC", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state46.put("COMMA", new SymbolState(BOOLEANLITERAL,  1));
        state128.put("PROTECTED", new SymbolState(IMPORTDECLARATION,  6));
        state168.put("STATIC", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state153.put("PROTECTED", new SymbolState(MEMBERDECL,  1));
        state60.put("BYTE", new SymbolState(METHODDECL,  2));
        state208.put("FLOAT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state59.put("INT", new SymbolState(METHODDECL,  4));
        Map<String, SymbolState> state56 = new HashMap<String, SymbolState>();
        rules.put(56, state56);
        state56.put("SEMI", new SymbolState(152));
        state172.put("LITERAL", new SymbolState(43));
        state32.put("STATEMENTEXPRESSION", new SymbolState(69));
        state145.put("FINAL", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state41.put("ABSTRACT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state34.put("BOOLEAN", new SymbolState(STATEMENTEXPRESSION,  1));
        state33.put("INT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state91.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  2));
        state94.put("METHODDECL", new SymbolState(153));
        state197.put("VOLATILE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state46.put("RBRACE", new SymbolState(BOOLEANLITERAL,  1));
        state8.put("NULL", new SymbolState(STATEMENT,  8));
        state184.put("BOOLEAN", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state104.put("VOID", new SymbolState(MODIFIER,  1));
        state46.put("LONG", new SymbolState(BOOLEANLITERAL,  1));
        state95.put("LONG", new SymbolState(STATEMENT,  9));
        state131.put("INT", new SymbolState(MEMBERDECL,  1));
        state178.put("BYTE", new SymbolState(STATEMENT,  3));
        state94.put("CHAR", new SymbolState(5));
        state151.put("TRUE", new SymbolState(46));
        state29.put("STRICTFP", new SymbolState(TYPEDECLARATION,  1));
        state47.put("STATIC", new SymbolState(INTERFACEDECLARATION,  5));
        state140.put("BYTE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state76.put("VOID", new SymbolState(BLOCK,  3));
        state209.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BLOCKSTATEMENT,  1));
        state100.put("VOID", new SymbolState(MODIFIER,  1));
        state94.put("VOID", new SymbolState(154));
        state200.put("DOUBLE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state195.put("FINAL", new SymbolState(TYPEDECLARATION,  2));
        state128.put("EOF", new SymbolState(IMPORTDECLARATION,  6));
        Map<String, SymbolState> state139 = new HashMap<String, SymbolState>();
        rules.put(139, state139);
        state139.put("PAREXPRESSION", new SymbolState(155));
        state100.put("FINAL", new SymbolState(MODIFIER,  1));
        state177.put("DO", new SymbolState(101));
        state118.put("VARIABLEDECLARATOR", new SymbolState(111));
        state209.put("RETURN", new SymbolState(BLOCKSTATEMENT,  1));
        state64.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state185.put("STR_LITERAL", new SymbolState(24));
        state82.put("INT", new SymbolState(N_MODIFIER_0,  0));
        state7.put("RBRACE", new SymbolState(LITERAL,  1));
        state44.put("PUBLIC", new SymbolState(FIELDDECL,  5));
        state223.put("WHILE", new SymbolState(STATEMENT,  5));
        state209.put("RBRACE", new SymbolState(BLOCKSTATEMENT,  1));
        state30.put("SEMI", new SymbolState(MODIFIER,  1));
        state12.put("STR_LITERAL", new SymbolState(INTEGERLITERAL,  1));
        state64.put("FINAL", new SymbolState(MODIFIER,  1));
        state94.put("BYTE", new SymbolState(2));
        state168.put("VOLATILE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state40.put("ABSTRACT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state171.put("STRICTFP", new SymbolState(N_TYPEDECLARATION_0,  0));
        state85.put("EXPRESSION", new SymbolState(156));
        state217.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        state223.put("ID", new SymbolState(STATEMENT,  5));
        state135.put("SHORT", new SymbolState(STATEMENT,  3));
        state28.put("INT", new SymbolState(LITERAL,  1));
        state16.put("DECIMAL_INTEGER_LITERAL", new SymbolState(LITERAL,  1));
        state122.put("FORMALPARAMETERS", new SymbolState(62));
        state44.put("BOOLEAN", new SymbolState(FIELDDECL,  5));
        state152.put("LITERAL", new SymbolState(43));
        state184.put("WHILE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state14.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state0.put("PACKAGE", new SymbolState(157));
        state129.put("EXPRESSION", new SymbolState(34));
        state34.put("ID", new SymbolState(STATEMENTEXPRESSION,  1));
        state227.put("NATIVE", new SymbolState(CLASSBODY,  3));
        state16.put("DOUBLE", new SymbolState(LITERAL,  1));
        state121.put("FINAL", new SymbolState(METHODDECL,  4));
        state48.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state59.put("VOID", new SymbolState(METHODDECL,  4));
        state176.put("INT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state95.put("STR_LITERAL", new SymbolState(STATEMENT,  9));
        state39.put("TRUE", new SymbolState(STATEMENT,  2));
        state37.put("BOOLEAN", new SymbolState(65));
        state176.put("BYTE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state153.put("ABSTRACT", new SymbolState(MEMBERDECL,  1));
        state8.put("BYTE", new SymbolState(STATEMENT,  8));
        state33.put("VOLATILE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state199.put("NATIVE", new SymbolState(FORMALPARAMETERS,  4));
        state73.put("PUBLIC", new SymbolState(CLASSDECLARATION,  5));
        state102.put("CHAR", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state43.put("FLOAT", new SymbolState(EXPRESSION,  1));
        state21.put("LBRACE", new SymbolState(33));
        state98.put("LONG", new SymbolState(11));
        state42.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state46.put("CHAR", new SymbolState(BOOLEANLITERAL,  1));
        state107.put("VOID", new SymbolState(MODIFIER,  1));
        state141.put("LBRACKET", new SymbolState(25));
        state57.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BLOCKSTATEMENT,  1));
        state121.put("NATIVE", new SymbolState(METHODDECL,  4));
        state95.put("DO", new SymbolState(STATEMENT,  9));
        state28.put("TRUE", new SymbolState(LITERAL,  1));
        state10.put("FLOAT", new SymbolState(N_MODIFIER_0,  2));
        state145.put("RETURN", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state168.put("SYNCHRONIZED", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state10.put("LONG", new SymbolState(N_MODIFIER_0,  2));
        state76.put("STRICTFP", new SymbolState(BLOCK,  3));
        state52.put("TRANSIENT", new SymbolState(INTERFACEBODY,  3));
        state24.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state202.put("TYPEDECLARATION", new SymbolState(91));
        state90.put("CHAR", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state37.put("TRUE", new SymbolState(46));
        state199.put("SHORT", new SymbolState(FORMALPARAMETERS,  4));
        state104.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state153.put("INT", new SymbolState(MEMBERDECL,  1));
        state36.put("CLASS", new SymbolState(CLASSDECLARATION,  7));
        state39.put("CHAR_LITERAL", new SymbolState(STATEMENT,  2));
        state136.put("COMMA", new SymbolState(N_COMMA_CONSTANTDECLARATOR_0,  0));
        state197.put("DOUBLE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state140.put("TRANSIENT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state0.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state123.put("ID", new SymbolState(141));
        state142.put("STRICTFP", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state208.put("BOOLEAN", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state219.put("ABSTRACT", new SymbolState(FORMALPARAMETERS,  2));
        state101.put("TRUE", new SymbolState(46));
        state57.put("STR_LITERAL", new SymbolState(BLOCKSTATEMENT,  1));
        state106.put("COMMA", new SymbolState(BRACKETSOPT,  2));
        state12.put("FINAL", new SymbolState(INTEGERLITERAL,  1));
        state216.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state217.put("PUBLIC", new SymbolState(MEMBERDECL,  1));
        state170.put("ID", new SymbolState(N_MODIFIER_0,  0));
        state168.put("SHORT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state68.put("CHAR", new SymbolState(5));
        state76.put("PRIVATE", new SymbolState(BLOCK,  3));
        state44.put("PRIVATE", new SymbolState(FIELDDECL,  5));
        state227.put("STRICTFP", new SymbolState(CLASSBODY,  3));
        state107.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state145.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state14.put("SEMI", new SymbolState(MODIFIER,  1));
        state228.put("PROTECTED", new SymbolState(CLASSDECLARATION,  3));
        state102.put("SYNCHRONIZED", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state142.put("SHORT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state8.put("FALSE", new SymbolState(STATEMENT,  8));
        state183.put("INTERFACE", new SymbolState(INTERFACEDECLARATION,  3));
        state166.put("VOLATILE", new SymbolState(FIELDDECL,  5));
        state176.put("PUBLIC", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state73.put("STRICTFP", new SymbolState(CLASSDECLARATION,  5));
        state148.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state62.put("RBRACE", new SymbolState(METHODDECLARATORREST,  2));
        state69.put("BYTE", new SymbolState(STATEMENT,  1));
        state50.put("VOLATILE", new SymbolState(METHODBODY,  1));
        state171.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  0));
        state153.put("VOID", new SymbolState(MEMBERDECL,  1));
        state112.put("SHORT", new SymbolState(MODIFIER,  1));
        state132.put("N_DOT_ID_0", new SymbolState(158));
        state69.put("STR_LITERAL", new SymbolState(STATEMENT,  1));
        state41.put("STRICTFP", new SymbolState(N_TYPEDECLARATION_0,  0));
        state106.put("BECOMES", new SymbolState(BRACKETSOPT,  2));
        state52.put("STRICTFP", new SymbolState(INTERFACEBODY,  3));
        state152.put("SEMI", new SymbolState(159));
        state43.put("LBRACE", new SymbolState(EXPRESSION,  1));
        state140.put("FLOAT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state11.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state69.put("FLOAT", new SymbolState(STATEMENT,  1));
        state49.put("ID", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state205.put("LBRACE", new SymbolState(PAREXPRESSION,  3));
        state48.put("CHAR", new SymbolState(MODIFIER,  1));
        state150.put("TYPELIST", new SymbolState(160));
        state181.put("INT", new SymbolState(METHODBODY,  1));
        state95.put("ID", new SymbolState(STATEMENT,  9));
        state128.put("INTERFACE", new SymbolState(IMPORTDECLARATION,  6));
        state7.put("INT", new SymbolState(LITERAL,  1));
        state152.put("CHAR_LITERAL", new SymbolState(28));
        state27.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENT,  1));
        state50.put("SYNCHRONIZED", new SymbolState(METHODBODY,  1));
        state129.put("INT", new SymbolState(23));
        state0.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state14.put("VOID", new SymbolState(MODIFIER,  1));
        state53.put("VARIABLEDECLARATOR", new SymbolState(161));
        state30.put("LONG", new SymbolState(MODIFIER,  1));
        state165.put("LBRACE", new SymbolState(49));
        state215.put("IMPORT", new SymbolState(IMPORTDECLARATION,  4));
        state117.put("FINAL", new SymbolState(CLASSBODYDECLARATION,  2));
        state177.put("WHILE", new SymbolState(35));
        state142.put("DOUBLE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state41.put("PROTECTED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state82.put("CHAR", new SymbolState(N_MODIFIER_0,  0));
        state159.put("INTEGERLITERAL", new SymbolState(17));
        state8.put("DO", new SymbolState(STATEMENT,  8));
        state68.put("BYTE", new SymbolState(2));
        state62.put("PUBLIC", new SymbolState(METHODDECLARATORREST,  2));
        state16.put("STR_LITERAL", new SymbolState(LITERAL,  1));
        state112.put("CLASS", new SymbolState(MODIFIER,  1));
        state171.put("PRIVATE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state89.put("BYTE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state140.put("RBRACE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        Map<String, SymbolState> state158 = new HashMap<String, SymbolState>();
        rules.put(158, state158);
        state158.put("DOT", new SymbolState(162));
        Map<String, SymbolState> state157 = new HashMap<String, SymbolState>();
        rules.put(157, state157);
        state157.put("QUALIFIEDIDENTIFIER", new SymbolState(163));
        state0.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state7.put("CHAR_LITERAL", new SymbolState(LITERAL,  1));
        state49.put("CHAR_LITERAL", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state39.put("RBRACE", new SymbolState(STATEMENT,  2));
        Map<String, SymbolState> state119 = new HashMap<String, SymbolState>();
        rules.put(119, state119);
        state119.put("COMMA", new SymbolState(N_COMMA_FORMALPARAMETER_0,  3));
        state208.put("SEMI", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state16.put("NULL", new SymbolState(LITERAL,  1));
        state75.put("COMMA", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  0));
        state49.put("WHILE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state80.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state202.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state19.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state159.put("TRUE", new SymbolState(46));
        state33.put("FLOAT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state37.put("STR_LITERAL", new SymbolState(24));
        state98.put("BYTE", new SymbolState(2));
        Map<String, SymbolState> state130 = new HashMap<String, SymbolState>();
        rules.put(130, state130);
        state130.put("SEMI", new SymbolState(FORINIT,  2));
        state149.put("PROTECTED", new SymbolState(CLASSDECLARATION,  5));
        state170.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state28.put("SHORT", new SymbolState(LITERAL,  1));
        state57.put("CHAR", new SymbolState(BLOCKSTATEMENT,  1));
        state159.put("STR_LITERAL", new SymbolState(24));
        state55.put("BYTE", new SymbolState(2));
        state30.put("CHAR", new SymbolState(MODIFIER,  1));
        state19.put("FINAL", new SymbolState(MODIFIER,  1));
        state166.put("RBRACE", new SymbolState(FIELDDECL,  5));
        state42.put("COMMA", new SymbolState(BASICTYPE,  1));
        state166.put("LONG", new SymbolState(FIELDDECL,  5));
        state55.put("FLOAT", new SymbolState(15));
        state148.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state0.put("SYNCHRONIZED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state227.put("ABSTRACT", new SymbolState(CLASSBODY,  3));
        state200.put("PRIVATE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state160.put("LBRACE", new SymbolState(33));
        state217.put("STATIC", new SymbolState(MEMBERDECL,  1));
        state209.put("INT", new SymbolState(BLOCKSTATEMENT,  1));
        Map<String, SymbolState> state221 = new HashMap<String, SymbolState>();
        rules.put(221, state221);
        state221.put("SEMI", new SymbolState(FORINIT,  3));
        state97.put("COMMA", new SymbolState(N_DOT_ID_0,  3));
        state46.put("STR_LITERAL", new SymbolState(BOOLEANLITERAL,  1));
        state90.put("PROTECTED", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state0.put("STRICTFP", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state208.put("LONG", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        Map<String, SymbolState> state211 = new HashMap<String, SymbolState>();
        rules.put(211, state211);
        state211.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  2));
        state153.put("STRICTFP", new SymbolState(MEMBERDECL,  1));
        state168.put("PRIVATE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state49.put("SHORT", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state49.put("INT", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state46.put("DOUBLE", new SymbolState(BOOLEANLITERAL,  1));
        state73.put("EOF", new SymbolState(CLASSDECLARATION,  5));
        state22.put("NULL", new SymbolState(16));
        state215.put("ABSTRACT", new SymbolState(IMPORTDECLARATION,  4));
        state103.put("ID", new SymbolState(31));
        state12.put("CHAR_LITERAL", new SymbolState(INTEGERLITERAL,  1));
        state166.put("SEMI", new SymbolState(FIELDDECL,  5));
        state182.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state78.put("FORUPDATE", new SymbolState(164));
        state8.put("ID", new SymbolState(STATEMENT,  8));
        state50.put("BYTE", new SymbolState(METHODBODY,  1));
        state181.put("PROTECTED", new SymbolState(METHODBODY,  1));
        state110.put("RPAREN", new SymbolState(FORMALPARAMETER,  3));
        state12.put("INT", new SymbolState(INTEGERLITERAL,  1));
        state24.put("LBRACE", new SymbolState(LITERAL,  1));
        state102.put("BYTE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state33.put("VOID", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state102.put("LONG", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state33.put("PRIVATE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state200.put("LONG", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state79.put("METHODDECLARATORREST", new SymbolState(165));
        Map<String, SymbolState> state218 = new HashMap<String, SymbolState>();
        rules.put(218, state218);
        state218.put("SEMI", new SymbolState(166));
        state12.put("SHORT", new SymbolState(INTEGERLITERAL,  1));
        state89.put("RBRACE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state16.put("FINAL", new SymbolState(LITERAL,  1));
        state0.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state228.put("INTERFACE", new SymbolState(CLASSDECLARATION,  3));
        state219.put("BYTE", new SymbolState(FORMALPARAMETERS,  2));
        state36.put("VOLATILE", new SymbolState(CLASSDECLARATION,  7));
        state30.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state48.put("CLASS", new SymbolState(MODIFIER,  1));
        state84.put("DOUBLE", new SymbolState(6));
        state227.put("TRANSIENT", new SymbolState(CLASSBODY,  3));
        state50.put("CHAR", new SymbolState(METHODBODY,  1));
        state17.put("SEMI", new SymbolState(LITERAL,  1));
        state107.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state112.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state176.put("RBRACE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        Map<String, SymbolState> state3 = new HashMap<String, SymbolState>();
        rules.put(3, state3);
        state3.put("CONSTANTDECLARATOR", new SymbolState(167));
        state41.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  0));
        state28.put("ID", new SymbolState(LITERAL,  1));
        state62.put("NATIVE", new SymbolState(METHODDECLARATORREST,  2));
        state128.put("STRICTFP", new SymbolState(IMPORTDECLARATION,  6));
        state69.put("SEMI", new SymbolState(STATEMENT,  1));
        state94.put("VOLATILE", new SymbolState(80));
        state69.put("CHAR", new SymbolState(STATEMENT,  1));
        state202.put("INTERFACE", new SymbolState(N_MODIFIER_0,  0));
        state184.put("SHORT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state19.put("VOID", new SymbolState(MODIFIER,  1));
        state59.put("FLOAT", new SymbolState(METHODDECL,  4));
        state64.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state55.put("INTERFACEMEMBERDECL", new SymbolState(168));
        state192.put("CONSTANTDECLARATORREST", new SymbolState(169));
        state166.put("PROTECTED", new SymbolState(FIELDDECL,  5));
        state129.put("DOUBLE", new SymbolState(6));
        state30.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state40.put("N_INTERFACEBODYDECLARATION_0", new SymbolState(170));
        state89.put("NATIVE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state45.put("LBRACE", new SymbolState(STATEMENT,  1));
        state148.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state65.put("ID", new SymbolState(BASICTYPE,  1));
        state219.put("RBRACE", new SymbolState(FORMALPARAMETERS,  2));
        state77.put("RPAREN", new SymbolState(FORMALPARAMETER,  2));
        state43.put("BYTE", new SymbolState(EXPRESSION,  1));
        state116.put("ID", new SymbolState(INTERFACEMEMBERDECL,  3));
        state37.put("LONG", new SymbolState(11));
        state34.put("SHORT", new SymbolState(STATEMENTEXPRESSION,  1));
        state115.put("N_IMPORTDECLARATION_0", new SymbolState(171));
        state70.put("LONG", new SymbolState(11));
        state145.put("ID", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state45.put("WHILE", new SymbolState(STATEMENT,  1));
        state34.put("TRUE", new SymbolState(STATEMENTEXPRESSION,  1));
        state0.put("VOLATILE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state178.put("BOOLEAN", new SymbolState(STATEMENT,  3));
        state145.put("BOOLEAN", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state33.put("TRANSIENT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        Map<String, SymbolState> state144 = new HashMap<String, SymbolState>();
        rules.put(144, state144);
        state144.put("SEMI", new SymbolState(MORESTATEMENTEXPRESSIONS,  1));
        state78.put("INTEGERLITERAL", new SymbolState(17));
        state173.put("SYNCHRONIZED", new SymbolState(TYPEDECLARATION,  2));
        state135.put("LBRACE", new SymbolState(STATEMENT,  3));
        state24.put("INT", new SymbolState(LITERAL,  1));
        state47.put("NATIVE", new SymbolState(INTERFACEDECLARATION,  5));
        Map<String, SymbolState> state72 = new HashMap<String, SymbolState>();
        rules.put(72, state72);
        state72.put("VARIABLEDECLARATOR", new SymbolState(111));
        state24.put("SHORT", new SymbolState(LITERAL,  1));
        state216.put("CLASS", new SymbolState(N_MODIFIER_0,  0));
        state178.put("FLOAT", new SymbolState(STATEMENT,  3));
        state144.put("RPAREN", new SymbolState(MORESTATEMENTEXPRESSIONS,  1));
        state148.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state8.put("FLOAT", new SymbolState(STATEMENT,  8));
        state203.put("PRIVATE", new SymbolState(METHODDECL,  2));
        state181.put("PRIVATE", new SymbolState(METHODBODY,  1));
        state142.put("LONG", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state223.put("DO", new SymbolState(STATEMENT,  5));
        state90.put("FLOAT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state144.put("COMMA", new SymbolState(172));
        state102.put("RBRACE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state34.put("CHAR", new SymbolState(STATEMENTEXPRESSION,  1));
        state200.put("PROTECTED", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state105.put("LBRACE", new SymbolState(BRACKETSOPT,  0));
        state117.put("PROTECTED", new SymbolState(CLASSBODYDECLARATION,  2));
        state104.put("LONG", new SymbolState(MODIFIER,  1));
        state203.put("SHORT", new SymbolState(METHODDECL,  2));
        state39.put("CHAR", new SymbolState(STATEMENT,  2));
        state39.put("BOOLEAN", new SymbolState(STATEMENT,  2));
        state184.put("INT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state153.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state17.put("RPAREN", new SymbolState(LITERAL,  1));
        state193.put("SEMI", new SymbolState(CONSTANTDECLARATORSREST,  2));
        state44.put("RBRACE", new SymbolState(FIELDDECL,  5));
        state115.put("PUBLIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state61.put("COMMA", new SymbolState(TYPE,  1));
        state80.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state57.put("DOUBLE", new SymbolState(BLOCKSTATEMENT,  1));
        state43.put("CHAR", new SymbolState(EXPRESSION,  1));
        state80.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state94.put("FLOAT", new SymbolState(15));
        state90.put("ID", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state67.put("BOOLEAN", new SymbolState(65));
        state116.put("FLOAT", new SymbolState(INTERFACEMEMBERDECL,  3));
        state223.put("BYTE", new SymbolState(STATEMENT,  5));
        state142.put("FINAL", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state85.put("TRUE", new SymbolState(46));
        Map<String, SymbolState> state6 = new HashMap<String, SymbolState>();
        rules.put(6, state6);
        state6.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state14.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state115.put("FINAL", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state142.put("PROTECTED", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state100.put("SHORT", new SymbolState(MODIFIER,  1));
        state75.put("N_COMMA_STATEMENTEXPRESSION_0", new SymbolState(144));
        state181.put("ABSTRACT", new SymbolState(METHODBODY,  1));
        state197.put("FLOAT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state107.put("INT", new SymbolState(MODIFIER,  1));
        state34.put("LBRACE", new SymbolState(STATEMENTEXPRESSION,  1));
        state59.put("TRANSIENT", new SymbolState(METHODDECL,  4));
        state95.put("RETURN", new SymbolState(STATEMENT,  9));
        state12.put("RETURN", new SymbolState(INTEGERLITERAL,  1));
        state200.put("SEMI", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state216.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state176.put("STRICTFP", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state227.put("EOF", new SymbolState(CLASSBODY,  3));
        state138.put("SEMI", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state135.put("BYTE", new SymbolState(STATEMENT,  3));
        state226.put("BASICTYPE", new SymbolState(61));
        state117.put("ID", new SymbolState(CLASSBODYDECLARATION,  2));
        state58.put("FLOAT", new SymbolState(BOOLEANLITERAL,  1));
        state28.put("FLOAT", new SymbolState(LITERAL,  1));
        state219.put("TRANSIENT", new SymbolState(FORMALPARAMETERS,  2));
        state205.put("DO", new SymbolState(PAREXPRESSION,  3));
        state16.put("ID", new SymbolState(LITERAL,  1));
        state16.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state103.put("SHORT", new SymbolState(42));
        state121.put("STATIC", new SymbolState(METHODDECL,  4));
        state138.put("RBRACE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state102.put("PRIVATE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state7.put("FALSE", new SymbolState(LITERAL,  1));
        state224.put("COMMA", new SymbolState(VARIABLEDECLARATOR,  2));
        state151.put("BOOLEANLITERAL", new SymbolState(7));
        state102.put("SHORT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state138.put("STR_LITERAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state45.put("FINAL", new SymbolState(STATEMENT,  1));
        state36.put("EOF", new SymbolState(CLASSDECLARATION,  7));
        state208.put("BYTE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state133.put("BOOLEAN", new SymbolState(65));
        state55.put("TRANSIENT", new SymbolState(64));
        state116.put("ABSTRACT", new SymbolState(INTERFACEMEMBERDECL,  3));
        state134.put("BECOMES", new SymbolState(151));
        state121.put("LONG", new SymbolState(METHODDECL,  4));
        state129.put("LBRACE", new SymbolState(49));
        state175.put("INTERFACEDECLARATION", new SymbolState(173));
        state17.put("FALSE", new SymbolState(LITERAL,  1));
        state37.put("INTEGERLITERAL", new SymbolState(17));
        state32.put("INTEGERLITERAL", new SymbolState(17));
        state51.put("FORMALPARAMETERS", new SymbolState(174));
        state168.put("FINAL", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state138.put("CHAR", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state101.put("INTEGERLITERAL", new SymbolState(17));
        state205.put("CHAR_LITERAL", new SymbolState(PAREXPRESSION,  3));
        state17.put("FLOAT", new SymbolState(LITERAL,  1));
        state100.put("ID", new SymbolState(MODIFIER,  1));
        state32.put("WHILE", new SymbolState(35));
        state17.put("INT", new SymbolState(LITERAL,  1));
        state202.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        state97.put("IMPLEMENTS", new SymbolState(N_DOT_ID_0,  3));
        Map<String, SymbolState> state190 = new HashMap<String, SymbolState>();
        rules.put(190, state190);
        state190.put("COMMA", new SymbolState(VARIABLEINITIALIZER,  1));
        state89.put("TRANSIENT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state159.put("NULL", new SymbolState(16));
        state98.put("BASICTYPE", new SymbolState(61));
        state199.put("SYNCHRONIZED", new SymbolState(FORMALPARAMETERS,  4));
        state216.put("N_MODIFIER_0", new SymbolState(175));
        state19.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state197.put("TRANSIENT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state48.put("BYTE", new SymbolState(MODIFIER,  1));
        state199.put("LBRACKET", new SymbolState(FORMALPARAMETERS,  4));
        state62.put("STRICTFP", new SymbolState(METHODDECLARATORREST,  2));
        state152.put("FALSE", new SymbolState(58));
        state80.put("SEMI", new SymbolState(MODIFIER,  1));
        state178.put("DO", new SymbolState(STATEMENT,  3));
        state104.put("NATIVE", new SymbolState(MODIFIER,  1));
        state203.put("LONG", new SymbolState(METHODDECL,  2));
        state102.put("STATIC", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state217.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state212 = new HashMap<String, SymbolState>();
        rules.put(212, state212);
        state212.put("SEMI", new SymbolState(176));
        state148.put("FLOAT", new SymbolState(MODIFIER,  1));
        state50.put("FINAL", new SymbolState(METHODBODY,  1));
        state100.put("CLASS", new SymbolState(MODIFIER,  1));
        state217.put("LONG", new SymbolState(MEMBERDECL,  1));
        state217.put("VOID", new SymbolState(MEMBERDECL,  1));
        state49.put("BOOLEAN", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state194.put("COMMA", new SymbolState(N_COMMA_TYPE_0,  3));
        state60.put("FINAL", new SymbolState(METHODDECL,  2));
        state5.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state100.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state76.put("LONG", new SymbolState(BLOCK,  3));
        state135.put("INT", new SymbolState(STATEMENT,  3));
        state76.put("VOLATILE", new SymbolState(BLOCK,  3));
        state55.put("ABSTRACT", new SymbolState(104));
        state215.put("NATIVE", new SymbolState(IMPORTDECLARATION,  4));
        state203.put("INT", new SymbolState(METHODDECL,  2));
        state73.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  5));
        state199.put("STATIC", new SymbolState(FORMALPARAMETERS,  4));
        state184.put("STR_LITERAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state60.put("BOOLEAN", new SymbolState(METHODDECL,  2));
        state47.put("VOLATILE", new SymbolState(INTERFACEDECLARATION,  5));
        Map<String, SymbolState> state88 = new HashMap<String, SymbolState>();
        rules.put(88, state88);
        state88.put("RPAREN", new SymbolState(177));
        state76.put("WHILE", new SymbolState(BLOCK,  3));
        state104.put("INT", new SymbolState(MODIFIER,  1));
        state216.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        state175.put("VOLATILE", new SymbolState(80));
        state202.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state80.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state16.put("DO", new SymbolState(LITERAL,  1));
        state141.put("RPAREN", new SymbolState(BRACKETSOPT,  0));
        state172.put("FALSE", new SymbolState(58));
        state131.put("PUBLIC", new SymbolState(MEMBERDECL,  1));
        state168.put("PROTECTED", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state75.put("SEMI", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  0));
        state29.put("VOLATILE", new SymbolState(TYPEDECLARATION,  1));
        state180.put("TRANSIENT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state138.put("LBRACE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state55.put("STATIC", new SymbolState(30));
        Map<String, SymbolState> state126 = new HashMap<String, SymbolState>();
        rules.put(126, state126);
        state126.put("IF", new SymbolState(S,  2));
        state153.put("PRIVATE", new SymbolState(MEMBERDECL,  1));
        state153.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        state95.put("NULL", new SymbolState(STATEMENT,  9));
        state107.put("NATIVE", new SymbolState(MODIFIER,  1));
        state107.put("STATIC", new SymbolState(MODIFIER,  1));
        state45.put("FOR", new SymbolState(STATEMENT,  1));
        state48.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state78.put("STR_LITERAL", new SymbolState(24));
        state37.put("DOUBLE", new SymbolState(6));
        state45.put("SHORT", new SymbolState(STATEMENT,  1));
        state59.put("CHAR", new SymbolState(METHODDECL,  4));
        state173.put("PRIVATE", new SymbolState(TYPEDECLARATION,  2));
        state181.put("SHORT", new SymbolState(METHODBODY,  1));
        state208.put("STRICTFP", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state12.put("ID", new SymbolState(INTEGERLITERAL,  1));
        state145.put("SHORT", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state8.put("WHILE", new SymbolState(STATEMENT,  8));
        state14.put("STATIC", new SymbolState(MODIFIER,  1));
        state112.put("SEMI", new SymbolState(MODIFIER,  1));
        state17.put("DECIMAL_INTEGER_LITERAL", new SymbolState(LITERAL,  1));
        state90.put("SEMI", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state197.put("PRIVATE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state52.put("PUBLIC", new SymbolState(INTERFACEBODY,  3));
        state216.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        state32.put("RETURN", new SymbolState(22));
        state14.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state104.put("BYTE", new SymbolState(MODIFIER,  1));
        state34.put("FINAL", new SymbolState(STATEMENTEXPRESSION,  1));
        state227.put("INTERFACE", new SymbolState(CLASSBODY,  3));
        state89.put("FINAL", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state117.put("SYNCHRONIZED", new SymbolState(CLASSBODYDECLARATION,  2));
        state46.put("NULL", new SymbolState(BOOLEANLITERAL,  1));
        state58.put("BOOLEAN", new SymbolState(BOOLEANLITERAL,  1));
        state32.put("STATEMENT", new SymbolState(178));
        state87.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state60.put("SHORT", new SymbolState(METHODDECL,  2));
        state133.put("SHORT", new SymbolState(42));
        state101.put("NULL", new SymbolState(16));
        state115.put("STATIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state138.put("CHAR_LITERAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state69.put("FOR", new SymbolState(STATEMENT,  1));
        state178.put("CHAR", new SymbolState(STATEMENT,  3));
        state103.put("LONG", new SymbolState(11));
        state14.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state176.put("NATIVE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state64.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state166.put("BOOLEAN", new SymbolState(FIELDDECL,  5));
        state19.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state128.put("PUBLIC", new SymbolState(IMPORTDECLARATION,  6));
        state16.put("LBRACE", new SymbolState(LITERAL,  1));
        state143.put("NULL", new SymbolState(16));
        state184.put("SEMI", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state209.put("CHAR_LITERAL", new SymbolState(BLOCKSTATEMENT,  1));
        state219.put("STATIC", new SymbolState(FORMALPARAMETERS,  2));
        state48.put("INT", new SymbolState(MODIFIER,  1));
        state185.put("VARIABLEINITIALIZER", new SymbolState(179));
        state78.put("NULL", new SymbolState(16));
        state7.put("COMMA", new SymbolState(LITERAL,  1));
        state76.put("PROTECTED", new SymbolState(BLOCK,  3));
        state55.put("INTERFACEMETHODORFIELDDECL", new SymbolState(180));
        state143.put("FALSE", new SymbolState(58));
        state203.put("VOLATILE", new SymbolState(METHODDECL,  2));
        state16.put("FLOAT", new SymbolState(LITERAL,  1));
        state202.put("N_MODIFIER_0", new SymbolState(175));
        state117.put("DOUBLE", new SymbolState(CLASSBODYDECLARATION,  2));
        state166.put("ABSTRACT", new SymbolState(FIELDDECL,  5));
        state172.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state135.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENT,  3));
        state153.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        state181.put("PUBLIC", new SymbolState(METHODBODY,  1));
        state217.put("INT", new SymbolState(MEMBERDECL,  1));
        state219.put("VOLATILE", new SymbolState(FORMALPARAMETERS,  2));
        state50.put("ABSTRACT", new SymbolState(METHODBODY,  1));
        state89.put("SEMI", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state46.put("CHAR_LITERAL", new SymbolState(BOOLEANLITERAL,  1));
        state72.put("ID", new SymbolState(13));
        state191.put("IMPLEMENTS", new SymbolState(TYPE,  3));
        state183.put("NATIVE", new SymbolState(INTERFACEDECLARATION,  3));
        state129.put("BYTE", new SymbolState(2));
        state131.put("LONG", new SymbolState(MEMBERDECL,  1));
        state82.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state87.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state76.put("FLOAT", new SymbolState(BLOCK,  3));
        state181.put("STATIC", new SymbolState(METHODBODY,  1));
        state165.put("BLOCK", new SymbolState(181));
        state49.put("BYTE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state143.put("INTEGERLITERAL", new SymbolState(17));
        state24.put("STR_LITERAL", new SymbolState(LITERAL,  1));
        state128.put("PRIVATE", new SymbolState(IMPORTDECLARATION,  6));
        state22.put("CHAR_LITERAL", new SymbolState(28));
        state98.put("SHORT", new SymbolState(42));
        state29.put("CLASS", new SymbolState(TYPEDECLARATION,  1));
        state199.put("INT", new SymbolState(FORMALPARAMETERS,  4));
        state10.put("SEMI", new SymbolState(N_MODIFIER_0,  2));
        state174.put("BLOCK", new SymbolState(181));
        state49.put("RETURN", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state116.put("PROTECTED", new SymbolState(INTERFACEMEMBERDECL,  3));
        state7.put("SHORT", new SymbolState(LITERAL,  1));
        state176.put("VOID", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state200.put("ABSTRACT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        Map<String, SymbolState> state169 = new HashMap<String, SymbolState>();
        rules.put(169, state169);
        state169.put("SEMI", new SymbolState(CONSTANTDECLARATOR,  2));
        state48.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state12.put("DO", new SymbolState(INTEGERLITERAL,  1));
        state80.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state157.put("ID", new SymbolState(182));
        state167.put("COMMA", new SymbolState(N_COMMA_CONSTANTDECLARATOR_0,  3));
        state76.put("NATIVE", new SymbolState(BLOCK,  3));
        state208.put("CHAR", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state116.put("VOID", new SymbolState(INTERFACEMEMBERDECL,  3));
        state217.put("ABSTRACT", new SymbolState(MEMBERDECL,  1));
        state68.put("ID", new SymbolState(31));
        state64.put("STATIC", new SymbolState(MODIFIER,  1));
        state57.put("FOR", new SymbolState(BLOCKSTATEMENT,  1));
        state16.put("LONG", new SymbolState(LITERAL,  1));
        state177.put("RETURN", new SymbolState(22));
        state142.put("CHAR", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state64.put("SEMI", new SymbolState(MODIFIER,  1));
        state184.put("DECIMAL_INTEGER_LITERAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state180.put("FLOAT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state89.put("VOID", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state181.put("NATIVE", new SymbolState(METHODBODY,  1));
        state17.put("COMMA", new SymbolState(LITERAL,  1));
        state145.put("WHILE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state94.put("LONG", new SymbolState(11));
        Map<String, SymbolState> state63 = new HashMap<String, SymbolState>();
        rules.put(63, state63);
        state63.put("SEMI", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  3));
        state166.put("NATIVE", new SymbolState(FIELDDECL,  5));
        state121.put("VOLATILE", new SymbolState(METHODDECL,  4));
        state116.put("NATIVE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state180.put("NATIVE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state143.put("CHAR_LITERAL", new SymbolState(28));
        state223.put("LBRACE", new SymbolState(STATEMENT,  5));
        state67.put("BASICTYPE", new SymbolState(61));
        state217.put("BYTE", new SymbolState(MEMBERDECL,  1));
        state9.put("VARIABLEDECLARATOR", new SymbolState(111));
        state205.put("DECIMAL_INTEGER_LITERAL", new SymbolState(PAREXPRESSION,  3));
        state168.put("DOUBLE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state178.put("ID", new SymbolState(STATEMENT,  3));
        state178.put("TRUE", new SymbolState(STATEMENT,  3));
        state171.put("ABSTRACT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state129.put("CHAR_LITERAL", new SymbolState(28));
        state179.put("SEMI", new SymbolState(CONSTANTDECLARATORREST,  3));
        state206.put("INTERFACEBODY", new SymbolState(183));
        state199.put("STRICTFP", new SymbolState(FORMALPARAMETERS,  4));
        state184.put("DOUBLE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state52.put("PROTECTED", new SymbolState(INTERFACEBODY,  3));
        state34.put("DO", new SymbolState(STATEMENTEXPRESSION,  1));
        state24.put("DOUBLE", new SymbolState(LITERAL,  1));
        state139.put("LPAREN", new SymbolState(85));
        state166.put("PRIVATE", new SymbolState(FIELDDECL,  5));
        state202.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        state95.put("SEMI", new SymbolState(STATEMENT,  9));
        state135.put("RETURN", new SymbolState(STATEMENT,  3));
        state24.put("RETURN", new SymbolState(LITERAL,  1));
        state33.put("STRICTFP", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state215.put("TRANSIENT", new SymbolState(IMPORTDECLARATION,  4));
        state168.put("TRANSIENT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state28.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state217.put("CHAR", new SymbolState(MEMBERDECL,  1));
        state33.put("DOUBLE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state89.put("BOOLEAN", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state12.put("BYTE", new SymbolState(INTEGERLITERAL,  1));
        state40.put("PRIVATE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state34.put("RPAREN", new SymbolState(STATEMENTEXPRESSION,  1));
        state41.put("SYNCHRONIZED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state226.put("LONG", new SymbolState(11));
        state223.put("TRUE", new SymbolState(STATEMENT,  5));
        state168.put("RBRACE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state175.put("TRANSIENT", new SymbolState(64));
        state134.put("LPAREN", new SymbolState(68));
        state170.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        state43.put("ID", new SymbolState(EXPRESSION,  1));
        state27.put("TRUE", new SymbolState(STATEMENT,  1));
        state14.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state49.put("CHAR", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state180.put("PROTECTED", new SymbolState(INTERFACEMEMBERDECL,  1));
        state181.put("LONG", new SymbolState(METHODBODY,  1));
        state14.put("NATIVE", new SymbolState(MODIFIER,  1));
        state199.put("BOOLEAN", new SymbolState(FORMALPARAMETERS,  4));
        state62.put("PROTECTED", new SymbolState(METHODDECLARATORREST,  2));
        state178.put("SEMI", new SymbolState(STATEMENT,  3));
        state87.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state39.put("FALSE", new SymbolState(STATEMENT,  2));
        Map<String, SymbolState> state210 = new HashMap<String, SymbolState>();
        rules.put(210, state210);
        state210.put("SEMI", new SymbolState(184));
        state43.put("SHORT", new SymbolState(EXPRESSION,  1));
        Map<String, SymbolState> state26 = new HashMap<String, SymbolState>();
        rules.put(26, state26);
        state26.put("BECOMES", new SymbolState(185));
        state91.put("VOLATILE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state63.put("RPAREN", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  3));
        state153.put("FINAL", new SymbolState(MEMBERDECL,  1));
        state108.put("SEMI", new SymbolState(50));
        state45.put("ID", new SymbolState(STATEMENT,  1));
        state49.put("BLOCKSTATEMENTS", new SymbolState(186));
        state159.put("FALSE", new SymbolState(58));
        state225.put("LBRACKET", new SymbolState(25));
        state80.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state16.put("COMMA", new SymbolState(LITERAL,  1));
        state37.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state43.put("DOUBLE", new SymbolState(EXPRESSION,  1));
        state115.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state17.put("DO", new SymbolState(LITERAL,  1));
        state30.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state168.put("CHAR", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state145.put("LBRACE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state199.put("FLOAT", new SymbolState(FORMALPARAMETERS,  4));
        state59.put("DOUBLE", new SymbolState(METHODDECL,  4));
        state90.put("SHORT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state180.put("LONG", new SymbolState(INTERFACEMEMBERDECL,  1));
        state16.put("CHAR_LITERAL", new SymbolState(LITERAL,  1));
        state49.put("LBRACE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state227.put("STATIC", new SymbolState(CLASSBODY,  3));
        state150.put("LONG", new SymbolState(11));
        state6.put("ID", new SymbolState(BASICTYPE,  1));
        state95.put("DOUBLE", new SymbolState(STATEMENT,  9));
        state64.put("LONG", new SymbolState(MODIFIER,  1));
        state94.put("QUALIFIEDIDENTIFIER", new SymbolState(187));
        state134.put("VARIABLEDECLARATORREST", new SymbolState(188));
        state70.put("TYPE", new SymbolState(189));
        state14.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state44.put("FINAL", new SymbolState(FIELDDECL,  5));
        state185.put("EXPRESSION", new SymbolState(190));
        state43.put("BOOLEAN", new SymbolState(EXPRESSION,  1));
        state228.put("CLASS", new SymbolState(CLASSDECLARATION,  3));
        state57.put("FALSE", new SymbolState(BLOCKSTATEMENT,  1));
        state85.put("INTEGERLITERAL", new SymbolState(17));
        state46.put("FALSE", new SymbolState(BOOLEANLITERAL,  1));
        state30.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state183.put("CLASS", new SymbolState(INTERFACEDECLARATION,  3));
        state105.put("IMPLEMENTS", new SymbolState(BRACKETSOPT,  0));
        state14.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state89.put("CHAR", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state37.put("FLOAT", new SymbolState(15));
        state183.put("EOF", new SymbolState(INTERFACEDECLARATION,  3));
        state102.put("VOID", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state105.put("BRACKETSOPT", new SymbolState(191));
        state226.put("BOOLEAN", new SymbolState(65));
        state69.put("SHORT", new SymbolState(STATEMENT,  1));
        state183.put("ABSTRACT", new SymbolState(INTERFACEDECLARATION,  3));
        state103.put("BYTE", new SymbolState(2));
        state207.put("CHAR", new SymbolState(5));
        state80.put("CLASS", new SymbolState(MODIFIER,  1));
        state115.put("PRIVATE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state153.put("BYTE", new SymbolState(MEMBERDECL,  1));
        state151.put("STR_LITERAL", new SymbolState(24));
        state10.put("STATIC", new SymbolState(N_MODIFIER_0,  2));
        state128.put("CLASS", new SymbolState(IMPORTDECLARATION,  6));
        state140.put("CHAR", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state78.put("LITERAL", new SymbolState(43));
        state3.put("ID", new SymbolState(192));
        state59.put("ABSTRACT", new SymbolState(METHODDECL,  4));
        state199.put("VOID", new SymbolState(FORMALPARAMETERS,  4));
        state129.put("RBRACE", new SymbolState(BLOCKSTATEMENTS,  1));
        state135.put("BOOLEAN", new SymbolState(STATEMENT,  3));
        state32.put("FALSE", new SymbolState(58));
        state89.put("PRIVATE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state70.put("BASICTYPE", new SymbolState(61));
        state136.put("N_COMMA_CONSTANTDECLARATOR_0", new SymbolState(193));
        state95.put("LBRACE", new SymbolState(STATEMENT,  9));
        state131.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        state27.put("FINAL", new SymbolState(STATEMENT,  1));
        state49.put("STR_LITERAL", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state135.put("DO", new SymbolState(STATEMENT,  3));
        state103.put("TYPE", new SymbolState(194));
        state175.put("CLASSDECLARATION", new SymbolState(195));
        state149.put("INTERFACE", new SymbolState(CLASSDECLARATION,  5));
        state6.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state29.put("SYNCHRONIZED", new SymbolState(TYPEDECLARATION,  1));
        state102.put("BOOLEAN", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        Map<String, SymbolState> state137 = new HashMap<String, SymbolState>();
        rules.put(137, state137);
        state137.put("COMMA", new SymbolState(N_COMMA_FORMALPARAMETER_0,  0));
        state16.put("RPAREN", new SymbolState(LITERAL,  1));
        state87.put("ABSTRACT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state60.put("VOID", new SymbolState(METHODDECL,  2));
        state33.put("RBRACE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state140.put("PUBLIC", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state23.put("LBRACE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state18 = new HashMap<String, SymbolState>();
        rules.put(18, state18);
        state18.put("ID", new SymbolState(196));
        state87.put("NATIVE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state117.put("PRIVATE", new SymbolState(CLASSBODYDECLARATION,  2));
        state40.put("VOID", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state140.put("STRICTFP", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state8.put("CHAR", new SymbolState(STATEMENT,  8));
        state30.put("ID", new SymbolState(MODIFIER,  1));
        state45.put("DOUBLE", new SymbolState(STATEMENT,  1));
        state143.put("BOOLEANLITERAL", new SymbolState(7));
        state32.put("SEMI", new SymbolState(45));
        state39.put("SEMI", new SymbolState(STATEMENT,  2));
        state197.put("FINAL", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state135.put("LONG", new SymbolState(STATEMENT,  3));
        state12.put("LONG", new SymbolState(INTEGERLITERAL,  1));
        state190.put("SEMI", new SymbolState(VARIABLEINITIALIZER,  1));
        state101.put("EXPRESSION", new SymbolState(34));
        state168.put("BYTE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state100.put("NATIVE", new SymbolState(MODIFIER,  1));
        state40.put("STRICTFP", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state105.put("ID", new SymbolState(BRACKETSOPT,  0));
        state6.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state170.put("DOUBLE", new SymbolState(N_MODIFIER_0,  0));
        state17.put("ID", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state222 = new HashMap<String, SymbolState>();
        rules.put(222, state222);
        state222.put("SEMI", new SymbolState(197));
        state199.put("ABSTRACT", new SymbolState(FORMALPARAMETERS,  4));
        state45.put("CHAR_LITERAL", new SymbolState(STATEMENT,  1));
        state135.put("CHAR", new SymbolState(STATEMENT,  3));
        state166.put("STRICTFP", new SymbolState(FIELDDECL,  5));
        state219.put("INT", new SymbolState(FORMALPARAMETERS,  2));
        state1.put("COMMA", new SymbolState(N_COMMA_TYPE_0,  0));
        state138.put("FINAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state48.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state98.put("BOOLEAN", new SymbolState(65));
        state48.put("SHORT", new SymbolState(MODIFIER,  1));
        state37.put("TYPE", new SymbolState(198));
        state28.put("RETURN", new SymbolState(LITERAL,  1));
        state64.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state215.put("STATIC", new SymbolState(IMPORTDECLARATION,  4));
        state84.put("LONG", new SymbolState(11));
        state204.put("RPAREN", new SymbolState(199));
        state62.put("VOLATILE", new SymbolState(METHODDECLARATORREST,  2));
        state174.put("METHODBODY", new SymbolState(200));
        state104.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state2.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state100.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state226.put("FLOAT", new SymbolState(15));
        state140.put("LONG", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state149.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  5));
        state0.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state27.put("BOOLEAN", new SymbolState(STATEMENT,  1));
        state50.put("STRICTFP", new SymbolState(METHODBODY,  1));
        state57.put("WHILE", new SymbolState(BLOCKSTATEMENT,  1));
        state17.put("STR_LITERAL", new SymbolState(LITERAL,  1));
        state19.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state78.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state168.put("PUBLIC", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state30.put("FLOAT", new SymbolState(MODIFIER,  1));
        state57.put("RBRACE", new SymbolState(BLOCKSTATEMENT,  1));
        state223.put("RETURN", new SymbolState(STATEMENT,  5));
        state181.put("RBRACE", new SymbolState(METHODBODY,  1));
        state178.put("INT", new SymbolState(STATEMENT,  3));
        state104.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state44.put("SEMI", new SymbolState(FIELDDECL,  5));
        state67.put("FLOAT", new SymbolState(15));
        state135.put("ID", new SymbolState(STATEMENT,  3));
        state17.put("WHILE", new SymbolState(LITERAL,  1));
        state80.put("CHAR", new SymbolState(MODIFIER,  1));
        state80.put("BYTE", new SymbolState(MODIFIER,  1));
        state59.put("BOOLEAN", new SymbolState(METHODDECL,  4));
        state178.put("NULL", new SymbolState(STATEMENT,  3));
        state90.put("VOLATILE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state62.put("LONG", new SymbolState(METHODDECLARATORREST,  2));
        state119.put("RPAREN", new SymbolState(N_COMMA_FORMALPARAMETER_0,  3));
        state147.put("COMMA", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  0));
        state19.put("SEMI", new SymbolState(MODIFIER,  1));
        state43.put("RBRACE", new SymbolState(EXPRESSION,  1));
        state219.put("NATIVE", new SymbolState(FORMALPARAMETERS,  2));
        state62.put("SEMI", new SymbolState(METHODDECLARATORREST,  2));
        state68.put("TYPE", new SymbolState(123));
        state207.put("SHORT", new SymbolState(42));
        state17.put("RBRACE", new SymbolState(LITERAL,  1));
        state148.put("LONG", new SymbolState(MODIFIER,  1));
        state168.put("VOID", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state175.put("INTERFACE", new SymbolState(201));
        state140.put("PROTECTED", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state226.put("DOUBLE", new SymbolState(6));
        state216.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state7.put("FLOAT", new SymbolState(LITERAL,  1));
        state23.put("COMMA", new SymbolState(BASICTYPE,  1));
        state129.put("WHILE", new SymbolState(35));
        state149.put("EOF", new SymbolState(CLASSDECLARATION,  5));
        state82.put("SHORT", new SymbolState(N_MODIFIER_0,  0));
        state43.put("SEMI", new SymbolState(EXPRESSION,  1));
        state69.put("DOUBLE", new SymbolState(STATEMENT,  1));
        state176.put("VOLATILE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state39.put("LONG", new SymbolState(STATEMENT,  2));
        state181.put("CHAR", new SymbolState(METHODBODY,  1));
        state10.put("FINAL", new SymbolState(N_MODIFIER_0,  2));
        state180.put("SHORT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state102.put("PROTECTED", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state104.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state100.put("CHAR", new SymbolState(MODIFIER,  1));
        state43.put("FINAL", new SymbolState(EXPRESSION,  1));
        state150.put("BASICTYPE", new SymbolState(61));
        state50.put("RBRACE", new SymbolState(METHODBODY,  1));
        state184.put("CHAR", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state100.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state148.put("CLASS", new SymbolState(MODIFIER,  1));
        state41.put("N_TYPEDECLARATION_0", new SymbolState(202));
        state68.put("INT", new SymbolState(23));
        state19.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state181.put("SYNCHRONIZED", new SymbolState(METHODBODY,  1));
        state37.put("BYTE", new SymbolState(2));
        state202.put("CLASS", new SymbolState(N_MODIFIER_0,  0));
        state69.put("BOOLEAN", new SymbolState(STATEMENT,  1));
        state177.put("LBRACE", new SymbolState(49));
        state94.put("ABSTRACT", new SymbolState(104));
        state19.put("LONG", new SymbolState(MODIFIER,  1));
        state45.put("CHAR", new SymbolState(STATEMENT,  1));
        state199.put("TRANSIENT", new SymbolState(FORMALPARAMETERS,  4));
        state140.put("SHORT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state33.put("BOOLEAN", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state117.put("SHORT", new SymbolState(CLASSBODYDECLARATION,  2));
        state117.put("INT", new SymbolState(CLASSBODYDECLARATION,  2));
        state41.put("PRIVATE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state49.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state207.put("BYTE", new SymbolState(2));
        state39.put("BYTE", new SymbolState(STATEMENT,  2));
        state140.put("DOUBLE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state84.put("INT", new SymbolState(23));
        state166.put("BYTE", new SymbolState(FIELDDECL,  5));
        state33.put("FINAL", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state47.put("PROTECTED", new SymbolState(INTERFACEDECLARATION,  5));
        state41.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  0));
        state154.put("METHODDECLARATORREST", new SymbolState(203));
        state32.put("BLOCK", new SymbolState(27));
        state142.put("VOID", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state28.put("LBRACE", new SymbolState(LITERAL,  1));
        state101.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state59.put("PROTECTED", new SymbolState(METHODDECL,  4));
        state184.put("NULL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state40.put("NATIVE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state137.put("N_COMMA_FORMALPARAMETER_0", new SymbolState(204));
        state64.put("SHORT", new SymbolState(MODIFIER,  1));
        state142.put("FLOAT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state91.put("STRICTFP", new SymbolState(N_TYPEDECLARATION_0,  2));
        state44.put("VOLATILE", new SymbolState(FIELDDECL,  5));
        state216.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state48.put("VOID", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state156 = new HashMap<String, SymbolState>();
        rules.put(156, state156);
        state156.put("RPAREN", new SymbolState(205));
        state12.put("BOOLEAN", new SymbolState(INTEGERLITERAL,  1));
        state173.put("VOLATILE", new SymbolState(TYPEDECLARATION,  2));
        state219.put("SHORT", new SymbolState(FORMALPARAMETERS,  2));
        state138.put("LONG", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        Map<String, SymbolState> state201 = new HashMap<String, SymbolState>();
        rules.put(201, state201);
        state201.put("ID", new SymbolState(206));
        state101.put("LBRACE", new SymbolState(49));
        state209.put("LBRACE", new SymbolState(BLOCKSTATEMENT,  1));
        state129.put("FINAL", new SymbolState(207));
        state223.put("INT", new SymbolState(STATEMENT,  5));
        state24.put("RBRACE", new SymbolState(LITERAL,  1));
        state121.put("FLOAT", new SymbolState(METHODDECL,  4));
        state203.put("ABSTRACT", new SymbolState(METHODDECL,  2));
        state150.put("FLOAT", new SymbolState(15));
        state180.put("PUBLIC", new SymbolState(INTERFACEMEMBERDECL,  1));
        state92.put("ID", new SymbolState(QUALIFIEDIDENTIFIER,  2));
        state89.put("DOUBLE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state50.put("VOID", new SymbolState(METHODBODY,  1));
        state200.put("BYTE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state76.put("DO", new SymbolState(BLOCK,  3));
        state102.put("INT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state45.put("DO", new SymbolState(STATEMENT,  1));
        state47.put("STRICTFP", new SymbolState(INTERFACEDECLARATION,  5));
        state225.put("INTERFACEMETHODDECLARATORREST", new SymbolState(208));
        state102.put("VOLATILE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state209.put("SEMI", new SymbolState(BLOCKSTATEMENT,  1));
        state184.put("TRUE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state143.put("TRUE", new SymbolState(46));
        state170.put("BYTE", new SymbolState(N_MODIFIER_0,  0));
        state37.put("FALSE", new SymbolState(58));
        state7.put("CHAR", new SymbolState(LITERAL,  1));
        state52.put("INTERFACE", new SymbolState(INTERFACEBODY,  3));
        state131.put("TRANSIENT", new SymbolState(MEMBERDECL,  1));
        state117.put("NATIVE", new SymbolState(CLASSBODYDECLARATION,  2));
        state177.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state60.put("SYNCHRONIZED", new SymbolState(METHODDECL,  2));
        state7.put("NULL", new SymbolState(LITERAL,  1));
        state45.put("TRUE", new SymbolState(STATEMENT,  1));
        state209.put("FOR", new SymbolState(BLOCKSTATEMENT,  1));
        state70.put("BYTE", new SymbolState(2));
        state145.put("RBRACE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state28.put("RBRACE", new SymbolState(LITERAL,  1));
        state27.put("LBRACE", new SymbolState(STATEMENT,  1));
        state24.put("ID", new SymbolState(LITERAL,  1));
        state159.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state129.put("STATEMENT", new SymbolState(209));
        state117.put("VOID", new SymbolState(CLASSBODYDECLARATION,  2));
        state45.put("STR_LITERAL", new SymbolState(STATEMENT,  1));
        state9.put("VARIABLEDECLARATORS", new SymbolState(210));
        state50.put("BOOLEAN", new SymbolState(METHODBODY,  1));
        state209.put("DOUBLE", new SymbolState(BLOCKSTATEMENT,  1));
        state95.put("RBRACE", new SymbolState(STATEMENT,  9));
        state140.put("NATIVE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state116.put("PUBLIC", new SymbolState(INTERFACEMEMBERDECL,  3));
        state151.put("CHAR_LITERAL", new SymbolState(28));
        state151.put("VARIABLEINITIALIZER", new SymbolState(211));
        state91.put("ABSTRACT", new SymbolState(N_TYPEDECLARATION_0,  2));
        state209.put("FINAL", new SymbolState(BLOCKSTATEMENT,  1));
        state19.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state41.put("VOLATILE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state223.put("CHAR", new SymbolState(STATEMENT,  5));
        state94.put("PROTECTED", new SymbolState(100));
        state43.put("DO", new SymbolState(EXPRESSION,  1));
        state137.put("RPAREN", new SymbolState(N_COMMA_FORMALPARAMETER_0,  0));
        state107.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state51.put("LBRACKET", new SymbolState(N_DOT_ID_0,  0));
        state31.put("IMPLEMENTS", new SymbolState(N_DOT_ID_0,  0));
        state14.put("FINAL", new SymbolState(MODIFIER,  1));
        state68.put("SHORT", new SymbolState(42));
        state62.put("BYTE", new SymbolState(METHODDECLARATORREST,  2));
        state36.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  7));
        state34.put("COMMA", new SymbolState(STATEMENTEXPRESSION,  1));
        state7.put("FOR", new SymbolState(LITERAL,  1));
        state100.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state178.put("WHILE", new SymbolState(STATEMENT,  3));
        state209.put("STR_LITERAL", new SymbolState(BLOCKSTATEMENT,  1));
        state24.put("DECIMAL_INTEGER_LITERAL", new SymbolState(LITERAL,  1));
        state168.put("ID", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state138.put("RETURN", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state159.put("LITERAL", new SymbolState(43));
        state44.put("STATIC", new SymbolState(FIELDDECL,  5));
        state121.put("TRANSIENT", new SymbolState(METHODDECL,  4));
        state73.put("INTERFACE", new SymbolState(CLASSDECLARATION,  5));
        state55.put("CHAR", new SymbolState(5));
        state33.put("ID", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state98.put("INT", new SymbolState(23));
        state76.put("TRANSIENT", new SymbolState(BLOCK,  3));
        state203.put("RBRACE", new SymbolState(METHODDECL,  2));
        state45.put("BYTE", new SymbolState(STATEMENT,  1));
        state207.put("LONG", new SymbolState(11));
        state129.put("RETURN", new SymbolState(22));
        state59.put("ID", new SymbolState(METHODDECL,  4));
        state135.put("TRUE", new SymbolState(STATEMENT,  3));
        state100.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state95.put("BOOLEAN", new SymbolState(STATEMENT,  9));
        state200.put("ID", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state152.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state197.put("BYTE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state140.put("STATIC", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state59.put("NATIVE", new SymbolState(METHODDECL,  4));
        state89.put("INT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state27.put("SEMI", new SymbolState(STATEMENT,  1));
        state180.put("DOUBLE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state133.put("DOUBLE", new SymbolState(6));
        state55.put("STRICTFP", new SymbolState(107));
        state202.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state145.put("BYTE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state58.put("LBRACE", new SymbolState(BOOLEANLITERAL,  1));
        state8.put("DECIMAL_INTEGER_LITERAL", new SymbolState(STATEMENT,  8));
        state143.put("RETURN", new SymbolState(22));
        state103.put("BASICTYPE", new SymbolState(61));
        state40.put("TRANSIENT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state52.put("SYNCHRONIZED", new SymbolState(INTERFACEBODY,  3));
        state176.put("PROTECTED", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state8.put("FINAL", new SymbolState(STATEMENT,  8));
        state148.put("BYTE", new SymbolState(MODIFIER,  1));
        state13.put("BECOMES", new SymbolState(151));
        state203.put("TRANSIENT", new SymbolState(METHODDECL,  2));
        state142.put("BYTE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state11.put("COMMA", new SymbolState(BASICTYPE,  1));
        state82.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state129.put("BLOCK", new SymbolState(27));
        state185.put("FALSE", new SymbolState(58));
        state135.put("FINAL", new SymbolState(STATEMENT,  3));
        state104.put("STATIC", new SymbolState(MODIFIER,  1));
        state24.put("DO", new SymbolState(LITERAL,  1));
        state48.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state32.put("DO", new SymbolState(101));
        state150.put("ID", new SymbolState(31));
        state40.put("ID", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state121.put("ID", new SymbolState(METHODDECL,  4));
        state197.put("RBRACE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state159.put("BOOLEANLITERAL", new SymbolState(7));
        state115.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state60.put("INT", new SymbolState(METHODDECL,  2));
        state89.put("STATIC", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state82.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state48.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state102.put("PUBLIC", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state131.put("VOLATILE", new SymbolState(MEMBERDECL,  1));
        state58.put("FINAL", new SymbolState(BOOLEANLITERAL,  1));
        state219.put("LONG", new SymbolState(FORMALPARAMETERS,  2));
        state100.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state28.put("DO", new SymbolState(LITERAL,  1));
        state101.put("STR_LITERAL", new SymbolState(24));
        state135.put("RBRACE", new SymbolState(STATEMENT,  3));
        state225.put("CONSTANTDECLARATORSREST", new SymbolState(212));
        state148.put("VOID", new SymbolState(MODIFIER,  1));
        state148.put("INT", new SymbolState(MODIFIER,  1));
        state142.put("STATIC", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state44.put("CHAR", new SymbolState(FIELDDECL,  5));
        state30.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state219.put("PROTECTED", new SymbolState(FORMALPARAMETERS,  2));
        state112.put("CHAR", new SymbolState(MODIFIER,  1));
        state141.put("BRACKETSOPT", new SymbolState(213));
        state107.put("FINAL", new SymbolState(MODIFIER,  1));
        state129.put("STATEMENTEXPRESSION", new SymbolState(69));
        state33.put("SHORT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state51.put("N_DOT_ID_0", new SymbolState(92));
        state58.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state181.put("TRANSIENT", new SymbolState(METHODBODY,  1));
        state135.put("CHAR_LITERAL", new SymbolState(STATEMENT,  3));
        state131.put("SYNCHRONIZED", new SymbolState(MEMBERDECL,  1));
        state73.put("NATIVE", new SymbolState(CLASSDECLARATION,  5));
        state198.put("VARIABLEDECLARATORS", new SymbolState(214));
        state170.put("VOID", new SymbolState(N_MODIFIER_0,  0));
        state166.put("FINAL", new SymbolState(FIELDDECL,  5));
        state39.put("INT", new SymbolState(STATEMENT,  2));
        state184.put("RETURN", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state50.put("SHORT", new SymbolState(METHODBODY,  1));
        state178.put("LBRACE", new SymbolState(STATEMENT,  3));
        state223.put("RBRACE", new SymbolState(STATEMENT,  5));
        state107.put("BYTE", new SymbolState(MODIFIER,  1));
        state153.put("SYNCHRONIZED", new SymbolState(MEMBERDECL,  1));
        state175.put("SYNCHRONIZED", new SymbolState(148));
        state5.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state116.put("DOUBLE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state145.put("CHAR", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state228.put("SEMI", new SymbolState(CLASSDECLARATION,  3));
        state24.put("WHILE", new SymbolState(LITERAL,  1));
        state43.put("DECIMAL_INTEGER_LITERAL", new SymbolState(EXPRESSION,  1));
        state133.put("BASICTYPE", new SymbolState(61));
        state85.put("FALSE", new SymbolState(58));
        state76.put("RBRACE", new SymbolState(BLOCK,  3));
        state205.put("WHILE", new SymbolState(PAREXPRESSION,  3));
        state84.put("SHORT", new SymbolState(42));
        state117.put("VOLATILE", new SymbolState(CLASSBODYDECLARATION,  2));
        state12.put("CHAR", new SymbolState(INTEGERLITERAL,  1));
        state55.put("NATIVE", new SymbolState(48));
        state170.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        state197.put("PUBLIC", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state184.put("LONG", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state103.put("FLOAT", new SymbolState(15));
        state203.put("BYTE", new SymbolState(METHODDECL,  2));
        state203.put("CHAR", new SymbolState(METHODDECL,  2));
        state82.put("LONG", new SymbolState(N_MODIFIER_0,  0));
        state48.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state158.put("SEMI", new SymbolState(215));
        state55.put("BASICTYPE", new SymbolState(61));
        state104.put("ID", new SymbolState(MODIFIER,  1));
        state171.put("PUBLIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state46.put("SHORT", new SymbolState(BOOLEANLITERAL,  1));
        state138.put("NULL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state76.put("SYNCHRONIZED", new SymbolState(BLOCK,  3));
        state180.put("BYTE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state27.put("SHORT", new SymbolState(STATEMENT,  1));
        state148.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state105.put("DOT", new SymbolState(109));
        state58.put("TRUE", new SymbolState(BOOLEANLITERAL,  1));
        state129.put("INTEGERLITERAL", new SymbolState(17));
        state223.put("SHORT", new SymbolState(STATEMENT,  5));
        state40.put("INT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state96.put("LPAREN", new SymbolState(68));
        state28.put("WHILE", new SymbolState(LITERAL,  1));
        state171.put("N_TYPEDECLARATION_0", new SymbolState(216));
        state142.put("TRANSIENT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state181.put("VOLATILE", new SymbolState(METHODBODY,  1));
        state12.put("LBRACE", new SymbolState(INTEGERLITERAL,  1));
        state46.put("WHILE", new SymbolState(BOOLEANLITERAL,  1));
        state94.put("FIELDDECL", new SymbolState(217));
        state153.put("VOLATILE", new SymbolState(MEMBERDECL,  1));
        state162.put("ID", new SymbolState(97));
        state36.put("NATIVE", new SymbolState(CLASSDECLARATION,  7));
        state104.put("FINAL", new SymbolState(MODIFIER,  1));
        state217.put("TRANSIENT", new SymbolState(MEMBERDECL,  1));
        state49.put("DO", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state131.put("STATIC", new SymbolState(MEMBERDECL,  1));
        state28.put("DOUBLE", new SymbolState(LITERAL,  1));
        state116.put("BYTE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state27.put("DOUBLE", new SymbolState(STATEMENT,  1));
        state58.put("RETURN", new SymbolState(BOOLEANLITERAL,  1));
        state46.put("FOR", new SymbolState(BOOLEANLITERAL,  1));
        state82.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        state176.put("LONG", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state68.put("LONG", new SymbolState(11));
        state195.put("INTERFACE", new SymbolState(TYPEDECLARATION,  2));
        state69.put("CHAR_LITERAL", new SymbolState(STATEMENT,  1));
        state47.put("TRANSIENT", new SymbolState(INTERFACEDECLARATION,  5));
        state85.put("NULL", new SymbolState(16));
        state131.put("BYTE", new SymbolState(MEMBERDECL,  1));
        state37.put("CHAR_LITERAL", new SymbolState(28));
        state171.put("PROTECTED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state112.put("LONG", new SymbolState(MODIFIER,  1));
        state101.put("LITERAL", new SymbolState(43));
        state166.put("FLOAT", new SymbolState(FIELDDECL,  5));
        state71.put("VARIABLEDECLARATORREST", new SymbolState(218));
        state108.put("BLOCK", new SymbolState(181));
        state10.put("INTERFACE", new SymbolState(N_MODIFIER_0,  2));
        state124.put("SEMI", new SymbolState(VARIABLEDECLARATORS,  2));
        state95.put("WHILE", new SymbolState(STATEMENT,  9));
        state195.put("ABSTRACT", new SymbolState(TYPEDECLARATION,  2));
        state33.put("NATIVE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state46.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BOOLEANLITERAL,  1));
        state101.put("BOOLEANLITERAL", new SymbolState(7));
        state17.put("BYTE", new SymbolState(LITERAL,  1));
        state149.put("SEMI", new SymbolState(CLASSDECLARATION,  5));
        state48.put("ID", new SymbolState(MODIFIER,  1));
        state76.put("ID", new SymbolState(BLOCK,  3));
        state138.put("FLOAT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state47.put("SYNCHRONIZED", new SymbolState(INTERFACEDECLARATION,  5));
        state228.put("EOF", new SymbolState(CLASSDECLARATION,  3));
        state68.put("RPAREN", new SymbolState(219));
        state225.put("FORMALPARAMETERS", new SymbolState(220));
        state72.put("VARIABLEDECLARATORS", new SymbolState(221));
        state69.put("FALSE", new SymbolState(STATEMENT,  1));
        state57.put("CHAR_LITERAL", new SymbolState(BLOCKSTATEMENT,  1));
        state43.put("STR_LITERAL", new SymbolState(EXPRESSION,  1));
        state148.put("SEMI", new SymbolState(MODIFIER,  1));
        state143.put("FOR", new SymbolState(54));
        state104.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state40.put("STATIC", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state195.put("PRIVATE", new SymbolState(TYPEDECLARATION,  2));
        state27.put("RBRACE", new SymbolState(STATEMENT,  1));
        state208.put("SHORT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state142.put("SYNCHRONIZED", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state148.put("FINAL", new SymbolState(MODIFIER,  1));
        state16.put("BYTE", new SymbolState(LITERAL,  1));
        state19.put("INT", new SymbolState(MODIFIER,  1));
        state151.put("LITERAL", new SymbolState(43));
        state7.put("BYTE", new SymbolState(LITERAL,  1));
        state55.put("BOOLEAN", new SymbolState(65));
        state39.put("FLOAT", new SymbolState(STATEMENT,  2));
        state133.put("INT", new SymbolState(23));
        state10.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  2));
        state82.put("ID", new SymbolState(N_MODIFIER_0,  0));
        state128.put("FINAL", new SymbolState(IMPORTDECLARATION,  6));
        state195.put("EOF", new SymbolState(TYPEDECLARATION,  2));
        state97.put("DOT", new SymbolState(N_DOT_ID_0,  3));
        state27.put("INT", new SymbolState(STATEMENT,  1));
        state180.put("STATIC", new SymbolState(INTERFACEMEMBERDECL,  1));
        state58.put("ID", new SymbolState(BOOLEANLITERAL,  1));
        state129.put("TRUE", new SymbolState(46));
        state138.put("ID", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state59.put("SHORT", new SymbolState(METHODDECL,  4));
        state73.put("STATIC", new SymbolState(CLASSDECLARATION,  5));
        state45.put("RETURN", new SymbolState(STATEMENT,  1));
        state152.put("BOOLEANLITERAL", new SymbolState(7));
        state220.put("BRACKETSOPT", new SymbolState(222));
        state40.put("BOOLEAN", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state36.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  7));
        state34.put("FLOAT", new SymbolState(STATEMENTEXPRESSION,  1));
        state95.put("FINAL", new SymbolState(STATEMENT,  9));
        state40.put("PUBLIC", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state50.put("FLOAT", new SymbolState(METHODBODY,  1));
        state207.put("FLOAT", new SymbolState(15));
        state45.put("RBRACE", new SymbolState(STATEMENT,  1));
        state24.put("SEMI", new SymbolState(LITERAL,  1));
        state22.put("LITERAL", new SymbolState(43));
        state92.put("LBRACKET", new SymbolState(QUALIFIEDIDENTIFIER,  2));
        state133.put("BYTE", new SymbolState(2));
        state27.put("RETURN", new SymbolState(STATEMENT,  1));
        state90.put("LONG", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state44.put("LONG", new SymbolState(FIELDDECL,  5));
        state19.put("NATIVE", new SymbolState(MODIFIER,  1));
        state34.put("DOUBLE", new SymbolState(STATEMENTEXPRESSION,  1));
        state6.put("COMMA", new SymbolState(BASICTYPE,  1));
        state211.put("COMMA", new SymbolState(VARIABLEDECLARATORREST,  2));
        state64.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state15.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state155 = new HashMap<String, SymbolState>();
        rules.put(155, state155);
        state155.put("SEMI", new SymbolState(223));
        state151.put("INTEGERLITERAL", new SymbolState(17));
        state166.put("SYNCHRONIZED", new SymbolState(FIELDDECL,  5));
        state107.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state50.put("TRANSIENT", new SymbolState(METHODBODY,  1));
        state37.put("BOOLEANLITERAL", new SymbolState(7));
        state153.put("ID", new SymbolState(MEMBERDECL,  1));
        state175.put("PROTECTED", new SymbolState(100));
        state33.put("STATIC", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state195.put("TRANSIENT", new SymbolState(TYPEDECLARATION,  2));
        state91.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  2));
        state82.put("FLOAT", new SymbolState(N_MODIFIER_0,  0));
        state151.put("EXPRESSION", new SymbolState(190));
        state117.put("FLOAT", new SymbolState(CLASSBODYDECLARATION,  2));
        state27.put("DO", new SymbolState(STATEMENT,  1));
        state112.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state202.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state62.put("TRANSIENT", new SymbolState(METHODDECLARATORREST,  2));
        state161.put("COMMA", new SymbolState(N_COMMA_VARIABLEDECLARATOR_0,  3));
        state59.put("RBRACE", new SymbolState(METHODDECL,  4));
        state181.put("FINAL", new SymbolState(METHODBODY,  1));
        state28.put("STR_LITERAL", new SymbolState(LITERAL,  1));
        state70.put("INT", new SymbolState(23));
        state202.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state228.put("STRICTFP", new SymbolState(CLASSDECLARATION,  3));
        state76.put("SEMI", new SymbolState(BLOCK,  3));
        state63.put("COMMA", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  3));
        state8.put("FOR", new SymbolState(STATEMENT,  8));
        state64.put("INT", new SymbolState(MODIFIER,  1));
        state149.put("STRICTFP", new SymbolState(CLASSDECLARATION,  5));
        state169.put("COMMA", new SymbolState(CONSTANTDECLARATOR,  2));
        state197.put("ID", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state200.put("FINAL", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state84.put("FLOAT", new SymbolState(15));
        state142.put("PRIVATE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state78.put("STATEMENTEXPRESSION", new SymbolState(147));
        state28.put("SEMI", new SymbolState(LITERAL,  1));
        state73.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  5));
        state76.put("FALSE", new SymbolState(BLOCK,  3));
        state32.put("TRUE", new SymbolState(46));
        state13.put("VARIABLEDECLARATORREST", new SymbolState(224));
        state44.put("SYNCHRONIZED", new SymbolState(FIELDDECL,  5));
        state197.put("STATIC", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state148.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state33.put("ABSTRACT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state138.put("DO", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state40.put("FINAL", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state115.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state177.put("STR_LITERAL", new SymbolState(24));
        state58.put("DO", new SymbolState(BOOLEANLITERAL,  1));
        state209.put("TRUE", new SymbolState(BLOCKSTATEMENT,  1));
        state89.put("PUBLIC", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state208.put("PROTECTED", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state217.put("FINAL", new SymbolState(MEMBERDECL,  1));
        state171.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  0));
        state90.put("TRANSIENT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        Map<String, SymbolState> state125 = new HashMap<String, SymbolState>();
        rules.put(125, state125);
        state125.put("ID", new SymbolState(225));
        state5.put("COMMA", new SymbolState(BASICTYPE,  1));
        state142.put("VOLATILE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state133.put("CHAR", new SymbolState(5));
        state172.put("INTEGERLITERAL", new SymbolState(17));
        state64.put("NATIVE", new SymbolState(MODIFIER,  1));
        state197.put("SEMI", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state206.put("EXTENDS", new SymbolState(226));
        state178.put("SHORT", new SymbolState(STATEMENT,  3));
        state64.put("CLASS", new SymbolState(MODIFIER,  1));
        state91.put("PROTECTED", new SymbolState(N_TYPEDECLARATION_0,  2));
        state12.put("NULL", new SymbolState(INTEGERLITERAL,  1));
        state180.put("CHAR", new SymbolState(INTERFACEMEMBERDECL,  1));
        state33.put("PUBLIC", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state148.put("ID", new SymbolState(MODIFIER,  1));
        state65.put("COMMA", new SymbolState(BASICTYPE,  1));
        state31.put("COMMA", new SymbolState(N_DOT_ID_0,  0));
        state95.put("FOR", new SymbolState(STATEMENT,  9));
        state170.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state140.put("BOOLEAN", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state40.put("DOUBLE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state181.put("ID", new SymbolState(METHODBODY,  1));
        state171.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  0));
        state217.put("PROTECTED", new SymbolState(MEMBERDECL,  1));
        state55.put("SHORT", new SymbolState(42));
        state166.put("ID", new SymbolState(FIELDDECL,  5));
        state121.put("PRIVATE", new SymbolState(METHODDECL,  4));
        state16.put("RETURN", new SymbolState(LITERAL,  1));
        state150.put("BYTE", new SymbolState(2));
        state82.put("RBRACE", new SymbolState(227));
        state112.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state173.put("TRANSIENT", new SymbolState(TYPEDECLARATION,  2));
        state69.put("TRUE", new SymbolState(STATEMENT,  1));
        state196.put("CLASSBODY", new SymbolState(228));
        state10.put("NATIVE", new SymbolState(N_MODIFIER_0,  2));
        state27.put("ID", new SymbolState(STATEMENT,  1));
        state80.put("FLOAT", new SymbolState(MODIFIER,  1));
        state64.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state41.put("NATIVE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state46.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state22.put("DECIMAL_INTEGER_LITERAL", new SymbolState(12));
        state170.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state102.put("FINAL", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state44.put("STRICTFP", new SymbolState(FIELDDECL,  5));
        state170.put("FLOAT", new SymbolState(N_MODIFIER_0,  0));
        state100.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state207.put("BASICTYPE", new SymbolState(61));
        state134.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  0));
        state151.put("FALSE", new SymbolState(58));
        state127.put("LBRACE", new SymbolState(33));
        state209.put("SHORT", new SymbolState(BLOCKSTATEMENT,  1));
        state138.put("TRUE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state140.put("SYNCHRONIZED", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state223.put("CHAR_LITERAL", new SymbolState(STATEMENT,  5));
        state64.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state19.put("STATIC", new SymbolState(MODIFIER,  1));
        state40.put("FLOAT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        return rules;
    }
}
