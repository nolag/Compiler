//This file is automatically generated do not modify by hand.
package cs444.parser;

import java.util.HashMap;
import java.util.Map;

import cs444.parser.IParserRule;
import cs444.parser.symbols.SymbolState;
import cs444.parser.symbols.factories.NonTerminalFactory;
public class JoosDFA implements IParserRule{
    public Map<Integer, Map<String, SymbolState>> getRules() {
        
        Map<Integer, Map<String, SymbolState>> rules = new HashMap<Integer, Map<String, SymbolState>>();
        NonTerminalFactory MORESTATEMENTEXPRESSIONS = new NonTerminalFactory("MORESTATEMENTEXPRESSIONS");
        NonTerminalFactory N_CLASSBODYDECLARATION_0 = new NonTerminalFactory("N_CLASSBODYDECLARATION_0");
        NonTerminalFactory N_DOT_IDENTIFIER_0 = new NonTerminalFactory("N_DOT_IDENTIFIER_0");
        NonTerminalFactory INFIXOP = new NonTerminalFactory("INFIXOP");
        NonTerminalFactory N_COMMA_CONSTANTDECLARATOR_0 = new NonTerminalFactory("N_COMMA_CONSTANTDECLARATOR_0");
        NonTerminalFactory INTEGERLITERAL = new NonTerminalFactory("INTEGERLITERAL");
        NonTerminalFactory QUALIFIEDIDENTIFIERLIST = new NonTerminalFactory("QUALIFIEDIDENTIFIERLIST");
        NonTerminalFactory CREATOR = new NonTerminalFactory("CREATOR");
        NonTerminalFactory N_COMMA_VARIABLEDECLARATOR_0 = new NonTerminalFactory("N_COMMA_VARIABLEDECLARATOR_0");
        NonTerminalFactory CLASSBODY = new NonTerminalFactory("CLASSBODY");
        NonTerminalFactory BOOLEANLITERAL = new NonTerminalFactory("BOOLEANLITERAL");
        NonTerminalFactory FORMALPARAMETERS = new NonTerminalFactory("FORMALPARAMETERS");
        NonTerminalFactory N_COMMA_TYPE_0 = new NonTerminalFactory("N_COMMA_TYPE_0");
        NonTerminalFactory CONSTANTDECLARATORREST = new NonTerminalFactory("CONSTANTDECLARATORREST");
        NonTerminalFactory N_COMMA_QUALIFIEDIDENTIFIER_0 = new NonTerminalFactory("N_COMMA_QUALIFIEDIDENTIFIER_0");
        NonTerminalFactory METHODDECLARATORREST = new NonTerminalFactory("METHODDECLARATORREST");
        NonTerminalFactory METHODORFIELDDECL = new NonTerminalFactory("METHODORFIELDDECL");
        NonTerminalFactory INTERFACEMETHODORFIELDDECL = new NonTerminalFactory("INTERFACEMETHODORFIELDDECL");
        NonTerminalFactory BRACKETSOPT = new NonTerminalFactory("BRACKETSOPT");
        NonTerminalFactory STATEMENT = new NonTerminalFactory("STATEMENT");
        NonTerminalFactory MODIFIER = new NonTerminalFactory("MODIFIER");
        NonTerminalFactory ARRAYCREATORREST = new NonTerminalFactory("ARRAYCREATORREST");
        NonTerminalFactory FORMALPARAMETER = new NonTerminalFactory("FORMALPARAMETER");
        NonTerminalFactory N_COMMA_FORMALPARAMETER_0 = new NonTerminalFactory("N_COMMA_FORMALPARAMETER_0");
        NonTerminalFactory TYPE = new NonTerminalFactory("TYPE");
        NonTerminalFactory N_COMMA_EXPRESSION_0 = new NonTerminalFactory("N_COMMA_EXPRESSION_0");
        NonTerminalFactory MODIFIERS = new NonTerminalFactory("MODIFIERS");
        NonTerminalFactory MEMBERDECL = new NonTerminalFactory("MEMBERDECL");
        NonTerminalFactory TYPEDECLARATIONWITHOUTMODIFIERS = new NonTerminalFactory("TYPEDECLARATIONWITHOUTMODIFIERS");
        NonTerminalFactory SELECTOR = new NonTerminalFactory("SELECTOR");
        NonTerminalFactory VARIABLEINITIALIZER = new NonTerminalFactory("VARIABLEINITIALIZER");
        NonTerminalFactory N_COMMA_STATEMENTEXPRESSION_0 = new NonTerminalFactory("N_COMMA_STATEMENTEXPRESSION_0");
        NonTerminalFactory CONSTANTDECLARATOR = new NonTerminalFactory("CONSTANTDECLARATOR");
        NonTerminalFactory ASSIGNMENTOPERATOR = new NonTerminalFactory("ASSIGNMENTOPERATOR");
        NonTerminalFactory N_SELECTOR_0 = new NonTerminalFactory("N_SELECTOR_0");
        NonTerminalFactory CONSTRUCTORDECLARATORREST = new NonTerminalFactory("CONSTRUCTORDECLARATORREST");
        NonTerminalFactory METHODORFIELDREST = new NonTerminalFactory("METHODORFIELDREST");
        NonTerminalFactory IDENTIFIER = new NonTerminalFactory("IDENTIFIER");
        NonTerminalFactory VARIABLEDECLARATORSREST = new NonTerminalFactory("VARIABLEDECLARATORSREST");
        NonTerminalFactory TYPELIST = new NonTerminalFactory("TYPELIST");
        NonTerminalFactory VARIABLEDECLARATORS = new NonTerminalFactory("VARIABLEDECLARATORS");
        NonTerminalFactory BASICTYPE = new NonTerminalFactory("BASICTYPE");
        NonTerminalFactory INTERFACEMETHODORFIELDREST = new NonTerminalFactory("INTERFACEMETHODORFIELDREST");
        NonTerminalFactory STATEMENTEXPRESSION = new NonTerminalFactory("STATEMENTEXPRESSION");
        NonTerminalFactory N_INTERFACEBODYDECLARATION_0 = new NonTerminalFactory("N_INTERFACEBODYDECLARATION_0");
        NonTerminalFactory EXPRESSION = new NonTerminalFactory("EXPRESSION");
        NonTerminalFactory COMPILATIONUNIT = new NonTerminalFactory("COMPILATIONUNIT");
        NonTerminalFactory VOIDMETHODDECLARATORREST = new NonTerminalFactory("VOIDMETHODDECLARATORREST");
        NonTerminalFactory INTERFACEDECLARATION = new NonTerminalFactory("INTERFACEDECLARATION");
        NonTerminalFactory CLASSBODYDECLARATION = new NonTerminalFactory("CLASSBODYDECLARATION");
        NonTerminalFactory CONSTANTEXPRESSION = new NonTerminalFactory("CONSTANTEXPRESSION");
        NonTerminalFactory FORUPDATE = new NonTerminalFactory("FORUPDATE");
        NonTerminalFactory CLASSDECLARATION = new NonTerminalFactory("CLASSDECLARATION");
        NonTerminalFactory VARIABLEDECLARATORID = new NonTerminalFactory("VARIABLEDECLARATORID");
        NonTerminalFactory ARGUMENTS = new NonTerminalFactory("ARGUMENTS");
        NonTerminalFactory FORINIT = new NonTerminalFactory("FORINIT");
        NonTerminalFactory METHODBODY = new NonTerminalFactory("METHODBODY");
        NonTerminalFactory QUALIFIEDIDENTIFIER = new NonTerminalFactory("QUALIFIEDIDENTIFIER");
        NonTerminalFactory N_TYPEDECLARATION_0 = new NonTerminalFactory("N_TYPEDECLARATION_0");
        NonTerminalFactory N_LBRACKET_RBRACKET_0 = new NonTerminalFactory("N_LBRACKET_RBRACKET_0");
        NonTerminalFactory IDENTIFIERSUFFIX = new NonTerminalFactory("IDENTIFIERSUFFIX");
        NonTerminalFactory N_BLOCKSTATEMENT_0 = new NonTerminalFactory("N_BLOCKSTATEMENT_0");
        NonTerminalFactory LOCALVARIABLEDECLARATIONSTATEMENT = new NonTerminalFactory("LOCALVARIABLEDECLARATIONSTATEMENT");
        NonTerminalFactory INTERFACEMETHODDECLARATORREST = new NonTerminalFactory("INTERFACEMETHODDECLARATORREST");
        NonTerminalFactory TYPEDECLARATION = new NonTerminalFactory("TYPEDECLARATION");
        NonTerminalFactory LITERAL = new NonTerminalFactory("LITERAL");
        NonTerminalFactory PRIMARY = new NonTerminalFactory("PRIMARY");
        NonTerminalFactory S = new NonTerminalFactory("S");
        NonTerminalFactory INTERFACEBODY = new NonTerminalFactory("INTERFACEBODY");
        NonTerminalFactory ARGUMENTSOPT = new NonTerminalFactory("ARGUMENTSOPT");
        NonTerminalFactory TYPEDECLARATIONWITHMODIFIERS = new NonTerminalFactory("TYPEDECLARATIONWITHMODIFIERS");
        NonTerminalFactory INTERFACEBODYDECLARATION = new NonTerminalFactory("INTERFACEBODYDECLARATION");
        NonTerminalFactory N_MODIFIER_0 = new NonTerminalFactory("N_MODIFIER_0");
        NonTerminalFactory BLOCKSTATEMENTS = new NonTerminalFactory("BLOCKSTATEMENTS");
        NonTerminalFactory CONSTANTDECLARATORSREST = new NonTerminalFactory("CONSTANTDECLARATORSREST");
        NonTerminalFactory PREFIXOP = new NonTerminalFactory("PREFIXOP");
        NonTerminalFactory EXPRESSION2REST = new NonTerminalFactory("EXPRESSION2REST");
        NonTerminalFactory BLOCK = new NonTerminalFactory("BLOCK");
        NonTerminalFactory BLOCKSTATEMENT = new NonTerminalFactory("BLOCKSTATEMENT");
        NonTerminalFactory VARIABLEDECLARATORREST = new NonTerminalFactory("VARIABLEDECLARATORREST");
        NonTerminalFactory N_IMPORTDECLARATION_0 = new NonTerminalFactory("N_IMPORTDECLARATION_0");
        NonTerminalFactory MODIFIERSOPT = new NonTerminalFactory("MODIFIERSOPT");
        NonTerminalFactory VOIDINTERFACEMETHODDECLARATORREST = new NonTerminalFactory("VOIDINTERFACEMETHODDECLARATORREST");
        NonTerminalFactory EXPRESSION1 = new NonTerminalFactory("EXPRESSION1");
        NonTerminalFactory INTERFACEMEMBERDECL = new NonTerminalFactory("INTERFACEMEMBERDECL");
        NonTerminalFactory IMPORTDECLARATION = new NonTerminalFactory("IMPORTDECLARATION");
        NonTerminalFactory PAREXPRESSION = new NonTerminalFactory("PAREXPRESSION");
        NonTerminalFactory EXPRESSION3 = new NonTerminalFactory("EXPRESSION3");
        NonTerminalFactory CLASSCREATORREST = new NonTerminalFactory("CLASSCREATORREST");
        NonTerminalFactory VARIABLEDECLARATOR = new NonTerminalFactory("VARIABLEDECLARATOR");
        NonTerminalFactory EXPRESSION2 = new NonTerminalFactory("EXPRESSION2");
        
        Map<String, SymbolState> state30 = new HashMap<String, SymbolState>();
        rules.put(30, state30);
        state30.put("BYTE", new SymbolState(1));
        Map<String, SymbolState> state190 = new HashMap<String, SymbolState>();
        rules.put(190, state190);
        state190.put("RBRACKET", new SymbolState(2));
        Map<String, SymbolState> state445 = new HashMap<String, SymbolState>();
        rules.put(445, state445);
        state445.put("PRIMARY", new SymbolState(3));
        Map<String, SymbolState> state475 = new HashMap<String, SymbolState>();
        rules.put(475, state475);
        state475.put("SELECTOR", new SymbolState(4));
        Map<String, SymbolState> state182 = new HashMap<String, SymbolState>();
        rules.put(182, state182);
        state182.put("TYPE", new SymbolState(5));
        Map<String, SymbolState> state109 = new HashMap<String, SymbolState>();
        rules.put(109, state109);
        state109.put("INT", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state1 = new HashMap<String, SymbolState>();
        rules.put(1, state1);
        state1.put("FALSE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state447 = new HashMap<String, SymbolState>();
        rules.put(447, state447);
        state447.put("SHORT", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state304 = new HashMap<String, SymbolState>();
        rules.put(304, state304);
        state304.put("DOT", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state230 = new HashMap<String, SymbolState>();
        rules.put(230, state230);
        state230.put("BYTE", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state134 = new HashMap<String, SymbolState>();
        rules.put(134, state134);
        state134.put("LONG", new SymbolState(6));
        Map<String, SymbolState> state294 = new HashMap<String, SymbolState>();
        rules.put(294, state294);
        state294.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state563 = new HashMap<String, SymbolState>();
        rules.put(563, state563);
        state563.put("BYTE", new SymbolState(VARIABLEDECLARATORREST,  3));
        Map<String, SymbolState> state18 = new HashMap<String, SymbolState>();
        rules.put(18, state18);
        state18.put("RPAREN", new SymbolState(TYPE,  1));
        Map<String, SymbolState> state306 = new HashMap<String, SymbolState>();
        rules.put(306, state306);
        state306.put("INT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state56 = new HashMap<String, SymbolState>();
        rules.put(56, state56);
        state56.put("NULL", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state275 = new HashMap<String, SymbolState>();
        rules.put(275, state275);
        state275.put("FLOAT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state479 = new HashMap<String, SymbolState>();
        rules.put(479, state479);
        state479.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state155 = new HashMap<String, SymbolState>();
        rules.put(155, state155);
        state155.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state581 = new HashMap<String, SymbolState>();
        rules.put(581, state581);
        state581.put("RPAREN", new SymbolState(7));
        Map<String, SymbolState> state158 = new HashMap<String, SymbolState>();
        rules.put(158, state158);
        state158.put("FLOAT", new SymbolState(8));
        Map<String, SymbolState> state478 = new HashMap<String, SymbolState>();
        rules.put(478, state478);
        state478.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state579 = new HashMap<String, SymbolState>();
        rules.put(579, state579);
        state579.put("BYTE", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state224 = new HashMap<String, SymbolState>();
        rules.put(224, state224);
        state224.put("BYTE", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state605 = new HashMap<String, SymbolState>();
        rules.put(605, state605);
        state605.put("SHORT", new SymbolState(9));
        state563.put("SHORT", new SymbolState(VARIABLEDECLARATORREST,  3));
        Map<String, SymbolState> state5 = new HashMap<String, SymbolState>();
        rules.put(5, state5);
        state5.put("MINUS", new SymbolState(10));
        Map<String, SymbolState> state41 = new HashMap<String, SymbolState>();
        rules.put(41, state41);
        state41.put("NULL", new SymbolState(11));
        Map<String, SymbolState> state21 = new HashMap<String, SymbolState>();
        rules.put(21, state21);
        state21.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state31 = new HashMap<String, SymbolState>();
        rules.put(31, state31);
        state31.put("TRUE", new SymbolState(12));
        Map<String, SymbolState> state362 = new HashMap<String, SymbolState>();
        rules.put(362, state362);
        state362.put("EXPRESSION2REST", new SymbolState(13));
        Map<String, SymbolState> state430 = new HashMap<String, SymbolState>();
        rules.put(430, state430);
        state430.put("LPAREN", new SymbolState(14));
        Map<String, SymbolState> state78 = new HashMap<String, SymbolState>();
        rules.put(78, state78);
        state78.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state116 = new HashMap<String, SymbolState>();
        rules.put(116, state116);
        state116.put("CLASS", new SymbolState(TYPEDECLARATION,  1));
        Map<String, SymbolState> state607 = new HashMap<String, SymbolState>();
        rules.put(607, state607);
        state607.put("RPAREN", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state121 = new HashMap<String, SymbolState>();
        rules.put(121, state121);
        state121.put("FINAL", new SymbolState(15));
        Map<String, SymbolState> state466 = new HashMap<String, SymbolState>();
        rules.put(466, state466);
        state466.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state14 = new HashMap<String, SymbolState>();
        rules.put(14, state14);
        state14.put("NULL", new SymbolState(16));
        Map<String, SymbolState> state517 = new HashMap<String, SymbolState>();
        rules.put(517, state517);
        state517.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state255 = new HashMap<String, SymbolState>();
        rules.put(255, state255);
        state255.put("LBRACKET", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state226 = new HashMap<String, SymbolState>();
        rules.put(226, state226);
        state226.put("LBRACKET", new SymbolState(ARGUMENTS,  2));
        Map<String, SymbolState> state420 = new HashMap<String, SymbolState>();
        rules.put(420, state420);
        state420.put("STRICTFP", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state81 = new HashMap<String, SymbolState>();
        rules.put(81, state81);
        state81.put("TRUE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state26 = new HashMap<String, SymbolState>();
        rules.put(26, state26);
        state26.put("EXCLAMATION", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state81.put("SHORT", new SymbolState(BASICTYPE,  1));
        state445.put("DOUBLE", new SymbolState(17));
        state466.put("BECOMES", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state527 = new HashMap<String, SymbolState>();
        rules.put(527, state527);
        state527.put("BASICTYPE", new SymbolState(18));
        Map<String, SymbolState> state562 = new HashMap<String, SymbolState>();
        rules.put(562, state562);
        state562.put("ID", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state23 = new HashMap<String, SymbolState>();
        rules.put(23, state23);
        state23.put("SEMI", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state193 = new HashMap<String, SymbolState>();
        rules.put(193, state193);
        state193.put("LBRACKET", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state256 = new HashMap<String, SymbolState>();
        rules.put(256, state256);
        state256.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state291 = new HashMap<String, SymbolState>();
        rules.put(291, state291);
        state291.put("SEMI", new SymbolState(19));
        Map<String, SymbolState> state394 = new HashMap<String, SymbolState>();
        rules.put(394, state394);
        state394.put("DOUBLE", new SymbolState(EXPRESSION1,  1));
        Map<String, SymbolState> state50 = new HashMap<String, SymbolState>();
        rules.put(50, state50);
        state50.put("SHORT", new SymbolState(20));
        state445.put("FALSE", new SymbolState(21));
        Map<String, SymbolState> state401 = new HashMap<String, SymbolState>();
        rules.put(401, state401);
        state401.put("LBRACKET", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state126 = new HashMap<String, SymbolState>();
        rules.put(126, state126);
        state126.put("SEMI", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state479.put("N_LBRACKET_RBRACKET_0", new SymbolState(22));
        Map<String, SymbolState> state611 = new HashMap<String, SymbolState>();
        rules.put(611, state611);
        state611.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state466.put("ID", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state555 = new HashMap<String, SymbolState>();
        rules.put(555, state555);
        state555.put("SEMI", new SymbolState(INTERFACEDECLARATION,  5));
        Map<String, SymbolState> state6 = new HashMap<String, SymbolState>();
        rules.put(6, state6);
        state6.put("ID", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state140 = new HashMap<String, SymbolState>();
        rules.put(140, state140);
        state140.put("FALSE", new SymbolState(23));
        Map<String, SymbolState> state389 = new HashMap<String, SymbolState>();
        rules.put(389, state389);
        state389.put("N_LBRACKET_RBRACKET_0", new SymbolState(24));
        Map<String, SymbolState> state253 = new HashMap<String, SymbolState>();
        rules.put(253, state253);
        state253.put("SEMI", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state539 = new HashMap<String, SymbolState>();
        rules.put(539, state539);
        state539.put("DOT", new SymbolState(25));
        Map<String, SymbolState> state440 = new HashMap<String, SymbolState>();
        rules.put(440, state440);
        state440.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state54 = new HashMap<String, SymbolState>();
        rules.put(54, state54);
        state54.put("IDENTIFIER", new SymbolState(26));
        Map<String, SymbolState> state252 = new HashMap<String, SymbolState>();
        rules.put(252, state252);
        state252.put("BOOLEAN", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        Map<String, SymbolState> state369 = new HashMap<String, SymbolState>();
        rules.put(369, state369);
        state369.put("PLUS", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state8 = new HashMap<String, SymbolState>();
        rules.put(8, state8);
        state8.put("FALSE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state234 = new HashMap<String, SymbolState>();
        rules.put(234, state234);
        state234.put("SEMI", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state387 = new HashMap<String, SymbolState>();
        rules.put(387, state387);
        state387.put("LBRACKET", new SymbolState(27));
        Map<String, SymbolState> state353 = new HashMap<String, SymbolState>();
        rules.put(353, state353);
        state353.put("CHAR", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state521 = new HashMap<String, SymbolState>();
        rules.put(521, state521);
        state521.put("SEMI", new SymbolState(28));
        Map<String, SymbolState> state472 = new HashMap<String, SymbolState>();
        rules.put(472, state472);
        state472.put("RBRACKET", new SymbolState(EXPRESSION,  3));
        Map<String, SymbolState> state243 = new HashMap<String, SymbolState>();
        rules.put(243, state243);
        state243.put("STATIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state510 = new HashMap<String, SymbolState>();
        rules.put(510, state510);
        state510.put("CHAR", new SymbolState(29));
        Map<String, SymbolState> state58 = new HashMap<String, SymbolState>();
        rules.put(58, state58);
        state58.put("CHAR", new SymbolState(MODIFIER,  1));
        state182.put("LPAREN", new SymbolState(30));
        state140.put("LPAREN", new SymbolState(31));
        Map<String, SymbolState> state514 = new HashMap<String, SymbolState>();
        rules.put(514, state514);
        state514.put("TRANSIENT", new SymbolState(MODIFIERS,  2));
        Map<String, SymbolState> state396 = new HashMap<String, SymbolState>();
        rules.put(396, state396);
        state396.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state563.put("LONG", new SymbolState(VARIABLEDECLARATORREST,  3));
        state21.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state96 = new HashMap<String, SymbolState>();
        rules.put(96, state96);
        state96.put("COMMA", new SymbolState(32));
        Map<String, SymbolState> state268 = new HashMap<String, SymbolState>();
        rules.put(268, state268);
        state268.put("IDENTIFIER", new SymbolState(33));
        Map<String, SymbolState> state177 = new HashMap<String, SymbolState>();
        rules.put(177, state177);
        state177.put("LBRACKET", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state576 = new HashMap<String, SymbolState>();
        rules.put(576, state576);
        state576.put("INSTANCEOF", new SymbolState(PAREXPRESSION,  3));
        state579.put("CHAR", new SymbolState(TYPE,  3));
        state387.put("DOT", new SymbolState(34));
        Map<String, SymbolState> state0 = new HashMap<String, SymbolState>();
        rules.put(0, state0);
        state0.put("COMPILATIONUNIT", new SymbolState(35));
        Map<String, SymbolState> state251 = new HashMap<String, SymbolState>();
        rules.put(251, state251);
        state251.put("TRUE", new SymbolState(36));
        Map<String, SymbolState> state534 = new HashMap<String, SymbolState>();
        rules.put(534, state534);
        state534.put("PROTECTED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state231 = new HashMap<String, SymbolState>();
        rules.put(231, state231);
        state231.put("DOT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state614 = new HashMap<String, SymbolState>();
        rules.put(614, state614);
        state614.put("STATIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state347 = new HashMap<String, SymbolState>();
        rules.put(347, state347);
        state347.put("FALSE", new SymbolState(37));
        Map<String, SymbolState> state174 = new HashMap<String, SymbolState>();
        rules.put(174, state174);
        state174.put("CHAR_LITERAL", new SymbolState(38));
        Map<String, SymbolState> state104 = new HashMap<String, SymbolState>();
        rules.put(104, state104);
        state104.put("RPAREN", new SymbolState(EXPRESSION2,  2));
        Map<String, SymbolState> state139 = new HashMap<String, SymbolState>();
        rules.put(139, state139);
        state139.put("BOOLEANLITERAL", new SymbolState(39));
        Map<String, SymbolState> state458 = new HashMap<String, SymbolState>();
        rules.put(458, state458);
        state458.put("CHAR", new SymbolState(40));
        Map<String, SymbolState> state577 = new HashMap<String, SymbolState>();
        rules.put(577, state577);
        state577.put("PRIVATE", new SymbolState(MODIFIERS,  2));
        Map<String, SymbolState> state153 = new HashMap<String, SymbolState>();
        rules.put(153, state153);
        state153.put("BECOMES", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state17 = new HashMap<String, SymbolState>();
        rules.put(17, state17);
        state17.put("PLUS", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state448 = new HashMap<String, SymbolState>();
        rules.put(448, state448);
        state448.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state143 = new HashMap<String, SymbolState>();
        rules.put(143, state143);
        state143.put("LBRACKET", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state93 = new HashMap<String, SymbolState>();
        rules.put(93, state93);
        state93.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state443 = new HashMap<String, SymbolState>();
        rules.put(443, state443);
        state443.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state195 = new HashMap<String, SymbolState>();
        rules.put(195, state195);
        state195.put("RBRACE", new SymbolState(EXPRESSION2,  2));
        Map<String, SymbolState> state276 = new HashMap<String, SymbolState>();
        rules.put(276, state276);
        state276.put("SHORT", new SymbolState(EXPRESSION2REST,  2));
        state306.put("BYTE", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state377 = new HashMap<String, SymbolState>();
        rules.put(377, state377);
        state377.put("BECOMES", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state201 = new HashMap<String, SymbolState>();
        rules.put(201, state201);
        state201.put("SEMI", new SymbolState(TYPE,  3));
        state230.put("FLOAT", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state219 = new HashMap<String, SymbolState>();
        rules.put(219, state219);
        state219.put("LBRACKET", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state136 = new HashMap<String, SymbolState>();
        rules.put(136, state136);
        state136.put("LPAREN", new SymbolState(30));
        Map<String, SymbolState> state135 = new HashMap<String, SymbolState>();
        rules.put(135, state135);
        state135.put("RPAREN", new SymbolState(N_SELECTOR_0,  2));
        state234.put("LONG", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state29 = new HashMap<String, SymbolState>();
        rules.put(29, state29);
        state29.put("ID", new SymbolState(BASICTYPE,  1));
        state136.put("BOOLEANLITERAL", new SymbolState(39));
        Map<String, SymbolState> state164 = new HashMap<String, SymbolState>();
        rules.put(164, state164);
        state164.put("BOOLEAN", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state184 = new HashMap<String, SymbolState>();
        rules.put(184, state184);
        state184.put("TYPE", new SymbolState(41));
        Map<String, SymbolState> state451 = new HashMap<String, SymbolState>();
        rules.put(451, state451);
        state451.put("PAREXPRESSION", new SymbolState(42));
        Map<String, SymbolState> state411 = new HashMap<String, SymbolState>();
        rules.put(411, state411);
        state411.put("INT", new SymbolState(ARGUMENTS,  2));
        state78.put("LONG", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state297 = new HashMap<String, SymbolState>();
        rules.put(297, state297);
        state297.put("RBRACKET", new SymbolState(43));
        Map<String, SymbolState> state91 = new HashMap<String, SymbolState>();
        rules.put(91, state91);
        state91.put("BECOMES", new SymbolState(EXPRESSION1,  1));
        Map<String, SymbolState> state390 = new HashMap<String, SymbolState>();
        rules.put(390, state390);
        state390.put("BYTE", new SymbolState(EXPRESSION,  1));
        Map<String, SymbolState> state357 = new HashMap<String, SymbolState>();
        rules.put(357, state357);
        state357.put("CLASS", new SymbolState(MODIFIER,  1));
        state253.put("LBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state451.put("EXCLAMATION", new SymbolState(44));
        Map<String, SymbolState> state489 = new HashMap<String, SymbolState>();
        rules.put(489, state489);
        state489.put("LPAREN", new SymbolState(45));
        Map<String, SymbolState> state259 = new HashMap<String, SymbolState>();
        rules.put(259, state259);
        state259.put("FALSE", new SymbolState(37));
        Map<String, SymbolState> state523 = new HashMap<String, SymbolState>();
        rules.put(523, state523);
        state523.put("IMPORTDECLARATION", new SymbolState(46));
        Map<String, SymbolState> state334 = new HashMap<String, SymbolState>();
        rules.put(334, state334);
        state334.put("LONG", new SymbolState(47));
        Map<String, SymbolState> state498 = new HashMap<String, SymbolState>();
        rules.put(498, state498);
        state498.put("BYTE", new SymbolState(48));
        Map<String, SymbolState> state44 = new HashMap<String, SymbolState>();
        rules.put(44, state44);
        state44.put("FALSE", new SymbolState(PREFIXOP,  1));
        state26.put("MINUS", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state499 = new HashMap<String, SymbolState>();
        rules.put(499, state499);
        state499.put("FLOAT", new SymbolState(8));
        Map<String, SymbolState> state509 = new HashMap<String, SymbolState>();
        rules.put(509, state509);
        state509.put("LONG", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state512 = new HashMap<String, SymbolState>();
        rules.put(512, state512);
        state512.put("IMPORT", new SymbolState(IMPORTDECLARATION,  4));
        Map<String, SymbolState> state188 = new HashMap<String, SymbolState>();
        rules.put(188, state188);
        state188.put("LBRACKET", new SymbolState(49));
        Map<String, SymbolState> state72 = new HashMap<String, SymbolState>();
        rules.put(72, state72);
        state72.put("BECOMES", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state108 = new HashMap<String, SymbolState>();
        rules.put(108, state108);
        state108.put("SEMI", new SymbolState(BOOLEANLITERAL,  1));
        state539.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state275.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state311 = new HashMap<String, SymbolState>();
        rules.put(311, state311);
        state311.put("TYPE", new SymbolState(50));
        Map<String, SymbolState> state261 = new HashMap<String, SymbolState>();
        rules.put(261, state261);
        state261.put("TRUE", new SymbolState(12));
        state108.put("ID", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state25 = new HashMap<String, SymbolState>();
        rules.put(25, state25);
        state25.put("ID", new SymbolState(51));
        Map<String, SymbolState> state469 = new HashMap<String, SymbolState>();
        rules.put(469, state469);
        state469.put("EXPRESSION2REST", new SymbolState(52));
        Map<String, SymbolState> state631 = new HashMap<String, SymbolState>();
        rules.put(631, state631);
        state631.put("BOOLEAN", new SymbolState(53));
        Map<String, SymbolState> state227 = new HashMap<String, SymbolState>();
        rules.put(227, state227);
        state227.put("FLOAT", new SymbolState(8));
        state539.put("EXCLAMATION", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state51 = new HashMap<String, SymbolState>();
        rules.put(51, state51);
        state51.put("BYTE", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state552 = new HashMap<String, SymbolState>();
        rules.put(552, state552);
        state552.put("INT", new SymbolState(VARIABLEDECLARATORREST,  1));
        state14.put("ID", new SymbolState(51));
        Map<String, SymbolState> state42 = new HashMap<String, SymbolState>();
        rules.put(42, state42);
        state42.put("BOOLEAN", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state166 = new HashMap<String, SymbolState>();
        rules.put(166, state166);
        state166.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state51.put("LONG", new SymbolState(IDENTIFIER,  1));
        state31.put("TYPE", new SymbolState(54));
        state478.put("COMMA", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state498.put("FLOAT", new SymbolState(55));
        state577.put("NATIVE", new SymbolState(MODIFIERS,  2));
        Map<String, SymbolState> state455 = new HashMap<String, SymbolState>();
        rules.put(455, state455);
        state455.put("INT", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state280 = new HashMap<String, SymbolState>();
        rules.put(280, state280);
        state280.put("MINUS", new SymbolState(10));
        state158.put("BOOLEAN", new SymbolState(56));
        state5.put("PLUS", new SymbolState(57));
        Map<String, SymbolState> state351 = new HashMap<String, SymbolState>();
        rules.put(351, state351);
        state351.put("IDENTIFIER", new SymbolState(26));
        state177.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state86 = new HashMap<String, SymbolState>();
        rules.put(86, state86);
        state86.put("TRANSIENT", new SymbolState(58));
        Map<String, SymbolState> state457 = new HashMap<String, SymbolState>();
        rules.put(457, state457);
        state457.put("IDENTIFIER", new SymbolState(26));
        Map<String, SymbolState> state302 = new HashMap<String, SymbolState>();
        rules.put(302, state302);
        state302.put("SEMI", new SymbolState(METHODORFIELDDECL,  3));
        Map<String, SymbolState> state187 = new HashMap<String, SymbolState>();
        rules.put(187, state187);
        state187.put("BOOLEAN", new SymbolState(ARGUMENTS,  4));
        Map<String, SymbolState> state165 = new HashMap<String, SymbolState>();
        rules.put(165, state165);
        state165.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state364 = new HashMap<String, SymbolState>();
        rules.put(364, state364);
        state364.put("LONG", new SymbolState(EXPRESSION,  3));
        Map<String, SymbolState> state263 = new HashMap<String, SymbolState>();
        rules.put(263, state263);
        state263.put("LONG", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state67 = new HashMap<String, SymbolState>();
        rules.put(67, state67);
        state67.put("CLASS", new SymbolState(TYPEDECLARATION,  1));
        Map<String, SymbolState> state95 = new HashMap<String, SymbolState>();
        rules.put(95, state95);
        state95.put("TYPE", new SymbolState(59));
        Map<String, SymbolState> state383 = new HashMap<String, SymbolState>();
        rules.put(383, state383);
        state383.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state430.put("EXPRESSION3", new SymbolState(60));
        state430.put("EXPRESSION2", new SymbolState(61));
        state134.put("DOUBLE", new SymbolState(17));
        state430.put("EXPRESSION1", new SymbolState(62));
        Map<String, SymbolState> state531 = new HashMap<String, SymbolState>();
        rules.put(531, state531);
        state531.put("ID", new SymbolState(63));
        Map<String, SymbolState> state450 = new HashMap<String, SymbolState>();
        rules.put(450, state450);
        state450.put("DOT", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state223 = new HashMap<String, SymbolState>();
        rules.put(223, state223);
        state223.put("DOT", new SymbolState(PRIMARY,  1));
        state420.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state303 = new HashMap<String, SymbolState>();
        rules.put(303, state303);
        state303.put("LONG", new SymbolState(BASICTYPE,  1));
        state54.put("BYTE", new SymbolState(1));
        Map<String, SymbolState> state241 = new HashMap<String, SymbolState>();
        rules.put(241, state241);
        state241.put("COMMA", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state579.put("PLUS", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state27 = new HashMap<String, SymbolState>();
        rules.put(27, state27);
        state27.put("FLOAT", new SymbolState(8));
        Map<String, SymbolState> state359 = new HashMap<String, SymbolState>();
        rules.put(359, state359);
        state359.put("EXPRESSION3", new SymbolState(64));
        state140.put("INTEGERLITERAL", new SymbolState(65));
        Map<String, SymbolState> state588 = new HashMap<String, SymbolState>();
        rules.put(588, state588);
        state588.put("LBRACKET", new SymbolState(ARGUMENTS,  2));
        Map<String, SymbolState> state587 = new HashMap<String, SymbolState>();
        rules.put(587, state587);
        state587.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state158.put("INTEGERLITERAL", new SymbolState(66));
        Map<String, SymbolState> state385 = new HashMap<String, SymbolState>();
        rules.put(385, state385);
        state385.put("EXTENDS", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state565 = new HashMap<String, SymbolState>();
        rules.put(565, state565);
        state565.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state87 = new HashMap<String, SymbolState>();
        rules.put(87, state87);
        state87.put("TYPEDECLARATIONWITHOUTMODIFIERS", new SymbolState(67));
        Map<String, SymbolState> state242 = new HashMap<String, SymbolState>();
        rules.put(242, state242);
        state242.put("LBRACKET", new SymbolState(68));
        Map<String, SymbolState> state559 = new HashMap<String, SymbolState>();
        rules.put(559, state559);
        state559.put("BECOMES", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state111 = new HashMap<String, SymbolState>();
        rules.put(111, state111);
        state111.put("INT", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state272 = new HashMap<String, SymbolState>();
        rules.put(272, state272);
        state272.put("SHORT", new SymbolState(EXPRESSION3,  2));
        state140.put("BOOLEAN", new SymbolState(56));
        state581.put("CHAR_LITERAL", new SymbolState(69));
        state362.put("RBRACE", new SymbolState(EXPRESSION2,  1));
        Map<String, SymbolState> state566 = new HashMap<String, SymbolState>();
        rules.put(566, state566);
        state566.put("LONG", new SymbolState(70));
        state174.put("INTEGERLITERAL", new SymbolState(71));
        Map<String, SymbolState> state289 = new HashMap<String, SymbolState>();
        rules.put(289, state289);
        state289.put("DOT", new SymbolState(PRIMARY,  1));
        state108.put("DOUBLE", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state214 = new HashMap<String, SymbolState>();
        rules.put(214, state214);
        state214.put("BECOMES", new SymbolState(LITERAL,  1));
        state14.put("INTEGERLITERAL", new SymbolState(66));
        Map<String, SymbolState> state124 = new HashMap<String, SymbolState>();
        rules.put(124, state124);
        state124.put("TRUE", new SymbolState(12));
        state445.put("LONG", new SymbolState(6));
        Map<String, SymbolState> state57 = new HashMap<String, SymbolState>();
        rules.put(57, state57);
        state57.put("PLUS", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state592 = new HashMap<String, SymbolState>();
        rules.put(592, state592);
        state592.put("LBRACE", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state417 = new HashMap<String, SymbolState>();
        rules.put(417, state417);
        state417.put("BRACKETSOPT", new SymbolState(72));
        state58.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state499.put("TRUE", new SymbolState(73));
        state234.put("DOUBLE", new SymbolState(N_SELECTOR_0,  0));
        state136.put("LITERAL", new SymbolState(74));
        state57.put("CHAR_LITERAL", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state288 = new HashMap<String, SymbolState>();
        rules.put(288, state288);
        state288.put("BECOMES", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state376 = new HashMap<String, SymbolState>();
        rules.put(376, state376);
        state376.put("BOOLEAN", new SymbolState(SELECTOR,  2));
        state448.put("SEMI", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state500 = new HashMap<String, SymbolState>();
        rules.put(500, state500);
        state500.put("ID", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state315 = new HashMap<String, SymbolState>();
        rules.put(315, state315);
        state315.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state528 = new HashMap<String, SymbolState>();
        rules.put(528, state528);
        state528.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state359.put("BOOLEANLITERAL", new SymbolState(75));
        state31.put("FALSE", new SymbolState(76));
        state430.put("EXCLAMATION", new SymbolState(44));
        state193.put("LONG", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state19 = new HashMap<String, SymbolState>();
        rules.put(19, state19);
        state19.put("INT", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state316 = new HashMap<String, SymbolState>();
        rules.put(316, state316);
        state316.put("INSTANCEOF", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state408 = new HashMap<String, SymbolState>();
        rules.put(408, state408);
        state408.put("ID", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state521.put("CLASS", new SymbolState(77));
        Map<String, SymbolState> state131 = new HashMap<String, SymbolState>();
        rules.put(131, state131);
        state131.put("INT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state344 = new HashMap<String, SymbolState>();
        rules.put(344, state344);
        state344.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state351.put("INT", new SymbolState(78));
        state30.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        state50.put("PAREXPRESSION", new SymbolState(80));
        state111.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state294.put("SEMI", new SymbolState(SELECTOR,  3));
        state420.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state386 = new HashMap<String, SymbolState>();
        rules.put(386, state386);
        state386.put("RBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state42.put("BYTE", new SymbolState(PRIMARY,  1));
        state420.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state353.put("BECOMES", new SymbolState(LITERAL,  1));
        state353.put("DOT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state185 = new HashMap<String, SymbolState>();
        rules.put(185, state185);
        state185.put("TRUE", new SymbolState(73));
        state577.put("TRANSIENT", new SymbolState(MODIFIERS,  2));
        state57.put("NULL", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state622 = new HashMap<String, SymbolState>();
        rules.put(622, state622);
        state622.put("RBRACKET", new SymbolState(PAREXPRESSION,  3));
        state155.put("LBRACKET", new SymbolState(LITERAL,  1));
        state41.put("CHAR", new SymbolState(81));
        state139.put("PLUS", new SymbolState(57));
        Map<String, SymbolState> state301 = new HashMap<String, SymbolState>();
        rules.put(301, state301);
        state301.put("PLUS", new SymbolState(57));
        state581.put("EXPRESSION", new SymbolState(82));
        Map<String, SymbolState> state76 = new HashMap<String, SymbolState>();
        rules.put(76, state76);
        state76.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state73 = new HashMap<String, SymbolState>();
        rules.put(73, state73);
        state73.put("COMMA", new SymbolState(BOOLEANLITERAL,  1));
        state611.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state227.put("LITERAL", new SymbolState(83));
        Map<String, SymbolState> state169 = new HashMap<String, SymbolState>();
        rules.put(169, state169);
        state169.put("DOT", new SymbolState(INTEGERLITERAL,  1));
        state184.put("STR_LITERAL", new SymbolState(84));
        Map<String, SymbolState> state575 = new HashMap<String, SymbolState>();
        rules.put(575, state575);
        state575.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state277 = new HashMap<String, SymbolState>();
        rules.put(277, state277);
        state277.put("IDENTIFIER", new SymbolState(85));
        Map<String, SymbolState> state481 = new HashMap<String, SymbolState>();
        rules.put(481, state481);
        state481.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state291.put("MODIFIERS", new SymbolState(86));
        Map<String, SymbolState> state350 = new HashMap<String, SymbolState>();
        rules.put(350, state350);
        state350.put("N_TYPEDECLARATION_0", new SymbolState(87));
        Map<String, SymbolState> state292 = new HashMap<String, SymbolState>();
        rules.put(292, state292);
        state292.put("ID", new SymbolState(88));
        Map<String, SymbolState> state119 = new HashMap<String, SymbolState>();
        rules.put(119, state119);
        state119.put("DOT", new SymbolState(LITERAL,  1));
        state6.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state162 = new HashMap<String, SymbolState>();
        rules.put(162, state162);
        state162.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state231.put("COMMA", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state537 = new HashMap<String, SymbolState>();
        rules.put(537, state537);
        state537.put("RBRACKET", new SymbolState(89));
        Map<String, SymbolState> state313 = new HashMap<String, SymbolState>();
        rules.put(313, state313);
        state313.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state141 = new HashMap<String, SymbolState>();
        rules.put(141, state141);
        state141.put("EXCLAMATION", new SymbolState(TYPE,  1));
        Map<String, SymbolState> state49 = new HashMap<String, SymbolState>();
        rules.put(49, state49);
        state49.put("EXPRESSION1", new SymbolState(90));
        state49.put("EXPRESSION2", new SymbolState(91));
        state49.put("EXPRESSION3", new SymbolState(92));
        state86.put("PRIVATE", new SymbolState(93));
        state581.put("CHAR", new SymbolState(81));
        state124.put("EXCLAMATION", new SymbolState(44));
        state347.put("PRIMARY", new SymbolState(94));
        Map<String, SymbolState> state115 = new HashMap<String, SymbolState>();
        rules.put(115, state115);
        state115.put("ASSIGNMENTOPERATOR", new SymbolState(95));
        Map<String, SymbolState> state38 = new HashMap<String, SymbolState>();
        rules.put(38, state38);
        state38.put("LONG", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state374 = new HashMap<String, SymbolState>();
        rules.put(374, state374);
        state374.put("SHORT", new SymbolState(20));
        state353.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state563.put("INT", new SymbolState(VARIABLEDECLARATORREST,  3));
        Map<String, SymbolState> state45 = new HashMap<String, SymbolState>();
        rules.put(45, state45);
        state45.put("FLOAT", new SymbolState(8));
        Map<String, SymbolState> state597 = new HashMap<String, SymbolState>();
        rules.put(597, state597);
        state597.put("N_COMMA_TYPE_0", new SymbolState(96));
        state23.put("DOUBLE", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state191 = new HashMap<String, SymbolState>();
        rules.put(191, state191);
        state191.put("BYTE", new SymbolState(BOOLEANLITERAL,  1));
        state31.put("EXPRESSION", new SymbolState(97));
        Map<String, SymbolState> state625 = new HashMap<String, SymbolState>();
        rules.put(625, state625);
        state625.put("INTERFACEBODYDECLARATION", new SymbolState(98));
        state41.put("PREFIXOP", new SymbolState(99));
        state42.put("CHAR", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state446 = new HashMap<String, SymbolState>();
        rules.put(446, state446);
        state446.put("PAREXPRESSION", new SymbolState(100));
        Map<String, SymbolState> state293 = new HashMap<String, SymbolState>();
        rules.put(293, state293);
        state293.put("IMPORT", new SymbolState(IMPORTDECLARATION,  6));
        state234.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  0));
        state131.put("BOOLEAN", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state439 = new HashMap<String, SymbolState>();
        rules.put(439, state439);
        state439.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state239 = new HashMap<String, SymbolState>();
        rules.put(239, state239);
        state239.put("COMMA", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state392 = new HashMap<String, SymbolState>();
        rules.put(392, state392);
        state392.put("N_LBRACKET_RBRACKET_0", new SymbolState(101));
        Map<String, SymbolState> state34 = new HashMap<String, SymbolState>();
        rules.put(34, state34);
        state34.put("IDENTIFIER", new SymbolState(102));
        state251.put("LONG", new SymbolState(6));
        Map<String, SymbolState> state266 = new HashMap<String, SymbolState>();
        rules.put(266, state266);
        state266.put("ID", new SymbolState(LITERAL,  1));
        state311.put("EXPRESSION1", new SymbolState(103));
        Map<String, SymbolState> state60 = new HashMap<String, SymbolState>();
        rules.put(60, state60);
        state60.put("EXPRESSION2REST", new SymbolState(104));
        state311.put("EXPRESSION3", new SymbolState(105));
        state311.put("EXPRESSION2", new SymbolState(106));
        Map<String, SymbolState> state225 = new HashMap<String, SymbolState>();
        rules.put(225, state225);
        state225.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state30.put("INT", new SymbolState(78));
        state401.put("LONG", new SymbolState(PRIMARY,  1));
        state266.put("RBRACE", new SymbolState(LITERAL,  1));
        state51.put("TRUE", new SymbolState(IDENTIFIER,  1));
        state185.put("NULL", new SymbolState(107));
        state451.put("TRUE", new SymbolState(108));
        state385.put("LBRACE", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state393 = new HashMap<String, SymbolState>();
        rules.put(393, state393);
        state393.put("RBRACE", new SymbolState(EXPRESSION2,  1));
        state44.put("ID", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state97 = new HashMap<String, SymbolState>();
        rules.put(97, state97);
        state97.put("RPAREN", new SymbolState(109));
        Map<String, SymbolState> state398 = new HashMap<String, SymbolState>();
        rules.put(398, state398);
        state398.put("BYTE", new SymbolState(CLASSBODYDECLARATION,  2));
        Map<String, SymbolState> state221 = new HashMap<String, SymbolState>();
        rules.put(221, state221);
        state221.put("ID", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state114 = new HashMap<String, SymbolState>();
        rules.put(114, state114);
        state114.put("EXPRESSION2REST", new SymbolState(110));
        state42.put("LONG", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state584 = new HashMap<String, SymbolState>();
        rules.put(584, state584);
        state584.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state54.put("INT", new SymbolState(78));
        Map<String, SymbolState> state596 = new HashMap<String, SymbolState>();
        rules.put(596, state596);
        state596.put("ID", new SymbolState(N_SELECTOR_0,  2));
        Map<String, SymbolState> state403 = new HashMap<String, SymbolState>();
        rules.put(403, state403);
        state403.put("NATIVE", new SymbolState(MODIFIER,  1));
        state510.put("BYTE", new SymbolState(111));
        state261.put("BOOLEAN", new SymbolState(56));
        state30.put("FLOAT", new SymbolState(8));
        state121.put("TYPEDECLARATIONWITHOUTMODIFIERS", new SymbolState(112));
        Map<String, SymbolState> state482 = new HashMap<String, SymbolState>();
        rules.put(482, state482);
        state482.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state251.put("SHORT", new SymbolState(20));
        Map<String, SymbolState> state13 = new HashMap<String, SymbolState>();
        rules.put(13, state13);
        state13.put("RBRACE", new SymbolState(EXPRESSION2,  2));
        state227.put("EXPRESSION2", new SymbolState(113));
        state579.put("MINUS", new SymbolState(TYPE,  3));
        state227.put("EXPRESSION3", new SymbolState(114));
        state401.put("SHORT", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state168 = new HashMap<String, SymbolState>();
        rules.put(168, state168);
        state168.put("LBRACKET", new SymbolState(SELECTOR,  2));
        state386.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state227.put("EXPRESSION1", new SymbolState(115));
        Map<String, SymbolState> state203 = new HashMap<String, SymbolState>();
        rules.put(203, state203);
        state203.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state521.put("TYPEDECLARATIONWITHMODIFIERS", new SymbolState(116));
        state389.put("IMPLEMENTS", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state525 = new HashMap<String, SymbolState>();
        rules.put(525, state525);
        state525.put("ARGUMENTS", new SymbolState(117));
        Map<String, SymbolState> state75 = new HashMap<String, SymbolState>();
        rules.put(75, state75);
        state75.put("DOT", new SymbolState(LITERAL,  1));
        state58.put("FINAL", new SymbolState(MODIFIER,  1));
        state301.put("BYTE", new SymbolState(1));
        state191.put("CHAR", new SymbolState(BOOLEANLITERAL,  1));
        state268.put("SHORT", new SymbolState(118));
        state448.put("LONG", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state95.put("NULL", new SymbolState(119));
        Map<String, SymbolState> state553 = new HashMap<String, SymbolState>();
        rules.put(553, state553);
        state553.put("INT", new SymbolState(INTEGERLITERAL,  1));
        state95.put("MINUS", new SymbolState(10));
        state359.put("PREFIXOP", new SymbolState(120));
        state227.put("INT", new SymbolState(78));
        Map<String, SymbolState> state278 = new HashMap<String, SymbolState>();
        rules.put(278, state278);
        state278.put("PRIMARY", new SymbolState(94));
        state351.put("NULL", new SymbolState(16));
        Map<String, SymbolState> state215 = new HashMap<String, SymbolState>();
        rules.put(215, state215);
        state215.put("FLOAT", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state175 = new HashMap<String, SymbolState>();
        rules.put(175, state175);
        state175.put("DOT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state568 = new HashMap<String, SymbolState>();
        rules.put(568, state568);
        state568.put("COMMA", new SymbolState(EXPRESSION3,  2));
        state351.put("MINUS", new SymbolState(10));
        state5.put("LITERAL", new SymbolState(74));
        state280.put("ID", new SymbolState(51));
        state215.put("LONG", new SymbolState(IDENTIFIER,  1));
        state141.put("LPAREN", new SymbolState(TYPE,  1));
        Map<String, SymbolState> state46 = new HashMap<String, SymbolState>();
        rules.put(46, state46);
        state46.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state266.put("BECOMES", new SymbolState(LITERAL,  1));
        state482.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state464 = new HashMap<String, SymbolState>();
        rules.put(464, state464);
        state464.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state340 = new HashMap<String, SymbolState>();
        rules.put(340, state340);
        state340.put("INT", new SymbolState(BASICTYPE,  1));
        state411.put("BYTE", new SymbolState(ARGUMENTS,  2));
        state6.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state136.put("CHAR", new SymbolState(81));
        state521.put("MODIFIERS", new SymbolState(121));
        state26.put("CHAR_LITERAL", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state168.put("ARGUMENTS", new SymbolState(122));
        Map<String, SymbolState> state33 = new HashMap<String, SymbolState>();
        rules.put(33, state33);
        state33.put("N_DOT_IDENTIFIER_0", new SymbolState(123));
        state158.put("PREFIXOP", new SymbolState(124));
        state294.put("FLOAT", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state65 = new HashMap<String, SymbolState>();
        rules.put(65, state65);
        state65.put("LBRACKET", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state298 = new HashMap<String, SymbolState>();
        rules.put(298, state298);
        state298.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state30.put("IDENTIFIER", new SymbolState(26));
        Map<String, SymbolState> state468 = new HashMap<String, SymbolState>();
        rules.put(468, state468);
        state468.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state141.put("CHAR", new SymbolState(TYPE,  1));
        state26.put("STR_LITERAL", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state334.put("ID", new SymbolState(125));
        Map<String, SymbolState> state89 = new HashMap<String, SymbolState>();
        rules.put(89, state89);
        state89.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state171 = new HashMap<String, SymbolState>();
        rules.put(171, state171);
        state171.put("BOOLEAN", new SymbolState(56));
        state466.put("LONG", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state15 = new HashMap<String, SymbolState>();
        rules.put(15, state15);
        state15.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state291.put("CLASSBODYDECLARATION", new SymbolState(126));
        Map<String, SymbolState> state300 = new HashMap<String, SymbolState>();
        rules.put(300, state300);
        state300.put("RBRACE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state146 = new HashMap<String, SymbolState>();
        rules.put(146, state146);
        state146.put("DECIMAL_INTEGER_LITERAL", new SymbolState(127));
        state553.put("DOUBLE", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state551 = new HashMap<String, SymbolState>();
        rules.put(551, state551);
        state551.put("ID", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state171.put("LONG", new SymbolState(6));
        state221.put("BECOMES", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state522 = new HashMap<String, SymbolState>();
        rules.put(522, state522);
        state522.put("NATIVE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state354 = new HashMap<String, SymbolState>();
        rules.put(354, state354);
        state354.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state498.put("TYPE", new SymbolState(128));
        state559.put("RBRACKET", new SymbolState(TYPE,  3));
        state631.put("LONG", new SymbolState(47));
        state510.put("BASICTYPE", new SymbolState(129));
        Map<String, SymbolState> state189 = new HashMap<String, SymbolState>();
        rules.put(189, state189);
        state189.put("DOT", new SymbolState(INTEGERLITERAL,  1));
        state562.put("SHORT", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state102 = new HashMap<String, SymbolState>();
        rules.put(102, state102);
        state102.put("ID", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state384 = new HashMap<String, SymbolState>();
        rules.put(384, state384);
        state384.put("LBRACKET", new SymbolState(130));
        Map<String, SymbolState> state167 = new HashMap<String, SymbolState>();
        rules.put(167, state167);
        state167.put("RPAREN", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state84 = new HashMap<String, SymbolState>();
        rules.put(84, state84);
        state84.put("LBRACKET", new SymbolState(LITERAL,  1));
        state439.put("SHORT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state163 = new HashMap<String, SymbolState>();
        rules.put(163, state163);
        state163.put("BECOMES", new SymbolState(N_SELECTOR_0,  0));
        state259.put("CHAR_LITERAL", new SymbolState(69));
        state38.put("ID", new SymbolState(LITERAL,  1));
        state266.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state174.put("BOOLEANLITERAL", new SymbolState(131));
        state268.put("TYPE", new SymbolState(132));
        state596.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  2));
        state102.put("INT", new SymbolState(SELECTOR,  2));
        state49.put("BOOLEAN", new SymbolState(56));
        state86.put("BOOLEAN", new SymbolState(133));
        state272.put("LONG", new SymbolState(EXPRESSION3,  2));
        state174.put("TYPE", new SymbolState(134));
        Map<String, SymbolState> state428 = new HashMap<String, SymbolState>();
        rules.put(428, state428);
        state428.put("COMMA", new SymbolState(N_SELECTOR_0,  2));
        Map<String, SymbolState> state43 = new HashMap<String, SymbolState>();
        rules.put(43, state43);
        state43.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state568.put("SELECTOR", new SymbolState(135));
        state534.put("FINAL", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state269 = new HashMap<String, SymbolState>();
        rules.put(269, state269);
        state269.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state492 = new HashMap<String, SymbolState>();
        rules.put(492, state492);
        state492.put("LBRACKET", new SymbolState(136));
        state224.put("FLOAT", new SymbolState(PRIMARY,  1));
        state44.put("FLOAT", new SymbolState(PREFIXOP,  1));
        state251.put("BOOLEANLITERAL", new SymbolState(137));
        state552.put("CHAR", new SymbolState(VARIABLEDECLARATORREST,  1));
        state234.put("RBRACE", new SymbolState(N_SELECTOR_0,  0));
        state126.put("BYTE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state256.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state500.put("FLOAT", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state4 = new HashMap<String, SymbolState>();
        rules.put(4, state4);
        state4.put("BECOMES", new SymbolState(N_SELECTOR_0,  2));
        state184.put("PAREXPRESSION", new SymbolState(138));
        state376.put("LBRACKET", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state506 = new HashMap<String, SymbolState>();
        rules.put(506, state506);
        state506.put("ID", new SymbolState(SELECTOR,  3));
        state394.put("FLOAT", new SymbolState(EXPRESSION1,  1));
        state403.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state27.put("PREFIXOP", new SymbolState(139));
        state263.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state457.put("BYTE", new SymbolState(1));
        state552.put("BECOMES", new SymbolState(140));
        Map<String, SymbolState> state598 = new HashMap<String, SymbolState>();
        rules.put(598, state598);
        state598.put("FINAL", new SymbolState(MODIFIER,  1));
        state191.put("ID", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state524 = new HashMap<String, SymbolState>();
        rules.put(524, state524);
        state524.put("SEMI", new SymbolState(TYPE,  1));
        state539.put("NULL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state588.put("SEMI", new SymbolState(ARGUMENTS,  2));
        state466.put("INSTANCEOF", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state99 = new HashMap<String, SymbolState>();
        rules.put(99, state99);
        state99.put("PLUS", new SymbolState(57));
        state58.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state301.put("BASICTYPE", new SymbolState(141));
        state227.put("PLUS", new SymbolState(57));
        Map<String, SymbolState> state412 = new HashMap<String, SymbolState>();
        rules.put(412, state412);
        state412.put("RBRACKET", new SymbolState(142));
        Map<String, SymbolState> state433 = new HashMap<String, SymbolState>();
        rules.put(433, state433);
        state433.put("RPAREN", new SymbolState(SELECTOR,  3));
        state109.put("ID", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state249 = new HashMap<String, SymbolState>();
        rules.put(249, state249);
        state249.put("COMMA", new SymbolState(TYPE,  1));
        state38.put("INT", new SymbolState(LITERAL,  1));
        state259.put("BOOLEANLITERAL", new SymbolState(143));
        state95.put("BASICTYPE", new SymbolState(141));
        state86.put("SEMI", new SymbolState(19));
        state278.put("MINUS", new SymbolState(10));
        Map<String, SymbolState> state59 = new HashMap<String, SymbolState>();
        rules.put(59, state59);
        state59.put("MINUS", new SymbolState(10));
        Map<String, SymbolState> state101 = new HashMap<String, SymbolState>();
        rules.put(101, state101);
        state101.put("LBRACKET", new SymbolState(144));
        state614.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state154 = new HashMap<String, SymbolState>();
        rules.put(154, state154);
        state154.put("IDENTIFIER", new SymbolState(145));
        state111.put("SHORT", new SymbolState(BASICTYPE,  1));
        state263.put("DOUBLE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state613 = new HashMap<String, SymbolState>();
        rules.put(613, state613);
        state613.put("LONG", new SymbolState(BASICTYPE,  1));
        state51.put("EXCLAMATION", new SymbolState(IDENTIFIER,  1));
        state364.put("BOOLEAN", new SymbolState(EXPRESSION,  3));
        state146.put("PREFIXOP", new SymbolState(146));
        state50.put("DECIMAL_INTEGER_LITERAL", new SymbolState(127));
        state408.put("DOUBLE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        Map<String, SymbolState> state150 = new HashMap<String, SymbolState>();
        rules.put(150, state150);
        state150.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state14.put("MINUS", new SymbolState(10));
        Map<String, SymbolState> state123 = new HashMap<String, SymbolState>();
        rules.put(123, state123);
        state123.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state184.put("SHORT", new SymbolState(20));
        state227.put("FALSE", new SymbolState(76));
        state514.put("FLOAT", new SymbolState(MODIFIERS,  2));
        Map<String, SymbolState> state208 = new HashMap<String, SymbolState>();
        rules.put(208, state208);
        state208.put("IDENTIFIER", new SymbolState(147));
        state445.put("EXPRESSION", new SymbolState(148));
        Map<String, SymbolState> state181 = new HashMap<String, SymbolState>();
        rules.put(181, state181);
        state181.put("RBRACKET", new SymbolState(149));
        state99.put("ID", new SymbolState(51));
        Map<String, SymbolState> state624 = new HashMap<String, SymbolState>();
        rules.put(624, state624);
        state624.put("ID", new SymbolState(150));
        state227.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        state17.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state81.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state78.put("CHAR", new SymbolState(BASICTYPE,  1));
        state242.put("LONG", new SymbolState(BRACKETSOPT,  1));
        state14.put("INT", new SymbolState(78));
        state359.put("BOOLEAN", new SymbolState(56));
        state239.put("LBRACKET", new SymbolState(N_SELECTOR_0,  0));
        state417.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state514.put("NATIVE", new SymbolState(MODIFIERS,  2));
        Map<String, SymbolState> state335 = new HashMap<String, SymbolState>();
        rules.put(335, state335);
        state335.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state373 = new HashMap<String, SymbolState>();
        rules.put(373, state373);
        state373.put("IDENTIFIER", new SymbolState(151));
        Map<String, SymbolState> state32 = new HashMap<String, SymbolState>();
        rules.put(32, state32);
        state32.put("BYTE", new SymbolState(152));
        Map<String, SymbolState> state213 = new HashMap<String, SymbolState>();
        rules.put(213, state213);
        state213.put("INTEGERLITERAL", new SymbolState(153));
        state369.put("TRUE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state398.put("DOUBLE", new SymbolState(CLASSBODYDECLARATION,  2));
        Map<String, SymbolState> state122 = new HashMap<String, SymbolState>();
        rules.put(122, state122);
        state122.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state54.put("INTEGERLITERAL", new SymbolState(66));
        state109.put("DOUBLE", new SymbolState(PAREXPRESSION,  3));
        state249.put("BECOMES", new SymbolState(TYPE,  1));
        state398.put("LONG", new SymbolState(CLASSBODYDECLARATION,  2));
        state29.put("CHAR", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state64 = new HashMap<String, SymbolState>();
        rules.put(64, state64);
        state64.put("BYTE", new SymbolState(EXPRESSION3,  2));
        state278.put("PLUS", new SymbolState(57));
        state38.put("SHORT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state197 = new HashMap<String, SymbolState>();
        rules.put(197, state197);
        state197.put("DOT", new SymbolState(154));
        state93.put("FLOAT", new SymbolState(MODIFIER,  1));
        state492.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state388 = new HashMap<String, SymbolState>();
        rules.put(388, state388);
        state388.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state31.put("STR_LITERAL", new SymbolState(155));
        state102.put("CHAR", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state248 = new HashMap<String, SymbolState>();
        rules.put(248, state248);
        state248.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state421 = new HashMap<String, SymbolState>();
        rules.put(421, state421);
        state421.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state450.put("BECOMES", new SymbolState(SELECTOR,  2));
        state448.put("CHAR", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state499.put("EXCLAMATION", new SymbolState(44));
        Map<String, SymbolState> state454 = new HashMap<String, SymbolState>();
        rules.put(454, state454);
        state454.put("RPAREN", new SymbolState(SELECTOR,  2));
        state201.put("BYTE", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state488 = new HashMap<String, SymbolState>();
        rules.put(488, state488);
        state488.put("LONG", new SymbolState(EXPRESSION3,  2));
        state215.put("DOUBLE", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state477 = new HashMap<String, SymbolState>();
        rules.put(477, state477);
        state477.put("CHAR", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state383.put("NATIVE", new SymbolState(MODIFIER,  1));
        state41.put("BOOLEAN", new SymbolState(56));
        state596.put("SHORT", new SymbolState(N_SELECTOR_0,  2));
        state251.put("CHAR_LITERAL", new SymbolState(156));
        state383.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state350.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state566.put("BASICTYPE", new SymbolState(157));
        state93.put("NATIVE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state317 = new HashMap<String, SymbolState>();
        rules.put(317, state317);
        state317.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state14.put("LPAREN", new SymbolState(158));
        state19.put("LONG", new SymbolState(MEMBERDECL,  1));
        state539.put("STR_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state616 = new HashMap<String, SymbolState>();
        rules.put(616, state616);
        state616.put("RPAREN", new SymbolState(ARGUMENTS,  2));
        state301.put("TRUE", new SymbolState(12));
        state300.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state280.put("SHORT", new SymbolState(20));
        state27.put("DOUBLE", new SymbolState(17));
        state500.put("LONG", new SymbolState(IDENTIFIER,  1));
        state27.put("CHAR_LITERAL", new SymbolState(159));
        Map<String, SymbolState> state172 = new HashMap<String, SymbolState>();
        rules.put(172, state172);
        state172.put("ID", new SymbolState(LITERAL,  1));
        state8.put("PLUS", new SymbolState(BASICTYPE,  1));
        state121.put("SYNCHRONIZED", new SymbolState(160));
        Map<String, SymbolState> state342 = new HashMap<String, SymbolState>();
        rules.put(342, state342);
        state342.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state477.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        Map<String, SymbolState> state578 = new HashMap<String, SymbolState>();
        rules.put(578, state578);
        state578.put("DOT", new SymbolState(161));
        Map<String, SymbolState> state176 = new HashMap<String, SymbolState>();
        rules.put(176, state176);
        state176.put("PRIVATE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state260 = new HashMap<String, SymbolState>();
        rules.put(260, state260);
        state260.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state109.put("LBRACKET", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state407 = new HashMap<String, SymbolState>();
        rules.put(407, state407);
        state407.put("DOT", new SymbolState(IDENTIFIER,  1));
        state311.put("DECIMAL_INTEGER_LITERAL", new SymbolState(127));
        state475.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state215.put("BYTE", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state250 = new HashMap<String, SymbolState>();
        rules.put(250, state250);
        state250.put("RPAREN", new SymbolState(ARGUMENTS,  4));
        Map<String, SymbolState> state112 = new HashMap<String, SymbolState>();
        rules.put(112, state112);
        state112.put("CLASS", new SymbolState(TYPEDECLARATIONWITHMODIFIERS,  2));
        state562.put("LBRACKET", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state603 = new HashMap<String, SymbolState>();
        rules.put(603, state603);
        state603.put("RBRACKET", new SymbolState(162));
        Map<String, SymbolState> state323 = new HashMap<String, SymbolState>();
        rules.put(323, state323);
        state323.put("DOT", new SymbolState(ARGUMENTS,  4));
        state219.put("RBRACKET", new SymbolState(LITERAL,  1));
        state259.put("NULL", new SymbolState(107));
        Map<String, SymbolState> state589 = new HashMap<String, SymbolState>();
        rules.put(589, state589);
        state589.put("CHAR", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state36 = new HashMap<String, SymbolState>();
        rules.put(36, state36);
        state36.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state186 = new HashMap<String, SymbolState>();
        rules.put(186, state186);
        state186.put("DOUBLE", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state365 = new HashMap<String, SymbolState>();
        rules.put(365, state365);
        state365.put("BOOLEAN", new SymbolState(BRACKETSOPT,  1));
        state553.put("BYTE", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state570 = new HashMap<String, SymbolState>();
        rules.put(570, state570);
        state570.put("COMMA", new SymbolState(EXPRESSION2,  2));
        state303.put("INT", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state281 = new HashMap<String, SymbolState>();
        rules.put(281, state281);
        state281.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state234.put("CHAR", new SymbolState(N_SELECTOR_0,  0));
        state383.put("STATIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state378 = new HashMap<String, SymbolState>();
        rules.put(378, state378);
        state378.put("RPAREN", new SymbolState(ARGUMENTS,  4));
        state334.put("CHAR", new SymbolState(40));
        state30.put("PRIMARY", new SymbolState(163));
        Map<String, SymbolState> state61 = new HashMap<String, SymbolState>();
        rules.put(61, state61);
        state61.put("BECOMES", new SymbolState(EXPRESSION1,  1));
        state57.put("CHAR", new SymbolState(PREFIXOP,  1));
        state140.put("TRUE", new SymbolState(164));
        Map<String, SymbolState> state20 = new HashMap<String, SymbolState>();
        rules.put(20, state20);
        state20.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state439.put("STATIC", new SymbolState(MODIFIER,  1));
        state172.put("SEMI", new SymbolState(LITERAL,  1));
        state41.put("CHAR_LITERAL", new SymbolState(165));
        state5.put("NULL", new SymbolState(166));
        Map<String, SymbolState> state325 = new HashMap<String, SymbolState>();
        rules.put(325, state325);
        state325.put("COMMA", new SymbolState(LITERAL,  1));
        state146.put("BASICTYPE", new SymbolState(141));
        Map<String, SymbolState> state338 = new HashMap<String, SymbolState>();
        rules.put(338, state338);
        state338.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state126.put("FLOAT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state362.put("LONG", new SymbolState(EXPRESSION2,  1));
        state31.put("PLUS", new SymbolState(57));
        Map<String, SymbolState> state345 = new HashMap<String, SymbolState>();
        rules.put(345, state345);
        state345.put("DOT", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state405 = new HashMap<String, SymbolState>();
        rules.put(405, state405);
        state405.put("INT", new SymbolState(VARIABLEINITIALIZER,  1));
        state579.put("INT", new SymbolState(TYPE,  3));
        state259.put("CHAR", new SymbolState(81));
        state139.put("CHAR", new SymbolState(81));
        Map<String, SymbolState> state244 = new HashMap<String, SymbolState>();
        rules.put(244, state244);
        state244.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state243.put("NATIVE", new SymbolState(MODIFIER,  1));
        state99.put("MINUS", new SymbolState(10));
        state59.put("PRIMARY", new SymbolState(167));
        state31.put("LONG", new SymbolState(6));
        state164.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state160 = new HashMap<String, SymbolState>();
        rules.put(160, state160);
        state160.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state579.put("FLOAT", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state461 = new HashMap<String, SymbolState>();
        rules.put(461, state461);
        state461.put("IDENTIFIER", new SymbolState(168));
        state99.put("DECIMAL_INTEGER_LITERAL", new SymbolState(169));
        state185.put("STR_LITERAL", new SymbolState(170));
        state84.put("DOT", new SymbolState(LITERAL,  1));
        state376.put("LPAREN", new SymbolState(171));
        state528.put("SEMI", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state490 = new HashMap<String, SymbolState>();
        rules.put(490, state490);
        state490.put("NATIVE", new SymbolState(MODIFIER,  1));
        state259.put("PRIMARY", new SymbolState(94));
        state42.put("FLOAT", new SymbolState(PRIMARY,  1));
        state38.put("BYTE", new SymbolState(LITERAL,  1));
        state139.put("PRIMARY", new SymbolState(3));
        state17.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state174.put("STR_LITERAL", new SymbolState(172));
        state499.put("FALSE", new SymbolState(37));
        state78.put("MINUS", new SymbolState(BASICTYPE,  1));
        state45.put("FALSE", new SymbolState(37));
        state499.put("BOOLEAN", new SymbolState(56));
        state244.put("SEMI", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state519 = new HashMap<String, SymbolState>();
        rules.put(519, state519);
        state519.put("ARGUMENTS", new SymbolState(173));
        state54.put("STR_LITERAL", new SymbolState(155));
        Map<String, SymbolState> state120 = new HashMap<String, SymbolState>();
        rules.put(120, state120);
        state120.put("TRUE", new SymbolState(164));
        state294.put("ID", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state620 = new HashMap<String, SymbolState>();
        rules.put(620, state620);
        state620.put("INSTANCEOF", new SymbolState(ARGUMENTS,  2));
        state61.put("RPAREN", new SymbolState(EXPRESSION1,  1));
        state126.put("RBRACE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state492.put("COMMA", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state74 = new HashMap<String, SymbolState>();
        rules.put(74, state74);
        state74.put("DOT", new SymbolState(PRIMARY,  1));
        state193.put("RBRACE", new SymbolState(PRIMARY,  1));
        state51.put("CHAR_LITERAL", new SymbolState(IDENTIFIER,  1));
        state23.put("RBRACE", new SymbolState(BOOLEANLITERAL,  1));
        state261.put("SHORT", new SymbolState(20));
        state359.put("CHAR", new SymbolState(81));
        state141.put("FALSE", new SymbolState(TYPE,  1));
        state451.put("PREFIXOP", new SymbolState(174));
        Map<String, SymbolState> state346 = new HashMap<String, SymbolState>();
        rules.put(346, state346);
        state346.put("DOT", new SymbolState(IDENTIFIER,  1));
        state44.put("SHORT", new SymbolState(PREFIXOP,  1));
        state221.put("SEMI", new SymbolState(SELECTOR,  3));
        state14.put("BOOLEANLITERAL", new SymbolState(175));
        state54.put("DOUBLE", new SymbolState(17));
        state186.put("RBRACE", new SymbolState(IDENTIFIER,  1));
        state86.put("STATIC", new SymbolState(176));
        Map<String, SymbolState> state129 = new HashMap<String, SymbolState>();
        rules.put(129, state129);
        state129.put("SHORT", new SymbolState(TYPE,  1));
        state44.put("CHAR", new SymbolState(PREFIXOP,  1));
        state131.put("LBRACKET", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state629 = new HashMap<String, SymbolState>();
        rules.put(629, state629);
        state629.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state581.put("MINUS", new SymbolState(10));
        state278.put("IDENTIFIER", new SymbolState(26));
        Map<String, SymbolState> state516 = new HashMap<String, SymbolState>();
        rules.put(516, state516);
        state516.put("RBRACKET", new SymbolState(177));
        state5.put("BASICTYPE", new SymbolState(141));
        state374.put("PRIMARY", new SymbolState(94));
        state99.put("TYPE", new SymbolState(41));
        Map<String, SymbolState> state178 = new HashMap<String, SymbolState>();
        rules.put(178, state178);
        state178.put("NULL", new SymbolState(BRACKETSOPT,  1));
        state614.put("NATIVE", new SymbolState(MODIFIER,  1));
        state302.put("LONG", new SymbolState(METHODORFIELDDECL,  3));
        state74.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state300.put("CHAR", new SymbolState(BASICTYPE,  1));
        state539.put("N_LBRACKET_RBRACKET_0", new SymbolState(178));
        state171.put("CHAR", new SymbolState(81));
        state263.put("SEMI", new SymbolState(MODIFIER,  1));
        state552.put("ID", new SymbolState(VARIABLEDECLARATORREST,  1));
        state439.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state610 = new HashMap<String, SymbolState>();
        rules.put(610, state610);
        state610.put("CHAR", new SymbolState(179));
        state64.put("INT", new SymbolState(EXPRESSION3,  2));
        state49.put("BASICTYPE", new SymbolState(141));
        state50.put("INTEGERLITERAL", new SymbolState(180));
        state136.put("PRIMARY", new SymbolState(3));
        state78.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state182.put("NULL", new SymbolState(166));
        state99.put("BYTE", new SymbolState(1));
        state506.put("CHAR", new SymbolState(SELECTOR,  3));
        state575.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state78.put("ID", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state333 = new HashMap<String, SymbolState>();
        rules.put(333, state333);
        state333.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state195.put("BECOMES", new SymbolState(EXPRESSION2,  2));
        state29.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state83 = new HashMap<String, SymbolState>();
        rules.put(83, state83);
        state83.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state401.put("BECOMES", new SymbolState(PRIMARY,  1));
        state231.put("RPAREN", new SymbolState(LITERAL,  1));
        state387.put("SHORT", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state558 = new HashMap<String, SymbolState>();
        rules.put(558, state558);
        state558.put("LBRACKET", new SymbolState(181));
        state23.put("BYTE", new SymbolState(BOOLEANLITERAL,  1));
        state166.put("BECOMES", new SymbolState(LITERAL,  1));
        state552.put("SHORT", new SymbolState(VARIABLEDECLARATORREST,  1));
        state577.put("FINAL", new SymbolState(MODIFIERS,  2));
        state420.put("SHORT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state368 = new HashMap<String, SymbolState>();
        rules.put(368, state368);
        state368.put("RBRACKET", new SymbolState(IDENTIFIER,  1));
        state303.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state30.put("LITERAL", new SymbolState(83));
        Map<String, SymbolState> state444 = new HashMap<String, SymbolState>();
        rules.put(444, state444);
        state444.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state522.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state75.put("BECOMES", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state79 = new HashMap<String, SymbolState>();
        rules.put(79, state79);
        state79.put("LBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state124.put("PREFIXOP", new SymbolState(124));
        state475.put("LBRACKET", new SymbolState(182));
        Map<String, SymbolState> state267 = new HashMap<String, SymbolState>();
        rules.put(267, state267);
        state267.put("INT", new SymbolState(CLASSBODYDECLARATION,  1));
        state351.put("CHAR_LITERAL", new SymbolState(183));
        state93.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state469.put("RBRACKET", new SymbolState(EXPRESSION2,  1));
        state244.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state213.put("LONG", new SymbolState(6));
        state193.put("ID", new SymbolState(PRIMARY,  1));
        state221.put("INT", new SymbolState(SELECTOR,  3));
        state23.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state76.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state298.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state445.put("EXPRESSION2", new SymbolState(91));
        state445.put("EXPRESSION3", new SymbolState(92));
        state421.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state163.put("LBRACKET", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state90 = new HashMap<String, SymbolState>();
        rules.put(90, state90);
        state90.put("ASSIGNMENTOPERATOR", new SymbolState(184));
        state445.put("EXPRESSION1", new SymbolState(90));
        state316.put("RPAREN", new SymbolState(PAREXPRESSION,  3));
        state347.put("PREFIXOP", new SymbolState(185));
        Map<String, SymbolState> state156 = new HashMap<String, SymbolState>();
        rules.put(156, state156);
        state156.put("DOT", new SymbolState(LITERAL,  1));
        state455.put("ID", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state437 = new HashMap<String, SymbolState>();
        rules.put(437, state437);
        state437.put("RBRACKET", new SymbolState(IDENTIFIER,  1));
        state84.put("RBRACKET", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state309 = new HashMap<String, SymbolState>();
        rules.put(309, state309);
        state309.put("INT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state515 = new HashMap<String, SymbolState>();
        rules.put(515, state515);
        state515.put("ID", new SymbolState(N_SELECTOR_0,  2));
        state43.put("DOT", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state431 = new HashMap<String, SymbolState>();
        rules.put(431, state431);
        state431.put("LBRACKET", new SymbolState(PAREXPRESSION,  3));
        state351.put("ID", new SymbolState(51));
        Map<String, SymbolState> state22 = new HashMap<String, SymbolState>();
        rules.put(22, state22);
        state22.put("RBRACKET", new SymbolState(BRACKETSOPT,  1));
        state393.put("SHORT", new SymbolState(EXPRESSION2,  1));
        state335.put("INT", new SymbolState(EXPRESSION3,  2));
        state224.put("DOT", new SymbolState(PRIMARY,  1));
        state51.put("DOUBLE", new SymbolState(IDENTIFIER,  1));
        state342.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state64.put("SHORT", new SymbolState(EXPRESSION3,  2));
        state587.put("CHAR", new SymbolState(MODIFIER,  1));
        state589.put("DOT", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state591 = new HashMap<String, SymbolState>();
        rules.put(591, state591);
        state591.put("ID", new SymbolState(186));
        Map<String, SymbolState> state237 = new HashMap<String, SymbolState>();
        rules.put(237, state237);
        state237.put("NULL", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state466.put("FLOAT", new SymbolState(IDENTIFIER,  1));
        state44.put("DECIMAL_INTEGER_LITERAL", new SymbolState(PREFIXOP,  1));
        state278.put("BOOLEANLITERAL", new SymbolState(143));
        Map<String, SymbolState> state142 = new HashMap<String, SymbolState>();
        rules.put(142, state142);
        state142.put("DOT", new SymbolState(SELECTOR,  3));
        state374.put("STR_LITERAL", new SymbolState(170));
        state346.put("COMMA", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state590 = new HashMap<String, SymbolState>();
        rules.put(590, state590);
        state590.put("RPAREN", new SymbolState(187));
        state451.put("DOUBLE", new SymbolState(17));
        state552.put("BOOLEAN", new SymbolState(VARIABLEDECLARATORREST,  1));
        state8.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state266.put("CHAR", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state493 = new HashMap<String, SymbolState>();
        rules.put(493, state493);
        state493.put("RPAREN", new SymbolState(TYPE,  3));
        state263.put("CHAR", new SymbolState(MODIFIER,  1));
        state477.put("BOOLEAN", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state139.put("DOUBLE", new SymbolState(17));
        state309.put("LONG", new SymbolState(LITERAL,  1));
        state64.put("ID", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state3 = new HashMap<String, SymbolState>();
        rules.put(3, state3);
        state3.put("N_SELECTOR_0", new SymbolState(188));
        state430.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state466.put("LPAREN", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state173 = new HashMap<String, SymbolState>();
        rules.put(173, state173);
        state173.put("DOT", new SymbolState(SELECTOR,  3));
        state581.put("BASICTYPE", new SymbolState(141));
        state278.put("BOOLEAN", new SymbolState(56));
        state14.put("EXCLAMATION", new SymbolState(44));
        state446.put("EXPRESSION", new SymbolState(190));
        state49.put("MINUS", new SymbolState(10));
        state5.put("BOOLEAN", new SymbolState(56));
        state563.put("CHAR", new SymbolState(VARIABLEDECLARATORREST,  3));
        state120.put("PLUS", new SymbolState(57));
        state477.put("SHORT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state45.put("EXPRESSION3", new SymbolState(60));
        state56.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state239.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  0));
        state45.put("EXPRESSION2", new SymbolState(61));
        Map<String, SymbolState> state11 = new HashMap<String, SymbolState>();
        rules.put(11, state11);
        state11.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state266.put("FLOAT", new SymbolState(LITERAL,  1));
        state266.put("DOUBLE", new SymbolState(LITERAL,  1));
        state45.put("EXPRESSION1", new SymbolState(62));
        state176.put("BYTE", new SymbolState(MODIFIER,  1));
        state451.put("FALSE", new SymbolState(191));
        state164.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state365.put("LONG", new SymbolState(BRACKETSOPT,  1));
        state563.put("ID", new SymbolState(VARIABLEDECLARATORREST,  3));
        state272.put("DOUBLE", new SymbolState(EXPRESSION3,  2));
        state36.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state227.put("TYPE", new SymbolState(54));
        state95.put("INTEGERLITERAL", new SymbolState(192));
        state369.put("NULL", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state40 = new HashMap<String, SymbolState>();
        rules.put(40, state40);
        state40.put("COMMA", new SymbolState(BASICTYPE,  1));
        state185.put("PREFIXOP", new SymbolState(185));
        state174.put("LITERAL", new SymbolState(193));
        state306.put("DOUBLE", new SymbolState(LITERAL,  1));
        state301.put("LITERAL", new SymbolState(83));
        state59.put("TYPE", new SymbolState(59));
        state451.put("BASICTYPE", new SymbolState(141));
        state439.put("LONG", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state254 = new HashMap<String, SymbolState>();
        rules.put(254, state254);
        state254.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state252.put("FLOAT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state445.put("INT", new SymbolState(78));
        state182.put("BOOLEANLITERAL", new SymbolState(39));
        state430.put("BASICTYPE", new SymbolState(141));
        Map<String, SymbolState> state612 = new HashMap<String, SymbolState>();
        rules.put(612, state612);
        state612.put("LONG", new SymbolState(194));
        state49.put("IDENTIFIER", new SymbolState(26));
        state41.put("SHORT", new SymbolState(20));
        state553.put("ID", new SymbolState(INTEGERLITERAL,  1));
        state445.put("PAREXPRESSION", new SymbolState(100));
        state500.put("RBRACE", new SymbolState(IDENTIFIER,  1));
        state244.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state257 = new HashMap<String, SymbolState>();
        rules.put(257, state257);
        state257.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state7 = new HashMap<String, SymbolState>();
        rules.put(7, state7);
        state7.put("LBRACKET", new SymbolState(ARGUMENTS,  2));
        state565.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state393.put("EXPRESSION2REST", new SymbolState(195));
        state136.put("PLUS", new SymbolState(57));
        state136.put("INTEGERLITERAL", new SymbolState(153));
        Map<String, SymbolState> state159 = new HashMap<String, SymbolState>();
        rules.put(159, state159);
        state159.put("LBRACKET", new SymbolState(LITERAL,  1));
        state596.put("LBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state5.put("TYPE", new SymbolState(5));
        Map<String, SymbolState> state518 = new HashMap<String, SymbolState>();
        rules.put(518, state518);
        state518.put("DOT", new SymbolState(IDENTIFIER,  1));
        state99.put("BASICTYPE", new SymbolState(141));
        state38.put("SEMI", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state343 = new HashMap<String, SymbolState>();
        rules.put(343, state343);
        state343.put("RPAREN", new SymbolState(TYPE,  1));
        state38.put("FLOAT", new SymbolState(LITERAL,  1));
        state176.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state6.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state365.put("BECOMES", new SymbolState(BRACKETSOPT,  1));
        state387.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state256.put("ID", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state459 = new HashMap<String, SymbolState>();
        rules.put(459, state459);
        state459.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state569 = new HashMap<String, SymbolState>();
        rules.put(569, state569);
        state569.put("CLASSBODY", new SymbolState(196));
        state342.put("N_DOT_IDENTIFIER_0", new SymbolState(197));
        state111.put("ID", new SymbolState(BASICTYPE,  1));
        state466.put("SHORT", new SymbolState(IDENTIFIER,  1));
        state309.put("FLOAT", new SymbolState(LITERAL,  1));
        state31.put("BYTE", new SymbolState(1));
        Map<String, SymbolState> state199 = new HashMap<String, SymbolState>();
        rules.put(199, state199);
        state199.put("RPAREN", new SymbolState(IDENTIFIER,  1));
        state195.put("LONG", new SymbolState(EXPRESSION2,  2));
        state448.put("SHORT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state158.put("MINUS", new SymbolState(10));
        state213.put("FLOAT", new SymbolState(8));
        state230.put("DOUBLE", new SymbolState(EXPRESSION3,  2));
        state188.put("SELECTOR", new SymbolState(198));
        state5.put("BOOLEANLITERAL", new SymbolState(39));
        state598.put("VOLATILE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state406 = new HashMap<String, SymbolState>();
        rules.put(406, state406);
        state406.put("INSTANCEOF", new SymbolState(PAREXPRESSION,  3));
        state408.put("LONG", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        Map<String, SymbolState> state618 = new HashMap<String, SymbolState>();
        rules.put(618, state618);
        state618.put("ID", new SymbolState(199));
        state611.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state298.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state57.put("EXCLAMATION", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state601 = new HashMap<String, SymbolState>();
        rules.put(601, state601);
        state601.put("IDENTIFIER", new SymbolState(200));
        state611.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state437.put("BECOMES", new SymbolState(IDENTIFIER,  1));
        state19.put("SEMI", new SymbolState(MEMBERDECL,  1));
        state613.put("BECOMES", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state520 = new HashMap<String, SymbolState>();
        rules.put(520, state520);
        state520.put("LONG", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state545 = new HashMap<String, SymbolState>();
        rules.put(545, state545);
        state545.put("LBRACKET", new SymbolState(PAREXPRESSION,  3));
        state398.put("RBRACE", new SymbolState(CLASSBODYDECLARATION,  2));
        state596.put("CHAR", new SymbolState(N_SELECTOR_0,  2));
        state466.put("DOUBLE", new SymbolState(IDENTIFIER,  1));
        state54.put("PLUS", new SymbolState(57));
        state611.put("BRACKETSOPT", new SymbolState(201));
        state136.put("BOOLEAN", new SymbolState(56));
        state50.put("IDENTIFIER", new SymbolState(26));
        state29.put("FLOAT", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state151 = new HashMap<String, SymbolState>();
        rules.put(151, state151);
        state151.put("INTERFACEBODY", new SymbolState(202));
        state631.put("SHORT", new SymbolState(203));
        state176.put("FINAL", new SymbolState(MODIFIER,  1));
        state455.put("BYTE", new SymbolState(BASICTYPE,  1));
        state534.put("CHAR", new SymbolState(MODIFIER,  1));
        state134.put("FALSE", new SymbolState(191));
        state27.put("IDENTIFIER", new SymbolState(26));
        state45.put("LITERAL", new SymbolState(204));
        state259.put("SHORT", new SymbolState(20));
        state102.put("BECOMES", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state82 = new HashMap<String, SymbolState>();
        rules.put(82, state82);
        state82.put("N_COMMA_EXPRESSION_0", new SymbolState(205));
        state140.put("SHORT", new SymbolState(20));
        state208.put("BOOLEAN", new SymbolState(206));
        state353.put("SHORT", new SymbolState(LITERAL,  1));
        state102.put("SHORT", new SymbolState(SELECTOR,  2));
        state280.put("INT", new SymbolState(78));
        state175.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state150.put("DOT", new SymbolState(IDENTIFIER,  1));
        state30.put("LPAREN", new SymbolState(158));
        Map<String, SymbolState> state63 = new HashMap<String, SymbolState>();
        rules.put(63, state63);
        state63.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state259.put("EXPRESSION3", new SymbolState(207));
        state182.put("PLUS", new SymbolState(57));
        state587.put("DOUBLE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state71 = new HashMap<String, SymbolState>();
        rules.put(71, state71);
        state71.put("CHAR", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state554 = new HashMap<String, SymbolState>();
        rules.put(554, state554);
        state554.put("DOT", new SymbolState(SELECTOR,  3));
        state174.put("MINUS", new SymbolState(10));
        Map<String, SymbolState> state212 = new HashMap<String, SymbolState>();
        rules.put(212, state212);
        state212.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state261.put("BYTE", new SymbolState(1));
        state481.put("ID", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state30.put("CHAR", new SymbolState(81));
        state57.put("ID", new SymbolState(PREFIXOP,  1));
        state420.put("LONG", new SymbolState(MODIFIER,  1));
        state259.put("BOOLEAN", new SymbolState(56));
        state251.put("PRIMARY", new SymbolState(167));
        state261.put("EXCLAMATION", new SymbolState(44));
        state455.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state14.put("PREFIXOP", new SymbolState(124));
        Map<String, SymbolState> state571 = new HashMap<String, SymbolState>();
        rules.put(571, state571);
        state571.put("EXTENDS", new SymbolState(208));
        state153.put("DOT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state474 = new HashMap<String, SymbolState>();
        rules.put(474, state474);
        state474.put("INSTANCEOF", new SymbolState(ARGUMENTS,  4));
        state224.put("RBRACE", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state202 = new HashMap<String, SymbolState>();
        rules.put(202, state202);
        state202.put("SEMI", new SymbolState(INTERFACEDECLARATION,  3));
        state512.put("INTERFACE", new SymbolState(IMPORTDECLARATION,  4));
        state184.put("LONG", new SymbolState(6));
        state359.put("SHORT", new SymbolState(20));
        Map<String, SymbolState> state341 = new HashMap<String, SymbolState>();
        rules.put(341, state341);
        state341.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state273 = new HashMap<String, SymbolState>();
        rules.put(273, state273);
        state273.put("RPAREN", new SymbolState(LITERAL,  1));
        state160.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state435 = new HashMap<String, SymbolState>();
        rules.put(435, state435);
        state435.put("SEMI", new SymbolState(INTERFACEBODY,  3));
        state534.put("BYTE", new SymbolState(MODIFIER,  1));
        state45.put("CHAR", new SymbolState(81));
        state155.put("DOT", new SymbolState(LITERAL,  1));
        state261.put("INT", new SymbolState(78));
        state223.put("LBRACKET", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state69 = new HashMap<String, SymbolState>();
        rules.put(69, state69);
        state69.put("RPAREN", new SymbolState(LITERAL,  1));
        state185.put("BOOLEAN", new SymbolState(56));
        state251.put("INTEGERLITERAL", new SymbolState(192));
        state266.put("LONG", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state290 = new HashMap<String, SymbolState>();
        rules.put(290, state290);
        state290.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state376.put("RBRACE", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state10 = new HashMap<String, SymbolState>();
        rules.put(10, state10);
        state10.put("INT", new SymbolState(PREFIXOP,  1));
        state369.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state290.put("RBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state179 = new HashMap<String, SymbolState>();
        rules.put(179, state179);
        state179.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state142.put("BECOMES", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state144 = new HashMap<String, SymbolState>();
        rules.put(144, state144);
        state144.put("RBRACKET", new SymbolState(209));
        Map<String, SymbolState> state538 = new HashMap<String, SymbolState>();
        rules.put(538, state538);
        state538.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state417.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state581.put("INT", new SymbolState(78));
        state261.put("LONG", new SymbolState(6));
        state263.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state605.put("BOOLEAN", new SymbolState(210));
        state227.put("LPAREN", new SymbolState(158));
        Map<String, SymbolState> state441 = new HashMap<String, SymbolState>();
        rules.put(441, state441);
        state441.put("RPAREN", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state194 = new HashMap<String, SymbolState>();
        rules.put(194, state194);
        state194.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state335.put("FLOAT", new SymbolState(EXPRESSION3,  2));
        state492.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state463 = new HashMap<String, SymbolState>();
        rules.put(463, state463);
        state463.put("COMMA", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state575.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state594 = new HashMap<String, SymbolState>();
        rules.put(594, state594);
        state594.put("RPAREN", new SymbolState(SELECTOR,  3));
        state431.put("DOT", new SymbolState(PAREXPRESSION,  3));
        state81.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state134.put("BYTE", new SymbolState(1));
        Map<String, SymbolState> state88 = new HashMap<String, SymbolState>();
        rules.put(88, state88);
        state88.put("DOT", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state287 = new HashMap<String, SymbolState>();
        rules.put(287, state287);
        state287.put("IDENTIFIER", new SymbolState(211));
        state614.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state36.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state8.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state514.put("SEMI", new SymbolState(MODIFIERS,  2));
        state605.put("CHAR", new SymbolState(212));
        state631.put("BYTE", new SymbolState(152));
        state20.put("LONG", new SymbolState(BASICTYPE,  1));
        state489.put("LBRACKET", new SymbolState(SELECTOR,  2));
        state158.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        state124.put("IDENTIFIER", new SymbolState(26));
        state301.put("EXCLAMATION", new SymbolState(44));
        state50.put("EXCLAMATION", new SymbolState(44));
        state362.put("BYTE", new SymbolState(EXPRESSION2,  1));
        state515.put("SEMI", new SymbolState(N_SELECTOR_0,  2));
        state155.put("RPAREN", new SymbolState(LITERAL,  1));
        state186.put("INT", new SymbolState(IDENTIFIER,  1));
        state457.put("PAREXPRESSION", new SymbolState(100));
        state364.put("RBRACE", new SymbolState(EXPRESSION,  3));
        state518.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state454.put("DOT", new SymbolState(SELECTOR,  2));
        state184.put("PLUS", new SymbolState(57));
        state111.put("BYTE", new SymbolState(BASICTYPE,  1));
        state344.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        Map<String, SymbolState> state47 = new HashMap<String, SymbolState>();
        rules.put(47, state47);
        state47.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state528.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state387.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state347.put("BOOLEAN", new SymbolState(56));
        state578.put("LBRACKET", new SymbolState(213));
        state597.put("LBRACE", new SymbolState(N_COMMA_TYPE_0,  0));
        state301.put("INT", new SymbolState(78));
        state301.put("FLOAT", new SymbolState(8));
        state577.put("STATIC", new SymbolState(MODIFIERS,  2));
        state482.put("SEMI", new SymbolState(BASICTYPE,  1));
        state45.put("DOUBLE", new SymbolState(17));
        Map<String, SymbolState> state505 = new HashMap<String, SymbolState>();
        rules.put(505, state505);
        state505.put("DOT", new SymbolState(SELECTOR,  3));
        state31.put("EXPRESSION2", new SymbolState(113));
        state81.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state31.put("EXPRESSION1", new SymbolState(115));
        state43.put("RBRACKET", new SymbolState(SELECTOR,  3));
        state31.put("EXPRESSION3", new SymbolState(114));
        state551.put("INT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state369.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state182.put("STR_LITERAL", new SymbolState(214));
        state455.put("SHORT", new SymbolState(BASICTYPE,  1));
        state1.put("NULL", new SymbolState(BASICTYPE,  1));
        state17.put("MINUS", new SymbolState(BASICTYPE,  1));
        state182.put("PAREXPRESSION", new SymbolState(100));
        Map<String, SymbolState> state371 = new HashMap<String, SymbolState>();
        rules.put(371, state371);
        state371.put("ID", new SymbolState(215));
        state58.put("SHORT", new SymbolState(MODIFIER,  1));
        state49.put("LPAREN", new SymbolState(30));
        state451.put("BOOLEANLITERAL", new SymbolState(131));
        state109.put("INSTANCEOF", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state328 = new HashMap<String, SymbolState>();
        rules.put(328, state328);
        state328.put("BECOMES", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state107 = new HashMap<String, SymbolState>();
        rules.put(107, state107);
        state107.put("DOT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state460 = new HashMap<String, SymbolState>();
        rules.put(460, state460);
        state460.put("RBRACE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state223.put("RPAREN", new SymbolState(PRIMARY,  1));
        state129.put("ID", new SymbolState(TYPE,  1));
        state158.put("STR_LITERAL", new SymbolState(155));
        Map<String, SymbolState> state416 = new HashMap<String, SymbolState>();
        rules.put(416, state416);
        state416.put("CHAR", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state222 = new HashMap<String, SymbolState>();
        rules.put(222, state222);
        state222.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state506.put("DOUBLE", new SymbolState(SELECTOR,  3));
        state562.put("CHAR", new SymbolState(N_SELECTOR_0,  0));
        state42.put("SHORT", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state487 = new HashMap<String, SymbolState>();
        rules.put(487, state487);
        state487.put("IF", new SymbolState(S,  2));
        state21.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state42.put("DOUBLE", new SymbolState(PRIMARY,  1));
        state111.put("RBRACE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state349 = new HashMap<String, SymbolState>();
        rules.put(349, state349);
        state349.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state212.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state186.put("FLOAT", new SymbolState(IDENTIFIER,  1));
        state417.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state243.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state515.put("INT", new SymbolState(N_SELECTOR_0,  2));
        state482.put("LONG", new SymbolState(BASICTYPE,  1));
        state365.put("SHORT", new SymbolState(BRACKETSOPT,  1));
        Map<String, SymbolState> state312 = new HashMap<String, SymbolState>();
        rules.put(312, state312);
        state312.put("RPAREN", new SymbolState(216));
        state95.put("PAREXPRESSION", new SymbolState(217));
        state280.put("PRIMARY", new SymbolState(94));
        state369.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state221.put("BOOLEAN", new SymbolState(SELECTOR,  3));
        state490.put("STATIC", new SymbolState(MODIFIER,  1));
        state185.put("BASICTYPE", new SymbolState(141));
        state457.put("TYPE", new SymbolState(5));
        state215.put("RBRACE", new SymbolState(IDENTIFIER,  1));
        state457.put("LITERAL", new SymbolState(74));
        state6.put("INT", new SymbolState(BASICTYPE,  1));
        state10.put("CHAR", new SymbolState(PREFIXOP,  1));
        state61.put("COMMA", new SymbolState(EXPRESSION1,  1));
        state248.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state244.put("VARIABLEDECLARATORREST", new SymbolState(218));
        state588.put("DOUBLE", new SymbolState(ARGUMENTS,  2));
        state1.put("SHORT", new SymbolState(BASICTYPE,  1));
        state99.put("BOOLEANLITERAL", new SymbolState(219));
        Map<String, SymbolState> state352 = new HashMap<String, SymbolState>();
        rules.put(352, state352);
        state352.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state120.put("BYTE", new SymbolState(1));
        state10.put("NULL", new SymbolState(PREFIXOP,  1));
        state135.put("COMMA", new SymbolState(N_SELECTOR_0,  2));
        Map<String, SymbolState> state262 = new HashMap<String, SymbolState>();
        rules.put(262, state262);
        state262.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state280.put("IDENTIFIER", new SymbolState(26));
        state146.put("INT", new SymbolState(78));
        state272.put("SEMI", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state305 = new HashMap<String, SymbolState>();
        rules.put(305, state305);
        state305.put("N_COMMA_EXPRESSION_0", new SymbolState(220));
        state443.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state420.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state172.put("INT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state426 = new HashMap<String, SymbolState>();
        rules.put(426, state426);
        state426.put("RBRACKET", new SymbolState(221));
        state553.put("LONG", new SymbolState(INTEGERLITERAL,  1));
        state191.put("DOUBLE", new SymbolState(BOOLEANLITERAL,  1));
        state182.put("BYTE", new SymbolState(1));
        state95.put("FALSE", new SymbolState(222));
        state374.put("BOOLEANLITERAL", new SymbolState(143));
        state451.put("LITERAL", new SymbolState(193));
        state185.put("FLOAT", new SymbolState(8));
        state458.put("SHORT", new SymbolState(203));
        Map<String, SymbolState> state397 = new HashMap<String, SymbolState>();
        rules.put(397, state397);
        state397.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state433.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state311.put("PLUS", new SymbolState(57));
        state36.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state389.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state45.put("PAREXPRESSION", new SymbolState(223));
        state301.put("IDENTIFIER", new SymbolState(26));
        state7.put("DOT", new SymbolState(ARGUMENTS,  2));
        state359.put("PAREXPRESSION", new SymbolState(224));
        state241.put("LBRACE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state75.put("LONG", new SymbolState(LITERAL,  1));
        state406.put("RPAREN", new SymbolState(PAREXPRESSION,  3));
        state445.put("INTEGERLITERAL", new SymbolState(153));
        state120.put("LONG", new SymbolState(6));
        state146.put("NULL", new SymbolState(225));
        Map<String, SymbolState> state117 = new HashMap<String, SymbolState>();
        rules.put(117, state117);
        state117.put("COMMA", new SymbolState(SELECTOR,  3));
        state390.put("BOOLEAN", new SymbolState(EXPRESSION,  1));
        state186.put("ID", new SymbolState(IDENTIFIER,  1));
        state227.put("DOUBLE", new SymbolState(17));
        state10.put("TRUE", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state418 = new HashMap<String, SymbolState>();
        rules.put(418, state418);
        state418.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state139.put("CHAR_LITERAL", new SymbolState(159));
        Map<String, SymbolState> state198 = new HashMap<String, SymbolState>();
        rules.put(198, state198);
        state198.put("DOT", new SymbolState(N_SELECTOR_0,  2));
        state534.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state347.put("RPAREN", new SymbolState(226));
        Map<String, SymbolState> state442 = new HashMap<String, SymbolState>();
        rules.put(442, state442);
        state442.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state555.put("EOF", new SymbolState(INTERFACEDECLARATION,  5));
        state589.put("SHORT", new SymbolState(SELECTOR,  3));
        state311.put("LPAREN", new SymbolState(227));
        state587.put("ID", new SymbolState(MODIFIER,  1));
        state71.put("DOT", new SymbolState(LITERAL,  1));
        state430.put("FALSE", new SymbolState(37));
        state388.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  2));
        Map<String, SymbolState> state485 = new HashMap<String, SymbolState>();
        rules.put(485, state485);
        state485.put("IDENTIFIER", new SymbolState(228));
        state45.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state14.put("PRIMARY", new SymbolState(163));
        state120.put("INT", new SymbolState(78));
        state32.put("TYPE", new SymbolState(229));
        state437.put("DOT", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state106 = new HashMap<String, SymbolState>();
        rules.put(106, state106);
        state106.put("COMMA", new SymbolState(EXPRESSION1,  1));
        state256.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state23.put("FLOAT", new SymbolState(BOOLEANLITERAL,  1));
        state41.put("MINUS", new SymbolState(10));
        Map<String, SymbolState> state363 = new HashMap<String, SymbolState>();
        rules.put(363, state363);
        state363.put("SEMI", new SymbolState(EXPRESSION1,  1));
        state554.put("RBRACKET", new SymbolState(SELECTOR,  3));
        state459.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state316.put("DOT", new SymbolState(PAREXPRESSION,  3));
        state551.put("DOUBLE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state134.put("FLOAT", new SymbolState(8));
        state445.put("ID", new SymbolState(51));
        state446.put("STR_LITERAL", new SymbolState(214));
        state71.put("SHORT", new SymbolState(LITERAL,  1));
        state44.put("LPAREN", new SymbolState(PREFIXOP,  1));
        state579.put("STR_LITERAL", new SymbolState(TYPE,  3));
        state120.put("EXPRESSION3", new SymbolState(230));
        state54.put("EXCLAMATION", new SymbolState(44));
        state278.put("INTEGERLITERAL", new SymbolState(231));
        state341.put("COMMA", new SymbolState(EXPRESSION3,  2));
        state119.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state108.put("BYTE", new SymbolState(BOOLEANLITERAL,  1));
        state172.put("LONG", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state133 = new HashMap<String, SymbolState>();
        rules.put(133, state133);
        state133.put("ID", new SymbolState(BASICTYPE,  1));
        state30.put("EXPRESSION", new SymbolState(232));
        state451.put("BOOLEAN", new SymbolState(56));
        Map<String, SymbolState> state543 = new HashMap<String, SymbolState>();
        rules.put(543, state543);
        state543.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state405.put("DOUBLE", new SymbolState(VARIABLEINITIALIZER,  1));
        Map<String, SymbolState> state218 = new HashMap<String, SymbolState>();
        rules.put(218, state218);
        state218.put("FLOAT", new SymbolState(METHODORFIELDREST,  1));
        state460.put("SEMI", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state450.put("RBRACKET", new SymbolState(SELECTOR,  2));
        state51.put("ID", new SymbolState(IDENTIFIER,  1));
        state0.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state30.put("EXPRESSION3", new SymbolState(114));
        state213.put("EXPRESSION2", new SymbolState(91));
        state30.put("EXPRESSION2", new SymbolState(113));
        state213.put("EXPRESSION1", new SymbolState(90));
        state30.put("EXPRESSION1", new SymbolState(115));
        state213.put("EXPRESSION3", new SymbolState(92));
        state417.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state377.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state215.put("ID", new SymbolState(IDENTIFIER,  1));
        state439.put("NATIVE", new SymbolState(MODIFIER,  1));
        state54.put("MINUS", new SymbolState(10));
        state459.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state427 = new HashMap<String, SymbolState>();
        rules.put(427, state427);
        state427.put("LBRACKET", new SymbolState(233));
        state182.put("BASICTYPE", new SymbolState(141));
        state15.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state31.put("DOUBLE", new SymbolState(17));
        Map<String, SymbolState> state66 = new HashMap<String, SymbolState>();
        rules.put(66, state66);
        state66.put("LBRACKET", new SymbolState(LITERAL,  1));
        state506.put("BYTE", new SymbolState(SELECTOR,  3));
        state351.put("PRIMARY", new SymbolState(163));
        state139.put("NULL", new SymbolState(166));
        state266.put("SEMI", new SymbolState(LITERAL,  1));
        state430.put("BOOLEANLITERAL", new SymbolState(143));
        state136.put("NULL", new SymbolState(166));
        state260.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state403.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state185.put("IDENTIFIER", new SymbolState(26));
        state499.put("EXPRESSION1", new SymbolState(62));
        state499.put("EXPRESSION2", new SymbolState(61));
        state499.put("EXPRESSION3", new SymbolState(60));
        state31.put("FLOAT", new SymbolState(8));
        state376.put("DOT", new SymbolState(SELECTOR,  2));
        state140.put("PRIMARY", new SymbolState(234));
        state273.put("DOT", new SymbolState(LITERAL,  1));
        state134.put("TRUE", new SymbolState(108));
        state185.put("SHORT", new SymbolState(20));
        state45.put("INTEGERLITERAL", new SymbolState(231));
        state441.put("COMMA", new SymbolState(LITERAL,  1));
        state224.put("LONG", new SymbolState(PRIMARY,  1));
        state248.put("INTERFACE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state274 = new HashMap<String, SymbolState>();
        rules.put(274, state274);
        state274.put("QUALIFIEDIDENTIFIER", new SymbolState(235));
        state280.put("CHAR_LITERAL", new SymbolState(69));
        state60.put("BECOMES", new SymbolState(EXPRESSION2,  1));
        state401.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state39 = new HashMap<String, SymbolState>();
        rules.put(39, state39);
        state39.put("DOT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state271 = new HashMap<String, SymbolState>();
        rules.put(271, state271);
        state271.put("DOT", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state413 = new HashMap<String, SymbolState>();
        rules.put(413, state413);
        state413.put("INTERFACE", new SymbolState(CLASSDECLARATION,  5));
        state405.put("BOOLEAN", new SymbolState(VARIABLEINITIALIZER,  1));
        state86.put("DOUBLE", new SymbolState(236));
        state390.put("BECOMES", new SymbolState(237));
        state613.put("BYTE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state600 = new HashMap<String, SymbolState>();
        rules.put(600, state600);
        state600.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state89.put("RBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state206 = new HashMap<String, SymbolState>();
        rules.put(206, state206);
        state206.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state172.put("FLOAT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state595 = new HashMap<String, SymbolState>();
        rules.put(595, state595);
        state595.put("CHAR", new SymbolState(PAREXPRESSION,  3));
        state126.put("DOUBLE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state230.put("RBRACE", new SymbolState(EXPRESSION3,  2));
        state51.put("FLOAT", new SymbolState(IDENTIFIER,  1));
        state398.put("ID", new SymbolState(CLASSBODYDECLARATION,  2));
        state49.put("NULL", new SymbolState(166));
        state251.put("BOOLEAN", new SymbolState(56));
        state280.put("PLUS", new SymbolState(57));
        state306.put("ID", new SymbolState(LITERAL,  1));
        state280.put("LONG", new SymbolState(6));
        state27.put("NULL", new SymbolState(166));
        state56.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state527.put("SHORT", new SymbolState(238));
        state309.put("SEMI", new SymbolState(LITERAL,  1));
        state26.put("NULL", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state50.put("PRIMARY", new SymbolState(239));
        state31.put("LITERAL", new SymbolState(83));
        Map<String, SymbolState> state92 = new HashMap<String, SymbolState>();
        rules.put(92, state92);
        state92.put("RBRACKET", new SymbolState(EXPRESSION2,  1));
        state20.put("FALSE", new SymbolState(BASICTYPE,  1));
        state499.put("PAREXPRESSION", new SymbolState(223));
        state50.put("NULL", new SymbolState(225));
        state458.put("TYPELIST", new SymbolState(240));
        state595.put("BYTE", new SymbolState(PAREXPRESSION,  3));
        state178.put("TRUE", new SymbolState(BRACKETSOPT,  1));
        state140.put("PAREXPRESSION", new SymbolState(224));
        state488.put("FLOAT", new SymbolState(EXPRESSION3,  2));
        state252.put("BYTE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state109.put("LONG", new SymbolState(PAREXPRESSION,  3));
        state631.put("IDENTIFIER", new SymbolState(241));
        state374.put("MINUS", new SymbolState(10));
        state611.put("N_LBRACKET_RBRACKET_0", new SymbolState(242));
        state174.put("BYTE", new SymbolState(1));
        state403.put("FINAL", new SymbolState(MODIFIER,  1));
        state334.put("IDENTIFIER", new SymbolState(241));
        state121.put("STRICTFP", new SymbolState(243));
        state261.put("FLOAT", new SymbolState(8));
        state374.put("PREFIXOP", new SymbolState(185));
        Map<String, SymbolState> state228 = new HashMap<String, SymbolState>();
        rules.put(228, state228);
        state228.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        Map<String, SymbolState> state410 = new HashMap<String, SymbolState>();
        rules.put(410, state410);
        state410.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state136.put("ID", new SymbolState(51));
        state371.put("IDENTIFIER", new SymbolState(244));
        state347.put("CHAR", new SymbolState(81));
        state99.put("NULL", new SymbolState(11));
        state631.put("FLOAT", new SymbolState(245));
        state109.put("BECOMES", new SymbolState(PAREXPRESSION,  3));
        state528.put("BYTE", new SymbolState(BASICTYPE,  1));
        state351.put("PREFIXOP", new SymbolState(124));
        state104.put("COMMA", new SymbolState(EXPRESSION2,  2));
        state64.put("RBRACE", new SymbolState(EXPRESSION3,  2));
        state300.put("SEMI", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state152 = new HashMap<String, SymbolState>();
        rules.put(152, state152);
        state152.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state219.put("DOT", new SymbolState(LITERAL,  1));
        state446.put("IDENTIFIER", new SymbolState(26));
        state175.put("LBRACKET", new SymbolState(LITERAL,  1));
        state251.put("FALSE", new SymbolState(222));
        state610.put("BOOLEAN", new SymbolState(246));
        state10.put("CHAR_LITERAL", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state494 = new HashMap<String, SymbolState>();
        rules.put(494, state494);
        state494.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state451.put("ID", new SymbolState(51));
        state551.put("BYTE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state20.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state173.put("RPAREN", new SymbolState(SELECTOR,  3));
        state610.put("BASICTYPE", new SymbolState(247));
        state185.put("INT", new SymbolState(78));
        state253.put("INSTANCEOF", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state484 = new HashMap<String, SymbolState>();
        rules.put(484, state484);
        state484.put("BYTE", new SymbolState(BASICTYPE,  1));
        state294.put("DOUBLE", new SymbolState(SELECTOR,  3));
        state159.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state126.put("INT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state54.put("ID", new SymbolState(51));
        Map<String, SymbolState> state113 = new HashMap<String, SymbolState>();
        rules.put(113, state113);
        state113.put("BECOMES", new SymbolState(EXPRESSION1,  1));
        state524.put("FLOAT", new SymbolState(TYPE,  1));
        state121.put("ABSTRACT", new SymbolState(248));
        state365.put("CHAR", new SymbolState(BRACKETSOPT,  1));
        state177.put("BECOMES", new SymbolState(SELECTOR,  3));
        state174.put("FALSE", new SymbolState(191));
        state562.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  0));
        state605.put("BASICTYPE", new SymbolState(249));
        state269.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state263.put("STRICTFP", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state535 = new HashMap<String, SymbolState>();
        rules.put(535, state535);
        state535.put("COMMA", new SymbolState(BASICTYPE,  1));
        state374.put("FALSE", new SymbolState(37));
        state218.put("LONG", new SymbolState(METHODORFIELDREST,  1));
        state457.put("FLOAT", new SymbolState(8));
        state178.put("EXCLAMATION", new SymbolState(BRACKETSOPT,  1));
        state185.put("PLUS", new SymbolState(57));
        state197.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state205 = new HashMap<String, SymbolState>();
        rules.put(205, state205);
        state205.put("RPAREN", new SymbolState(250));
        Map<String, SymbolState> state465 = new HashMap<String, SymbolState>();
        rules.put(465, state465);
        state465.put("DOT", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state307 = new HashMap<String, SymbolState>();
        rules.put(307, state307);
        state307.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state347.put("LITERAL", new SymbolState(204));
        state74.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state505.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state254.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state93.put("ID", new SymbolState(MODIFIER,  1));
        state272.put("CHAR", new SymbolState(EXPRESSION3,  2));
        state59.put("PREFIXOP", new SymbolState(251));
        Map<String, SymbolState> state246 = new HashMap<String, SymbolState>();
        rules.put(246, state246);
        state246.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state534.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state359.put("EXCLAMATION", new SymbolState(44));
        state129.put("INT", new SymbolState(TYPE,  1));
        state27.put("CHAR", new SymbolState(81));
        Map<String, SymbolState> state361 = new HashMap<String, SymbolState>();
        rules.put(361, state361);
        state361.put("COMMA", new SymbolState(BRACKETSOPT,  1));
        Map<String, SymbolState> state295 = new HashMap<String, SymbolState>();
        rules.put(295, state295);
        state295.put("FLOAT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state630 = new HashMap<String, SymbolState>();
        rules.put(630, state630);
        state630.put("LBRACE", new SymbolState(252));
        state278.put("NULL", new SymbolState(107));
        state343.put("COMMA", new SymbolState(TYPE,  1));
        state58.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state490.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state522.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state485.put("ID", new SymbolState(125));
        state54.put("NULL", new SymbolState(16));
        state198.put("RBRACKET", new SymbolState(N_SELECTOR_0,  2));
        Map<String, SymbolState> state282 = new HashMap<String, SymbolState>();
        rules.put(282, state282);
        state282.put("BECOMES", new SymbolState(EXPRESSION2REST,  2));
        state259.put("INTEGERLITERAL", new SymbolState(231));
        state10.put("FLOAT", new SymbolState(PREFIXOP,  1));
        state295.put("INT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state311.put("SHORT", new SymbolState(20));
        state140.put("DECIMAL_INTEGER_LITERAL", new SymbolState(253));
        state187.put("INT", new SymbolState(ARGUMENTS,  4));
        state261.put("EXPRESSION1", new SymbolState(115));
        state0.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state261.put("EXPRESSION3", new SymbolState(114));
        state261.put("EXPRESSION2", new SymbolState(113));
        state428.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  2));
        state160.put("PRIVATE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state507 = new HashMap<String, SymbolState>();
        rules.put(507, state507);
        state507.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state93.put("SEMI", new SymbolState(MODIFIER,  1));
        state614.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state509.put("BYTE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state366 = new HashMap<String, SymbolState>();
        rules.put(366, state366);
        state366.put("BECOMES", new SymbolState(TYPE,  1));
        state182.put("BOOLEAN", new SymbolState(56));
        state134.put("INTEGERLITERAL", new SymbolState(71));
        state162.put("SEMI", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state569.put("LBRACE", new SymbolState(252));
        state311.put("TRUE", new SymbolState(254));
        state522.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state49.put("DOUBLE", new SymbolState(17));
        state146.put("CHAR_LITERAL", new SymbolState(255));
        state203.put("COMMA", new SymbolState(BASICTYPE,  1));
        state11.put("LBRACKET", new SymbolState(LITERAL,  1));
        state510.put("DOUBLE", new SymbolState(256));
        state50.put("FALSE", new SymbolState(257));
        state294.put("RBRACE", new SymbolState(SELECTOR,  3));
        state237.put("LPAREN", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state589.put("SEMI", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state582 = new HashMap<String, SymbolState>();
        rules.put(582, state582);
        state582.put("DOT", new SymbolState(258));
        state455.put("LONG", new SymbolState(BASICTYPE,  1));
        state430.put("PRIMARY", new SymbolState(94));
        state20.put("ID", new SymbolState(BASICTYPE,  1));
        state237.put("EXCLAMATION", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state359.put("DECIMAL_INTEGER_LITERAL", new SymbolState(253));
        state171.put("TYPE", new SymbolState(259));
        state182.put("TRUE", new SymbolState(260));
        Map<String, SymbolState> state53 = new HashMap<String, SymbolState>();
        rules.put(53, state53);
        state53.put("COMMA", new SymbolState(BASICTYPE,  1));
        state120.put("BOOLEANLITERAL", new SymbolState(75));
        state8.put("MINUS", new SymbolState(BASICTYPE,  1));
        state408.put("INT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state201.put("FLOAT", new SymbolState(TYPE,  3));
        state47.put("COMMA", new SymbolState(BASICTYPE,  1));
        state459.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state275.put("SEMI", new SymbolState(MODIFIER,  1));
        state551.put("TRUE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state49.put("PREFIXOP", new SymbolState(139));
        Map<String, SymbolState> state170 = new HashMap<String, SymbolState>();
        rules.put(170, state170);
        state170.put("RPAREN", new SymbolState(LITERAL,  1));
        state20.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state65.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state159.put("DOT", new SymbolState(LITERAL,  1));
        state108.put("RBRACE", new SymbolState(BOOLEANLITERAL,  1));
        state184.put("LPAREN", new SymbolState(261));
        state347.put("STR_LITERAL", new SymbolState(170));
        state162.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state610.put("LONG", new SymbolState(262));
        state420.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state457.put("EXPRESSION3", new SymbolState(92));
        Map<String, SymbolState> state623 = new HashMap<String, SymbolState>();
        rules.put(623, state623);
        state623.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state184.put("BYTE", new SymbolState(1));
        state301.put("NULL", new SymbolState(16));
        Map<String, SymbolState> state573 = new HashMap<String, SymbolState>();
        rules.put(573, state573);
        state573.put("RPAREN", new SymbolState(EXPRESSION1,  1));
        state102.put("LONG", new SymbolState(SELECTOR,  2));
        state588.put("FLOAT", new SymbolState(ARGUMENTS,  2));
        Map<String, SymbolState> state604 = new HashMap<String, SymbolState>();
        rules.put(604, state604);
        state604.put("LBRACKET", new SymbolState(ARGUMENTS,  4));
        state86.put("ABSTRACT", new SymbolState(263));
        Map<String, SymbolState> state542 = new HashMap<String, SymbolState>();
        rules.put(542, state542);
        state542.put("BECOMES", new SymbolState(TYPE,  3));
        state457.put("EXPRESSION1", new SymbolState(90));
        state457.put("EXPRESSION2", new SymbolState(91));
        state99.put("SHORT", new SymbolState(20));
        state614.put("PUBLIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state125 = new HashMap<String, SymbolState>();
        rules.put(125, state125);
        state125.put("LBRACE", new SymbolState(IDENTIFIER,  1));
        state589.put("LONG", new SymbolState(SELECTOR,  3));
        state49.put("TRUE", new SymbolState(260));
        Map<String, SymbolState> state2 = new HashMap<String, SymbolState>();
        rules.put(2, state2);
        state2.put("DOT", new SymbolState(SELECTOR,  3));
        state5.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        state301.put("LPAREN", new SymbolState(158));
        state631.put("DOUBLE", new SymbolState(265));
        state141.put("INT", new SymbolState(TYPE,  1));
        state383.put("STRICTFP", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state486 = new HashMap<String, SymbolState>();
        rules.put(486, state486);
        state486.put("INSTANCEOF", new SymbolState(IDENTIFIER,  1));
        state275.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state242.put("FLOAT", new SymbolState(BRACKETSOPT,  1));
        state465.put("COMMA", new SymbolState(PRIMARY,  1));
        state26.put("CHAR", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state16 = new HashMap<String, SymbolState>();
        rules.put(16, state16);
        state16.put("BECOMES", new SymbolState(LITERAL,  1));
        state261.put("TYPE", new SymbolState(54));
        state225.put("LBRACKET", new SymbolState(LITERAL,  1));
        state195.put("BOOLEAN", new SymbolState(EXPRESSION2,  2));
        state78.put("BYTE", new SymbolState(BASICTYPE,  1));
        state359.put("STR_LITERAL", new SymbolState(266));
        state499.put("STR_LITERAL", new SymbolState(170));
        Map<String, SymbolState> state367 = new HashMap<String, SymbolState>();
        rules.put(367, state367);
        state367.put("DOT", new SymbolState(LITERAL,  1));
        state57.put("DOUBLE", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state94 = new HashMap<String, SymbolState>();
        rules.put(94, state94);
        state94.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  0));
        state59.put("LONG", new SymbolState(6));
        state291.put("MEMBERDECL", new SymbolState(267));
        state306.put("LONG", new SymbolState(LITERAL,  1));
        state280.put("BOOLEAN", new SymbolState(56));
        state81.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state45.put("IDENTIFIER", new SymbolState(26));
        state248.put("STATIC", new SymbolState(MODIFIER,  1));
        state23.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state581.put("NULL", new SymbolState(107));
        state340.put("LONG", new SymbolState(BASICTYPE,  1));
        state140.put("STR_LITERAL", new SymbolState(266));
        state353.put("LONG", new SymbolState(LITERAL,  1));
        state221.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state458.put("IDENTIFIER", new SymbolState(241));
        state114.put("INSTANCEOF", new SymbolState(268));
        Map<String, SymbolState> state130 = new HashMap<String, SymbolState>();
        rules.put(130, state130);
        state130.put("RBRACKET", new SymbolState(269));
        state14.put("LITERAL", new SymbolState(83));
        state517.put("DOT", new SymbolState(270));
        state124.put("LITERAL", new SymbolState(83));
        state141.put("TRUE", new SymbolState(TYPE,  1));
        state271.put("LBRACKET", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state265 = new HashMap<String, SymbolState>();
        rules.put(265, state265);
        state265.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state361.put("RPAREN", new SymbolState(BRACKETSOPT,  1));
        state14.put("PAREXPRESSION", new SymbolState(271));
        state562.put("N_SELECTOR_0", new SymbolState(272));
        state252.put("RBRACE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state237.put("PLUS", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state253.put("INT", new SymbolState(INTEGERLITERAL,  1));
        state251.put("STR_LITERAL", new SymbolState(273));
        state95.put("IDENTIFIER", new SymbolState(26));
        state71.put("ID", new SymbolState(LITERAL,  1));
        state182.put("CHAR_LITERAL", new SymbolState(159));
        state0.put("PACKAGE", new SymbolState(274));
        Map<String, SymbolState> state28 = new HashMap<String, SymbolState>();
        rules.put(28, state28);
        state28.put("SEMI", new SymbolState(TYPEDECLARATION,  1));
        state86.put("NATIVE", new SymbolState(275));
        state612.put("TYPE", new SymbolState(276));
        Map<String, SymbolState> state476 = new HashMap<String, SymbolState>();
        rules.put(476, state476);
        state476.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state311.put("EXCLAMATION", new SymbolState(44));
        state244.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state278.put("EXPRESSION3", new SymbolState(60));
        state123.put("DOT", new SymbolState(277));
        Map<String, SymbolState> state480 = new HashMap<String, SymbolState>();
        rules.put(480, state480);
        state480.put("ID", new SymbolState(TYPE,  3));
        state525.put("LPAREN", new SymbolState(278));
        state266.put("INT", new SymbolState(LITERAL,  1));
        state95.put("DECIMAL_INTEGER_LITERAL", new SymbolState(279));
        Map<String, SymbolState> state62 = new HashMap<String, SymbolState>();
        rules.put(62, state62);
        state62.put("BECOMES", new SymbolState(237));
        state312.put("COMMA", new SymbolState(280));
        state135.put("DOT", new SymbolState(N_SELECTOR_0,  2));
        Map<String, SymbolState> state550 = new HashMap<String, SymbolState>();
        rules.put(550, state550);
        state550.put("DOT", new SymbolState(N_SELECTOR_0,  2));
        state489.put("INSTANCEOF", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state471 = new HashMap<String, SymbolState>();
        rules.put(471, state471);
        state471.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state51.put("SHORT", new SymbolState(IDENTIFIER,  1));
        state102.put("BOOLEAN", new SymbolState(SELECTOR,  2));
        state51.put("DOT", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state336 = new HashMap<String, SymbolState>();
        rules.put(336, state336);
        state336.put("COMMA", new SymbolState(280));
        state146.put("LONG", new SymbolState(6));
        state527.put("LONG", new SymbolState(281));
        state566.put("TYPE", new SymbolState(282));
        state172.put("RBRACE", new SymbolState(LITERAL,  1));
        state191.put("LONG", new SymbolState(BOOLEANLITERAL,  1));
        state316.put("LBRACKET", new SymbolState(PAREXPRESSION,  3));
        state27.put("BOOLEANLITERAL", new SymbolState(39));
        state551.put("CHAR_LITERAL", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state278.put("EXPRESSION2", new SymbolState(61));
        state194.put("SEMI", new SymbolState(BASICTYPE,  1));
        state278.put("EXPRESSION1", new SymbolState(62));
        state160.put("STATIC", new SymbolState(MODIFIER,  1));
        state514.put("VOLATILE", new SymbolState(MODIFIERS,  2));
        state178.put("DOUBLE", new SymbolState(BRACKETSOPT,  1));
        state430.put("INT", new SymbolState(78));
        Map<String, SymbolState> state322 = new HashMap<String, SymbolState>();
        rules.put(322, state322);
        state322.put("ID", new SymbolState(283));
        state50.put("EXPRESSION3", new SymbolState(284));
        state225.put("RPAREN", new SymbolState(LITERAL,  1));
        state213.put("DOUBLE", new SymbolState(17));
        state15.put("PROTECTED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state536 = new HashMap<String, SymbolState>();
        rules.put(536, state536);
        state536.put("LPAREN", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state574 = new HashMap<String, SymbolState>();
        rules.put(574, state574);
        state574.put("EXPRESSION2REST", new SymbolState(285));
        state171.put("BASICTYPE", new SymbolState(141));
        state579.put("LONG", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state100 = new HashMap<String, SymbolState>();
        rules.put(100, state100);
        state100.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state56.put("FALSE", new SymbolState(BASICTYPE,  1));
        state129.put("BECOMES", new SymbolState(TYPE,  1));
        state221.put("BYTE", new SymbolState(SELECTOR,  3));
        state446.put("CHAR_LITERAL", new SymbolState(159));
        state3.put("DOT", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state414 = new HashMap<String, SymbolState>();
        rules.put(414, state414);
        state414.put("INSTANCEOF", new SymbolState(ARGUMENTS,  2));
        state514.put("SHORT", new SymbolState(MODIFIERS,  2));
        state383.put("PROTECTED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state216 = new HashMap<String, SymbolState>();
        rules.put(216, state216);
        state216.put("COMMA", new SymbolState(ARGUMENTS,  4));
        state631.put("BASICTYPE", new SymbolState(286));
        state178.put("PLUS", new SymbolState(BRACKETSOPT,  1));
        Map<String, SymbolState> state299 = new HashMap<String, SymbolState>();
        rules.put(299, state299);
        state299.put("DOT", new SymbolState(287));
        Map<String, SymbolState> state210 = new HashMap<String, SymbolState>();
        rules.put(210, state210);
        state210.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state20.put("PLUS", new SymbolState(BASICTYPE,  1));
        state259.put("BYTE", new SymbolState(1));
        state457.put("EXCLAMATION", new SymbolState(44));
        state261.put("INTEGERLITERAL", new SymbolState(66));
        state244.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state447.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state54.put("BOOLEAN", new SymbolState(56));
        state102.put("FLOAT", new SymbolState(SELECTOR,  2));
        state20.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state37 = new HashMap<String, SymbolState>();
        rules.put(37, state37);
        state37.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state268.put("ID", new SymbolState(288));
        state499.put("BYTE", new SymbolState(1));
        state239.put("RPAREN", new SymbolState(N_SELECTOR_0,  0));
        state447.put("LONG", new SymbolState(MEMBERDECL,  1));
        state146.put("SHORT", new SymbolState(20));
        state95.put("LITERAL", new SymbolState(289));
        state136.put("PREFIXOP", new SymbolState(139));
        state351.put("CHAR", new SymbolState(81));
        Map<String, SymbolState> state327 = new HashMap<String, SymbolState>();
        rules.put(327, state327);
        state327.put("N_DOT_IDENTIFIER_0", new SymbolState(290));
        state347.put("DOUBLE", new SymbolState(17));
        Map<String, SymbolState> state380 = new HashMap<String, SymbolState>();
        rules.put(380, state380);
        state380.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  3));
        state51.put("CHAR", new SymbolState(IDENTIFIER,  1));
        state550.put("RBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state311.put("NULL", new SymbolState(225));
        state581.put("DOUBLE", new SymbolState(17));
        state122.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state368.put("DOT", new SymbolState(IDENTIFIER,  1));
        state213.put("BOOLEANLITERAL", new SymbolState(39));
        Map<String, SymbolState> state619 = new HashMap<String, SymbolState>();
        rules.put(619, state619);
        state619.put("SEMI", new SymbolState(EXPRESSION2REST,  2));
        state134.put("LITERAL", new SymbolState(193));
        state185.put("LPAREN", new SymbolState(14));
        Map<String, SymbolState> state329 = new HashMap<String, SymbolState>();
        rules.put(329, state329);
        state329.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state451.put("CHAR_LITERAL", new SymbolState(38));
        state146.put("INTEGERLITERAL", new SymbolState(180));
        state439.put("FLOAT", new SymbolState(MODIFIER,  1));
        state311.put("IDENTIFIER", new SymbolState(26));
        state445.put("CHAR", new SymbolState(81));
        state553.put("CHAR", new SymbolState(INTEGERLITERAL,  1));
        state619.put("LONG", new SymbolState(EXPRESSION2REST,  2));
        state33.put("BECOMES", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state94.put("LBRACKET", new SymbolState(N_SELECTOR_0,  0));
        state280.put("FLOAT", new SymbolState(8));
        state369.put("LPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state329.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state500.put("SHORT", new SymbolState(IDENTIFIER,  1));
        state87.put("EOF", new SymbolState(COMPILATIONUNIT,  5));
        state252.put("N_CLASSBODYDECLARATION_0", new SymbolState(291));
        Map<String, SymbolState> state580 = new HashMap<String, SymbolState>();
        rules.put(580, state580);
        state580.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state484.put("SHORT", new SymbolState(BASICTYPE,  1));
        state364.put("SHORT", new SymbolState(EXPRESSION,  3));
        Map<String, SymbolState> state229 = new HashMap<String, SymbolState>();
        rules.put(229, state229);
        state229.put("COMMA", new SymbolState(N_COMMA_TYPE_0,  3));
        state523.put("IMPORT", new SymbolState(292));
        state201.put("ID", new SymbolState(TYPE,  3));
        state563.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  3));
        state26.put("FLOAT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state160.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state155.put("BECOMES", new SymbolState(LITERAL,  1));
        state446.put("BOOLEAN", new SymbolState(56));
        Map<String, SymbolState> state314 = new HashMap<String, SymbolState>();
        rules.put(314, state314);
        state314.put("SEMI", new SymbolState(293));
        state81.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state399 = new HashMap<String, SymbolState>();
        rules.put(399, state399);
        state399.put("RPAREN", new SymbolState(SELECTOR,  3));
        state463.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state515.put("RBRACE", new SymbolState(N_SELECTOR_0,  2));
        state376.put("ARGUMENTS", new SymbolState(294));
        state93.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state26.put("INT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state280.put("TYPE", new SymbolState(259));
        Map<String, SymbolState> state513 = new HashMap<String, SymbolState>();
        rules.put(513, state513);
        state513.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state198.put("LBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state612.put("IDENTIFIER", new SymbolState(295));
        Map<String, SymbolState> state318 = new HashMap<String, SymbolState>();
        rules.put(318, state318);
        state318.put("COMMA", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state137 = new HashMap<String, SymbolState>();
        rules.put(137, state137);
        state137.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state56.put("BYTE", new SymbolState(BASICTYPE,  1));
        state32.put("FLOAT", new SymbolState(245));
        state45.put("INT", new SymbolState(78));
        state457.put("STR_LITERAL", new SymbolState(214));
        state598.put("LONG", new SymbolState(MODIFIER,  1));
        state446.put("SHORT", new SymbolState(20));
        state335.put("RBRACE", new SymbolState(EXPRESSION3,  2));
        state226.put("DOT", new SymbolState(ARGUMENTS,  2));
        state527.put("BYTE", new SymbolState(296));
        state87.put("CLASS", new SymbolState(77));
        state309.put("SHORT", new SymbolState(LITERAL,  1));
        state430.put("PAREXPRESSION", new SymbolState(223));
        state589.put("FLOAT", new SymbolState(SELECTOR,  3));
        state369.put("FALSE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state164.put("BYTE", new SymbolState(BOOLEANLITERAL,  1));
        state213.put("EXPRESSION", new SymbolState(297));
        state539.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state354.put("RPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state108.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state72.put("BYTE", new SymbolState(TYPE,  3));
        state259.put("PAREXPRESSION", new SymbolState(223));
        state136.put("INT", new SymbolState(78));
        state121.put("VOLATILE", new SymbolState(298));
        Map<String, SymbolState> state355 = new HashMap<String, SymbolState>();
        rules.put(355, state355);
        state355.put("N_DOT_IDENTIFIER_0", new SymbolState(299));
        state368.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state612.put("INT", new SymbolState(300));
        state33.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state451.put("LPAREN", new SymbolState(301));
        state191.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state197.put("COMMA", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state490.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state171.put("BOOLEANLITERAL", new SymbolState(143));
        state162.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state306.put("FLOAT", new SymbolState(LITERAL,  1));
        state302.put("DOUBLE", new SymbolState(METHODORFIELDDECL,  3));
        state494.put("SHORT", new SymbolState(BASICTYPE,  1));
        state517.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state244.put("METHODORFIELDREST", new SymbolState(302));
        state1.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state466.put("RBRACE", new SymbolState(IDENTIFIER,  1));
        state595.put("DOT", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state503 = new HashMap<String, SymbolState>();
        rules.put(503, state503);
        state503.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state466.put("BYTE", new SymbolState(IDENTIFIER,  1));
        state616.put("DOT", new SymbolState(ARGUMENTS,  2));
        state405.put("SEMI", new SymbolState(VARIABLEINITIALIZER,  1));
        Map<String, SymbolState> state608 = new HashMap<String, SymbolState>();
        rules.put(608, state608);
        state608.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state243.put("CLASS", new SymbolState(MODIFIER,  1));
        state446.put("EXCLAMATION", new SymbolState(44));
        state221.put("FLOAT", new SymbolState(SELECTOR,  3));
        state612.put("SHORT", new SymbolState(303));
        state598.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state300.put("ID", new SymbolState(BASICTYPE,  1));
        state17.put("INT", new SymbolState(BASICTYPE,  1));
        state41.put("PRIMARY", new SymbolState(304));
        state108.put("INT", new SymbolState(BOOLEANLITERAL,  1));
        state577.put("STRICTFP", new SymbolState(MODIFIERS,  2));
        state124.put("ID", new SymbolState(51));
        state163.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  0));
        state488.put("BYTE", new SymbolState(EXPRESSION3,  2));
        state374.put("EXPRESSION", new SymbolState(305));
        state588.put("DOT", new SymbolState(ARGUMENTS,  2));
        state397.put("CLASS", new SymbolState(MODIFIER,  1));
        state536.put("COMMA", new SymbolState(IDENTIFIER,  1));
        state95.put("BOOLEANLITERAL", new SymbolState(137));
        state93.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state340.put("SHORT", new SymbolState(BASICTYPE,  1));
        state587.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state489.put("RBRACKET", new SymbolState(SELECTOR,  2));
        state420.put("INT", new SymbolState(MODIFIER,  1));
        state44.put("DOUBLE", new SymbolState(PREFIXOP,  1));
        state581.put("PRIMARY", new SymbolState(94));
        state390.put("DOUBLE", new SymbolState(EXPRESSION,  1));
        state451.put("NULL", new SymbolState(306));
        state3.put("RBRACKET", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state504 = new HashMap<String, SymbolState>();
        rules.put(504, state504);
        state504.put("RBRACKET", new SymbolState(BRACKETSOPT,  1));
        state333.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state164.put("INT", new SymbolState(BOOLEANLITERAL,  1));
        state10.put("BYTE", new SymbolState(PREFIXOP,  1));
        state268.put("FLOAT", new SymbolState(307));
        state146.put("TYPE", new SymbolState(50));
        state378.put("INSTANCEOF", new SymbolState(ARGUMENTS,  4));
        state280.put("DOUBLE", new SymbolState(17));
        state482.put("SHORT", new SymbolState(BASICTYPE,  1));
        state186.put("SEMI", new SymbolState(IDENTIFIER,  1));
        state298.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state26.put("BYTE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state619.put("RBRACE", new SymbolState(EXPRESSION2REST,  2));
        state178.put("LPAREN", new SymbolState(BRACKETSOPT,  1));
        state100.put("DOT", new SymbolState(PRIMARY,  1));
        state347.put("MINUS", new SymbolState(10));
        state82.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state275.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state75.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state433.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state406.put("DOT", new SymbolState(PAREXPRESSION,  3));
        state604.put("ID", new SymbolState(ARGUMENTS,  4));
        state291.put("BYTE", new SymbolState(308));
        Map<String, SymbolState> state180 = new HashMap<String, SymbolState>();
        rules.put(180, state180);
        state180.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state166.put("RBRACKET", new SymbolState(LITERAL,  1));
        state78.put("PLUS", new SymbolState(BASICTYPE,  1));
        state94.put("COMMA", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state400 = new HashMap<String, SymbolState>();
        rules.put(400, state400);
        state400.put("INTERFACE", new SymbolState(CLASSBODY,  3));
        Map<String, SymbolState> state85 = new HashMap<String, SymbolState>();
        rules.put(85, state85);
        state85.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state186.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state218.put("ID", new SymbolState(METHODORFIELDREST,  1));
        state120.put("CHAR_LITERAL", new SymbolState(309));
        state411.put("LONG", new SymbolState(ARGUMENTS,  2));
        state120.put("STR_LITERAL", new SymbolState(266));
        state237.put("STR_LITERAL", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state293.put("INTERFACE", new SymbolState(IMPORTDECLARATION,  6));
        state41.put("INT", new SymbolState(78));
        state514.put("ABSTRACT", new SymbolState(MODIFIERS,  2));
        state178.put("LBRACKET", new SymbolState(310));
        state33.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state57.put("DECIMAL_INTEGER_LITERAL", new SymbolState(PREFIXOP,  1));
        state143.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state59.put("BASICTYPE", new SymbolState(141));
        state553.put("DOT", new SymbolState(INTEGERLITERAL,  1));
        state62.put("ASSIGNMENTOPERATOR", new SymbolState(311));
        state44.put("BYTE", new SymbolState(PREFIXOP,  1));
        state261.put("PAREXPRESSION", new SymbolState(271));
        state344.put("N_COMMA_EXPRESSION_0", new SymbolState(312));
        state243.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state87.put("MODIFIERS", new SymbolState(121));
        state242.put("BYTE", new SymbolState(BRACKETSOPT,  1));
        state71.put("FLOAT", new SymbolState(LITERAL,  1));
        state124.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        Map<String, SymbolState> state541 = new HashMap<String, SymbolState>();
        rules.put(541, state541);
        state541.put("RBRACKET", new SymbolState(313));
        state29.put("BYTE", new SymbolState(BASICTYPE,  1));
        state124.put("NULL", new SymbolState(16));
        state430.put("TYPE", new SymbolState(259));
        state295.put("SHORT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state159.put("BECOMES", new SymbolState(LITERAL,  1));
        state124.put("PAREXPRESSION", new SymbolState(271));
        Map<String, SymbolState> state80 = new HashMap<String, SymbolState>();
        rules.put(80, state80);
        state80.put("LBRACKET", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state331 = new HashMap<String, SymbolState>();
        rules.put(331, state331);
        state331.put("STAR", new SymbolState(314));
        state41.put("EXPRESSION3", new SymbolState(315));
        state361.put("BECOMES", new SymbolState(BRACKETSOPT,  1));
        state374.put("CHAR", new SymbolState(81));
        state199.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state29.put("LONG", new SymbolState(BASICTYPE,  1));
        state93.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state306.put("LBRACKET", new SymbolState(LITERAL,  1));
        state534.put("SEMI", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state628 = new HashMap<String, SymbolState>();
        rules.put(628, state628);
        state628.put("RPAREN", new SymbolState(316));
        state477.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state124.put("EXPRESSION3", new SymbolState(317));
        state230.put("SHORT", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state372 = new HashMap<String, SymbolState>();
        rules.put(372, state372);
        state372.put("BECOMES", new SymbolState(EXPRESSION2,  2));
        state631.put("INT", new SymbolState(318));
        state301.put("ID", new SymbolState(51));
        state276.put("ID", new SymbolState(EXPRESSION2REST,  2));
        Map<String, SymbolState> state375 = new HashMap<String, SymbolState>();
        rules.put(375, state375);
        state375.put("LBRACE", new SymbolState(319));
        state95.put("PLUS", new SymbolState(57));
        state290.put("BRACKETSOPT", new SymbolState(320));
        state10.put("FALSE", new SymbolState(PREFIXOP,  1));
        state566.put("SHORT", new SymbolState(321));
        state39.put("LBRACKET", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state283 = new HashMap<String, SymbolState>();
        rules.put(283, state283);
        state283.put("COMMA", new SymbolState(IDENTIFIER,  1));
        state185.put("INTEGERLITERAL", new SymbolState(231));
        state54.put("LONG", new SymbolState(6));
        state301.put("TYPE", new SymbolState(54));
        state193.put("CHAR", new SymbolState(PRIMARY,  1));
        state65.put("BECOMES", new SymbolState(LITERAL,  1));
        state455.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state158.put("LONG", new SymbolState(6));
        state160.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state552.put("DOUBLE", new SymbolState(VARIABLEDECLARATORREST,  1));
        state56.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state494.put("INT", new SymbolState(BASICTYPE,  1));
        state171.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state383.put("CLASS", new SymbolState(MODIFIER,  1));
        state19.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state492.put("DOT", new SymbolState(322));
        state302.put("INT", new SymbolState(METHODORFIELDDECL,  3));
        state579.put("DOUBLE", new SymbolState(TYPE,  3));
        state534.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state109.put("RBRACE", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state609 = new HashMap<String, SymbolState>();
        rules.put(609, state609);
        state609.put("RPAREN", new SymbolState(323));
        state134.put("LPAREN", new SymbolState(301));
        Map<String, SymbolState> state583 = new HashMap<String, SymbolState>();
        rules.put(583, state583);
        state583.put("LBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state499.put("LONG", new SymbolState(6));
        state298.put("CLASS", new SymbolState(MODIFIER,  1));
        state259.put("EXCLAMATION", new SymbolState(44));
        Map<String, SymbolState> state409 = new HashMap<String, SymbolState>();
        rules.put(409, state409);
        state409.put("RPAREN", new SymbolState(324));
        state199.put("LPAREN", new SymbolState(IDENTIFIER,  1));
        state141.put("FLOAT", new SymbolState(TYPE,  1));
        Map<String, SymbolState> state12 = new HashMap<String, SymbolState>();
        rules.put(12, state12);
        state12.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state596.put("DOUBLE", new SymbolState(N_SELECTOR_0,  2));
        state185.put("BOOLEANLITERAL", new SymbolState(143));
        state440.put("COMMA", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state311.put("BOOLEANLITERAL", new SymbolState(325));
        state19.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        state278.put("CHAR", new SymbolState(81));
        state187.put("ID", new SymbolState(ARGUMENTS,  4));
        state57.put("INT", new SymbolState(PREFIXOP,  1));
        state218.put("INT", new SymbolState(METHODORFIELDREST,  1));
        Map<String, SymbolState> state284 = new HashMap<String, SymbolState>();
        rules.put(284, state284);
        state284.put("COMMA", new SymbolState(EXPRESSION3,  2));
        state478.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state293.put("SEMI", new SymbolState(IMPORTDECLARATION,  6));
        state178.put("FALSE", new SymbolState(BRACKETSOPT,  1));
        state524.put("SHORT", new SymbolState(TYPE,  1));
        Map<String, SymbolState> state626 = new HashMap<String, SymbolState>();
        rules.put(626, state626);
        state626.put("N_DOT_IDENTIFIER_0", new SymbolState(326));
        state357.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state568.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state610.put("IDENTIFIER", new SymbolState(327));
        state123.put("BRACKETSOPT", new SymbolState(328));
        state280.put("STR_LITERAL", new SymbolState(170));
        state112.put("EOF", new SymbolState(TYPEDECLARATIONWITHMODIFIERS,  2));
        state205.put("COMMA", new SymbolState(280));
        state278.put("FALSE", new SymbolState(37));
        state389.put("LBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state45.put("PRIMARY", new SymbolState(94));
        state15.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state38.put("RBRACE", new SymbolState(LITERAL,  1));
        state65.put("DOT", new SymbolState(LITERAL,  1));
        state72.put("DOUBLE", new SymbolState(TYPE,  3));
        state291.put("DOUBLE", new SymbolState(236));
        state524.put("BYTE", new SymbolState(TYPE,  1));
        state542.put("COMMA", new SymbolState(TYPE,  3));
        state20.put("SHORT", new SymbolState(BASICTYPE,  1));
        state20.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state208.put("CHAR", new SymbolState(329));
        state374.put("CHAR_LITERAL", new SymbolState(69));
        state551.put("EXCLAMATION", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state59.put("SHORT", new SymbolState(20));
        state38.put("CHAR", new SymbolState(LITERAL,  1));
        state374.put("BASICTYPE", new SymbolState(141));
        state28.put("INTERFACE", new SymbolState(TYPEDECLARATION,  1));
        state457.put("CHAR", new SymbolState(81));
        state244.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state250.put("BECOMES", new SymbolState(ARGUMENTS,  4));
        state369.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state54.put("BOOLEANLITERAL", new SymbolState(175));
        state237.put("DECIMAL_INTEGER_LITERAL", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state398.put("FLOAT", new SymbolState(CLASSBODYDECLARATION,  2));
        state85.put("BECOMES", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state41.put("PLUS", new SymbolState(57));
        state213.put("TRUE", new SymbolState(260));
        state107.put("LBRACKET", new SymbolState(LITERAL,  1));
        state141.put("DECIMAL_INTEGER_LITERAL", new SymbolState(TYPE,  1));
        state494.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state525.put("COMMA", new SymbolState(SELECTOR,  2));
        state417.put("DOT", new SymbolState(330));
        state411.put("SEMI", new SymbolState(ARGUMENTS,  2));
        state116.put("INTERFACE", new SymbolState(TYPEDECLARATION,  1));
        Map<String, SymbolState> state326 = new HashMap<String, SymbolState>();
        rules.put(326, state326);
        state326.put("DOT", new SymbolState(331));
        state408.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state520.put("SEMI", new SymbolState(BASICTYPE,  1));
        state142.put("RPAREN", new SymbolState(SELECTOR,  3));
        state416.put("DOT", new SymbolState(IDENTIFIER,  1));
        state121.put("INTERFACEDECLARATION", new SymbolState(332));
        state171.put("FALSE", new SymbolState(37));
        state510.put("LONG", new SymbolState(333));
        Map<String, SymbolState> state422 = new HashMap<String, SymbolState>();
        rules.put(422, state422);
        state422.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state598.put("SEMI", new SymbolState(MODIFIER,  1));
        state78.put("FALSE", new SymbolState(BASICTYPE,  1));
        state433.put("DOT", new SymbolState(SELECTOR,  3));
        state102.put("SEMI", new SymbolState(SELECTOR,  2));
        state158.put("PRIMARY", new SymbolState(163));
        state304.put("RBRACKET", new SymbolState(N_SELECTOR_0,  0));
        state81.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state267.put("SEMI", new SymbolState(CLASSBODYDECLARATION,  1));
        state280.put("CHAR", new SymbolState(81));
        state499.put("SHORT", new SymbolState(20));
        state355.put("SEMI", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state140.put("CHAR_LITERAL", new SymbolState(309));
        state32.put("BASICTYPE", new SymbolState(286));
        state109.put("BOOLEAN", new SymbolState(PAREXPRESSION,  3));
        state146.put("BYTE", new SymbolState(1));
        state362.put("BOOLEAN", new SymbolState(EXPRESSION2,  1));
        state164.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state416.put("BOOLEAN", new SymbolState(IDENTIFIER,  1));
        state214.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state390.put("FLOAT", new SymbolState(EXPRESSION,  1));
        state340.put("CHAR", new SymbolState(BASICTYPE,  1));
        state488.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state630.put("IMPLEMENTS", new SymbolState(334));
        state134.put("EXPRESSION3", new SymbolState(335));
        state54.put("TRUE", new SymbolState(12));
        state27.put("FALSE", new SymbolState(21));
        state124.put("INT", new SymbolState(78));
        state261.put("IDENTIFIER", new SymbolState(26));
        state562.put("FLOAT", new SymbolState(N_SELECTOR_0,  0));
        state5.put("DOUBLE", new SymbolState(17));
        state37.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state17.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state596.put("RBRACE", new SymbolState(N_SELECTOR_0,  2));
        state305.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state1.put("LONG", new SymbolState(BASICTYPE,  1));
        state512.put("SEMI", new SymbolState(IMPORTDECLARATION,  4));
        state139.put("PREFIXOP", new SymbolState(139));
        state581.put("SHORT", new SymbolState(20));
        state457.put("NULL", new SymbolState(166));
        state187.put("CHAR", new SymbolState(ARGUMENTS,  4));
        state445.put("CHAR_LITERAL", new SymbolState(159));
        state81.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state15.put("FINAL", new SymbolState(MODIFIER,  1));
        state13.put("ID", new SymbolState(EXPRESSION2,  2));
        state218.put("BYTE", new SymbolState(METHODORFIELDREST,  1));
        state222.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state621 = new HashMap<String, SymbolState>();
        rules.put(621, state621);
        state621.put("N_COMMA_EXPRESSION_0", new SymbolState(336));
        state499.put("TYPE", new SymbolState(259));
        state131.put("CHAR", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state196 = new HashMap<String, SymbolState>();
        rules.put(196, state196);
        state196.put("CLASS", new SymbolState(CLASSDECLARATION,  7));
        state58.put("SEMI", new SymbolState(MODIFIER,  1));
        state50.put("LPAREN", new SymbolState(227));
        state571.put("CLASSBODY", new SymbolState(337));
        Map<String, SymbolState> state258 = new HashMap<String, SymbolState>();
        rules.put(258, state258);
        state258.put("ID", new SymbolState(338));
        state490.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state352.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state261.put("FALSE", new SymbolState(76));
        state527.put("TYPE", new SymbolState(339));
        state178.put("LONG", new SymbolState(BRACKETSOPT,  1));
        state539.put("PLUS", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state81.put("INT", new SymbolState(BASICTYPE,  1));
        state164.put("FLOAT", new SymbolState(BOOLEANLITERAL,  1));
        state445.put("EXCLAMATION", new SymbolState(44));
        state363.put("FLOAT", new SymbolState(EXPRESSION1,  1));
        state351.put("PLUS", new SymbolState(57));
        state227.put("CHAR_LITERAL", new SymbolState(183));
        state275.put("ID", new SymbolState(MODIFIER,  1));
        state306.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state224.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state325.put("DOT", new SymbolState(LITERAL,  1));
        state612.put("CHAR", new SymbolState(340));
        Map<String, SymbolState> state207 = new HashMap<String, SymbolState>();
        rules.put(207, state207);
        state207.put("COMMA", new SymbolState(EXPRESSION3,  2));
        state276.put("LONG", new SymbolState(EXPRESSION2REST,  2));
        state195.put("DOUBLE", new SymbolState(EXPRESSION2,  2));
        state99.put("FLOAT", new SymbolState(8));
        state50.put("TRUE", new SymbolState(254));
        state311.put("FALSE", new SymbolState(257));
        state185.put("EXPRESSION3", new SymbolState(341));
        Map<String, SymbolState> state511 = new HashMap<String, SymbolState>();
        rules.put(511, state511);
        state511.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state272.put("RBRACE", new SymbolState(EXPRESSION3,  2));
        state347.put("IDENTIFIER", new SymbolState(26));
        state74.put("BECOMES", new SymbolState(PRIMARY,  1));
        state605.put("IDENTIFIER", new SymbolState(342));
        state87.put("TYPEDECLARATIONWITHMODIFIERS", new SymbolState(116));
        state135.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  2));
        state448.put("ID", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state498.put("BASICTYPE", new SymbolState(343));
        state347.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state124.put("BYTE", new SymbolState(1));
        state78.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state146.put("FLOAT", new SymbolState(8));
        state278.put("LPAREN", new SymbolState(14));
        state347.put("EXPRESSION", new SymbolState(344));
        state439.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state576.put("LBRACKET", new SymbolState(PAREXPRESSION,  3));
        state536.put("DOT", new SymbolState(IDENTIFIER,  1));
        state387.put("DOUBLE", new SymbolState(EXPRESSION3,  2));
        state340.put("SEMI", new SymbolState(BASICTYPE,  1));
        state255.put("RPAREN", new SymbolState(LITERAL,  1));
        state41.put("ID", new SymbolState(51));
        state581.put("BOOLEAN", new SymbolState(56));
        state194.put("CHAR", new SymbolState(BASICTYPE,  1));
        state601.put("ID", new SymbolState(345));
        state457.put("DOUBLE", new SymbolState(17));
        state351.put("FALSE", new SymbolState(76));
        state45.put("ID", new SymbolState(51));
        state459.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state72.put("LONG", new SymbolState(TYPE,  3));
        state248.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state416.put("SHORT", new SymbolState(IDENTIFIER,  1));
        state184.put("EXCLAMATION", new SymbolState(44));
        state17.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state498.put("ID", new SymbolState(346));
        state196.put("INTERFACE", new SymbolState(CLASSDECLARATION,  7));
        state168.put("LPAREN", new SymbolState(347));
        state189.put("LBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state49.put("FALSE", new SymbolState(21));
        state272.put("BOOLEAN", new SymbolState(EXPRESSION3,  2));
        state448.put("DOUBLE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state353.put("DOUBLE", new SymbolState(LITERAL,  1));
        state393.put("CHAR", new SymbolState(EXPRESSION2,  1));
        state280.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state374.put("DOUBLE", new SymbolState(17));
        state275.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state588.put("LONG", new SymbolState(ARGUMENTS,  2));
        Map<String, SymbolState> state419 = new HashMap<String, SymbolState>();
        rules.put(419, state419);
        state419.put("COMMA", new SymbolState(EXPRESSION3,  2));
        state27.put("LPAREN", new SymbolState(30));
        state186.put("CHAR", new SymbolState(IDENTIFIER,  1));
        state515.put("BYTE", new SymbolState(N_SELECTOR_0,  2));
        state514.put("BYTE", new SymbolState(MODIFIERS,  2));
        state595.put("SHORT", new SymbolState(PAREXPRESSION,  3));
        state86.put("FLOAT", new SymbolState(348));
        state407.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state403.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state54.put("EXPRESSION3", new SymbolState(349));
        state435.put("CLASS", new SymbolState(INTERFACEBODY,  3));
        state6.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state276.put("INT", new SymbolState(EXPRESSION2REST,  2));
        state227.put("TRUE", new SymbolState(12));
        state248.put("NATIVE", new SymbolState(MODIFIER,  1));
        state587.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state562.put("INT", new SymbolState(N_SELECTOR_0,  0));
        state357.put("STATIC", new SymbolState(MODIFIER,  1));
        state189.put("BECOMES", new SymbolState(INTEGERLITERAL,  1));
        state213.put("STR_LITERAL", new SymbolState(214));
        state31.put("BOOLEANLITERAL", new SymbolState(175));
        state428.put("BECOMES", new SymbolState(N_SELECTOR_0,  2));
        state464.put("N_IMPORTDECLARATION_0", new SymbolState(350));
        state374.put("INTEGERLITERAL", new SymbolState(231));
        state215.put("BOOLEAN", new SymbolState(IDENTIFIER,  1));
        state394.put("BECOMES", new SymbolState(EXPRESSION1,  1));
        state251.put("LPAREN", new SymbolState(351));
        state457.put("FALSE", new SymbolState(21));
        Map<String, SymbolState> state434 = new HashMap<String, SymbolState>();
        rules.put(434, state434);
        state434.put("IDENTIFIER", new SymbolState(352));
        state359.put("NULL", new SymbolState(353));
        Map<String, SymbolState> state200 = new HashMap<String, SymbolState>();
        rules.put(200, state200);
        state200.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state334.put("INT", new SymbolState(318));
        state500.put("CHAR", new SymbolState(IDENTIFIER,  1));
        state227.put("SHORT", new SymbolState(20));
        state252.put("INT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        Map<String, SymbolState> state473 = new HashMap<String, SymbolState>();
        rules.put(473, state473);
        state473.put("IDENTIFIER", new SymbolState(354));
        state13.put("INT", new SymbolState(EXPRESSION2,  2));
        state72.put("INT", new SymbolState(TYPE,  3));
        state1.put("PLUS", new SymbolState(BASICTYPE,  1));
        state511.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state446.put("FLOAT", new SymbolState(8));
        state59.put("FALSE", new SymbolState(222));
        state10.put("SHORT", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state599 = new HashMap<String, SymbolState>();
        rules.put(599, state599);
        state599.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state614.put("CLASS", new SymbolState(MODIFIER,  1));
        state253.put("LONG", new SymbolState(INTEGERLITERAL,  1));
        state274.put("IDENTIFIER", new SymbolState(355));
        state300.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state579.put("BOOLEAN", new SymbolState(TYPE,  3));
        state298.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state484.put("INT", new SymbolState(BASICTYPE,  1));
        state459.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state20.put("CHAR", new SymbolState(BASICTYPE,  1));
        state141.put("BYTE", new SymbolState(TYPE,  1));
        state185.put("BYTE", new SymbolState(1));
        state10.put("DOUBLE", new SymbolState(PREFIXOP,  1));
        state611.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state498.put("SHORT", new SymbolState(356));
        Map<String, SymbolState> state593 = new HashMap<String, SymbolState>();
        rules.put(593, state593);
        state593.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state306.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state491 = new HashMap<String, SymbolState>();
        rules.put(491, state491);
        state491.put("LBRACE", new SymbolState(TYPE,  1));
        state218.put("SHORT", new SymbolState(METHODORFIELDREST,  1));
        state121.put("STATIC", new SymbolState(357));
        Map<String, SymbolState> state429 = new HashMap<String, SymbolState>();
        rules.put(429, state429);
        state429.put("LBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state520.put("CHAR", new SymbolState(BASICTYPE,  1));
        state139.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        state234.put("LBRACKET", new SymbolState(N_SELECTOR_0,  0));
        state522.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state363.put("ID", new SymbolState(EXPRESSION1,  1));
        state87.put("INTERFACEDECLARATION", new SymbolState(332));
        state86.put("BYTE", new SymbolState(308));
        state309.put("BYTE", new SymbolState(LITERAL,  1));
        state158.put("LPAREN", new SymbolState(158));
        state631.put("ID", new SymbolState(125));
        state527.put("BOOLEAN", new SymbolState(358));
        state499.put("BASICTYPE", new SymbolState(141));
        state359.put("TYPE", new SymbolState(359));
        state252.put("ID", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state577.put("ABSTRACT", new SymbolState(MODIFIERS,  2));
        state146.put("LPAREN", new SymbolState(227));
        state539.put("LPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state428.put("RPAREN", new SymbolState(N_SELECTOR_0,  2));
        state430.put("PREFIXOP", new SymbolState(185));
        state484.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state49.put("STR_LITERAL", new SymbolState(214));
        state86.put("BASICTYPE", new SymbolState(360));
        state613.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state231.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state197.put("N_LBRACKET_RBRACKET_0", new SymbolState(361));
        state562.put("SEMI", new SymbolState(N_SELECTOR_0,  0));
        state84.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state5.put("CHAR_LITERAL", new SymbolState(159));
        state331.put("IDENTIFIER", new SymbolState(211));
        state451.put("EXPRESSION3", new SymbolState(362));
        state109.put("BYTE", new SymbolState(PAREXPRESSION,  3));
        state295.put("BYTE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state451.put("EXPRESSION2", new SymbolState(363));
        state27.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        state187.put("SEMI", new SymbolState(ARGUMENTS,  4));
        Map<String, SymbolState> state70 = new HashMap<String, SymbolState>();
        rules.put(70, state70);
        state70.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state451.put("EXPRESSION1", new SymbolState(364));
        state368.put("INSTANCEOF", new SymbolState(IDENTIFIER,  1));
        state417.put("N_LBRACKET_RBRACKET_0", new SymbolState(365));
        state6.put("MINUS", new SymbolState(BASICTYPE,  1));
        state466.put("INT", new SymbolState(IDENTIFIER,  1));
        state488.put("BOOLEAN", new SymbolState(EXPRESSION3,  2));
        state170.put("LBRACKET", new SymbolState(LITERAL,  1));
        state50.put("BASICTYPE", new SymbolState(141));
        state49.put("PRIMARY", new SymbolState(3));
        state408.put("BOOLEAN", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        Map<String, SymbolState> state462 = new HashMap<String, SymbolState>();
        rules.put(462, state462);
        state462.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state268.put("BASICTYPE", new SymbolState(366));
        state184.put("CHAR_LITERAL", new SymbolState(165));
        Map<String, SymbolState> state533 = new HashMap<String, SymbolState>();
        rules.put(533, state533);
        state533.put("COMMA", new SymbolState(BASICTYPE,  1));
        state45.put("LPAREN", new SymbolState(14));
        state394.put("LONG", new SymbolState(EXPRESSION1,  1));
        state213.put("LITERAL", new SymbolState(74));
        state42.put("ID", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state209 = new HashMap<String, SymbolState>();
        rules.put(209, state209);
        state209.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state256.put("SEMI", new SymbolState(BASICTYPE,  1));
        state117.put("DOT", new SymbolState(SELECTOR,  3));
        state357.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state376.put("BYTE", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state220 = new HashMap<String, SymbolState>();
        rules.put(220, state220);
        state220.put("COMMA", new SymbolState(280));
        state357.put("NATIVE", new SymbolState(MODIFIER,  1));
        state202.put("CLASS", new SymbolState(INTERFACEDECLARATION,  3));
        state50.put("FLOAT", new SymbolState(8));
        state184.put("INTEGERLITERAL", new SymbolState(367));
        state213.put("ID", new SymbolState(51));
        state298.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state484.put("SEMI", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state161 = new HashMap<String, SymbolState>();
        rules.put(161, state161);
        state161.put("ID", new SymbolState(368));
        state359.put("MINUS", new SymbolState(10));
        state65.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state309.put("ID", new SymbolState(LITERAL,  1));
        state253.put("BECOMES", new SymbolState(INTEGERLITERAL,  1));
        state278.put("SHORT", new SymbolState(20));
        state73.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state42.put("RBRACE", new SymbolState(PRIMARY,  1));
        state620.put("LBRACKET", new SymbolState(ARGUMENTS,  2));
        state522.put("SHORT", new SymbolState(MODIFIER,  1));
        state430.put("PLUS", new SymbolState(57));
        state71.put("LONG", new SymbolState(LITERAL,  1));
        state401.put("BOOLEAN", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state456 = new HashMap<String, SymbolState>();
        rules.put(456, state456);
        state456.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state140.put("DOUBLE", new SymbolState(17));
        state374.put("LITERAL", new SymbolState(204));
        Map<String, SymbolState> state310 = new HashMap<String, SymbolState>();
        rules.put(310, state310);
        state310.put("RBRACKET", new SymbolState(369));
        state146.put("BOOLEAN", new SymbolState(56));
        state17.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state8.put("CHAR", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state370 = new HashMap<String, SymbolState>();
        rules.put(370, state370);
        state370.put("INTERFACE", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state240 = new HashMap<String, SymbolState>();
        rules.put(240, state240);
        state240.put("CLASSBODY", new SymbolState(370));
        Map<String, SymbolState> state9 = new HashMap<String, SymbolState>();
        rules.put(9, state9);
        state9.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state42.put("INT", new SymbolState(PRIMARY,  1));
        state176.put("LONG", new SymbolState(MODIFIER,  1));
        state291.put("TYPE", new SymbolState(371));
        state522.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state32.put("BOOLEAN", new SymbolState(53));
        state49.put("INTEGERLITERAL", new SymbolState(153));
        state92.put("EXPRESSION2REST", new SymbolState(372));
        state451.put("INTEGERLITERAL", new SymbolState(71));
        state6.put("CHAR", new SymbolState(BASICTYPE,  1));
        state187.put("FLOAT", new SymbolState(ARGUMENTS,  4));
        state1.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state536.put("RPAREN", new SymbolState(IDENTIFIER,  1));
        Map<String, SymbolState> state132 = new HashMap<String, SymbolState>();
        rules.put(132, state132);
        state132.put("RPAREN", new SymbolState(EXPRESSION2REST,  2));
        state272.put("INT", new SymbolState(EXPRESSION3,  2));
        state287.put("ID", new SymbolState(88));
        state459.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state374.put("NULL", new SymbolState(107));
        state174.put("LPAREN", new SymbolState(301));
        Map<String, SymbolState> state546 = new HashMap<String, SymbolState>();
        rules.put(546, state546);
        state546.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state188.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state158.put("INT", new SymbolState(78));
        state522.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state619.put("BYTE", new SymbolState(EXPRESSION2REST,  2));
        state394.put("CHAR", new SymbolState(EXPRESSION1,  1));
        state176.put("SEMI", new SymbolState(MODIFIER,  1));
        state521.put("INTERFACE", new SymbolState(373));
        state226.put("INSTANCEOF", new SymbolState(ARGUMENTS,  2));
        state250.put("DOT", new SymbolState(ARGUMENTS,  4));
        state450.put("LPAREN", new SymbolState(374));
        state539.put("TRUE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state626.put("SEMI", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state171.put("MINUS", new SymbolState(10));
        state622.put("DOT", new SymbolState(PAREXPRESSION,  3));
        state242.put("ID", new SymbolState(BRACKETSOPT,  1));
        Map<String, SymbolState> state138 = new HashMap<String, SymbolState>();
        rules.put(138, state138);
        state138.put("RBRACKET", new SymbolState(PRIMARY,  1));
        state604.put("SHORT", new SymbolState(ARGUMENTS,  4));
        state172.put("BYTE", new SymbolState(LITERAL,  1));
        state420.put("CHAR", new SymbolState(MODIFIER,  1));
        state631.put("TYPELIST", new SymbolState(375));
        state8.put("SHORT", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state602 = new HashMap<String, SymbolState>();
        rules.put(602, state602);
        state602.put("IDENTIFIER", new SymbolState(376));
        state170.put("COMMA", new SymbolState(LITERAL,  1));
        state403.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state589.put("BECOMES", new SymbolState(SELECTOR,  3));
        state595.put("LONG", new SymbolState(PAREXPRESSION,  3));
        state213.put("LPAREN", new SymbolState(30));
        state566.put("IDENTIFIER", new SymbolState(377));
        state162.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state467 = new HashMap<String, SymbolState>();
        rules.put(467, state467);
        state467.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state488.put("INT", new SymbolState(EXPRESSION3,  2));
        state459.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state411.put("ID", new SymbolState(ARGUMENTS,  2));
        state27.put("PRIMARY", new SymbolState(3));
        Map<String, SymbolState> state549 = new HashMap<String, SymbolState>();
        rules.put(549, state549);
        state549.put("EXTENDS", new SymbolState(IDENTIFIER,  1));
        state206.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state369.put("STR_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state58.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state626.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state30.put("ID", new SymbolState(51));
        state174.put("INT", new SymbolState(78));
        state19.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        state178.put("SHORT", new SymbolState(BRACKETSOPT,  1));
        state213.put("EXCLAMATION", new SymbolState(44));
        state439.put("BYTE", new SymbolState(MODIFIER,  1));
        state514.put("ID", new SymbolState(MODIFIERS,  2));
        state216.put("RPAREN", new SymbolState(ARGUMENTS,  4));
        state167.put("LBRACKET", new SymbolState(N_SELECTOR_0,  0));
        state30.put("TRUE", new SymbolState(12));
        state93.put("BYTE", new SymbolState(MODIFIER,  1));
        state323.put("INSTANCEOF", new SymbolState(ARGUMENTS,  4));
        state619.put("FLOAT", new SymbolState(EXPRESSION2REST,  2));
        state581.put("PLUS", new SymbolState(57));
        state420.put("STATIC", new SymbolState(MODIFIER,  1));
        state207.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state13.put("BYTE", new SymbolState(EXPRESSION2,  2));
        state81.put("NULL", new SymbolState(BASICTYPE,  1));
        state185.put("TYPE", new SymbolState(259));
        Map<String, SymbolState> state432 = new HashMap<String, SymbolState>();
        rules.put(432, state432);
        state432.put("RPAREN", new SymbolState(378));
        state171.put("INTEGERLITERAL", new SymbolState(231));
        state309.put("LBRACKET", new SymbolState(LITERAL,  1));
        state482.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state182.put("DOUBLE", new SymbolState(17));
        state592.put("COMMA", new SymbolState(TYPE,  3));
        state26.put("ID", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state295.put("ID", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state515.put("DOUBLE", new SymbolState(N_SELECTOR_0,  2));
        state230.put("LONG", new SymbolState(EXPRESSION3,  2));
        state27.put("MINUS", new SymbolState(10));
        Map<String, SymbolState> state308 = new HashMap<String, SymbolState>();
        rules.put(308, state308);
        state308.put("ID", new SymbolState(BASICTYPE,  1));
        state445.put("PREFIXOP", new SymbolState(139));
        state309.put("RBRACE", new SymbolState(LITERAL,  1));
        state124.put("BASICTYPE", new SymbolState(141));
        state56.put("TRUE", new SymbolState(BASICTYPE,  1));
        state364.put("CHAR", new SymbolState(EXPRESSION,  3));
        state251.put("BASICTYPE", new SymbolState(141));
        state66.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state187.put("BECOMES", new SymbolState(ARGUMENTS,  4));
        state340.put("ID", new SymbolState(BASICTYPE,  1));
        state44.put("STR_LITERAL", new SymbolState(PREFIXOP,  1));
        state201.put("INT", new SymbolState(TYPE,  3));
        state539.put("FALSE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state449 = new HashMap<String, SymbolState>();
        rules.put(449, state449);
        state449.put("COMMA", new SymbolState(TYPE,  3));
        state430.put("LONG", new SymbolState(6));
        state199.put("INSTANCEOF", new SymbolState(IDENTIFIER,  1));
        state429.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state403.put("CLASS", new SymbolState(MODIFIER,  1));
        state587.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state301.put("PAREXPRESSION", new SymbolState(271));
        state193.put("SEMI", new SymbolState(PRIMARY,  1));
        state589.put("ID", new SymbolState(SELECTOR,  3));
        state160.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state17.put("NULL", new SymbolState(BASICTYPE,  1));
        state457.put("BOOLEANLITERAL", new SymbolState(39));
        state22.put("BECOMES", new SymbolState(BRACKETSOPT,  1));
        state14.put("CHAR", new SymbolState(81));
        state182.put("EXCLAMATION", new SymbolState(44));
        state139.put("LITERAL", new SymbolState(74));
        state524.put("LONG", new SymbolState(TYPE,  1));
        state208.put("DOUBLE", new SymbolState(379));
        state168.put("RPAREN", new SymbolState(SELECTOR,  2));
        state519.put("LBRACKET", new SymbolState(SELECTOR,  2));
        state95.put("TRUE", new SymbolState(36));
        Map<String, SymbolState> state497 = new HashMap<String, SymbolState>();
        rules.put(497, state497);
        state497.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state120.put("DOUBLE", new SymbolState(17));
        state39.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state182.put("LITERAL", new SymbolState(74));
        state604.put("LONG", new SymbolState(ARGUMENTS,  4));
        state280.put("EXPRESSION", new SymbolState(380));
        state136.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        state75.put("DOUBLE", new SymbolState(LITERAL,  1));
        state263.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state174.put("BASICTYPE", new SymbolState(141));
        Map<String, SymbolState> state381 = new HashMap<String, SymbolState>();
        rules.put(381, state381);
        state381.put("CLASS", new SymbolState(TYPEDECLARATIONWITHOUTMODIFIERS,  1));
        state306.put("SHORT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state564 = new HashMap<String, SymbolState>();
        rules.put(564, state564);
        state564.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state44.put("LONG", new SymbolState(PREFIXOP,  1));
        state521.put("CLASSDECLARATION", new SymbolState(381));
        state49.put("LITERAL", new SymbolState(74));
        state76.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state95.put("PREFIXOP", new SymbolState(251));
        state302.put("RBRACE", new SymbolState(METHODORFIELDDECL,  3));
        state484.put("CHAR", new SymbolState(BASICTYPE,  1));
        state475.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state589.put("BOOLEAN", new SymbolState(SELECTOR,  3));
        state14.put("DOUBLE", new SymbolState(17));
        Map<String, SymbolState> state532 = new HashMap<String, SymbolState>();
        rules.put(532, state532);
        state532.put("RBRACKET", new SymbolState(EXPRESSION2REST,  2));
        state146.put("TRUE", new SymbolState(254));
        state266.put("LBRACKET", new SymbolState(LITERAL,  1));
        state111.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state39.put("BECOMES", new SymbolState(LITERAL,  1));
        state26.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state86.put("LONG", new SymbolState(382));
        state27.put("PLUS", new SymbolState(57));
        state121.put("TRANSIENT", new SymbolState(383));
        state72.put("FLOAT", new SymbolState(TYPE,  3));
        state394.put("BOOLEAN", new SymbolState(EXPRESSION1,  1));
        Map<String, SymbolState> state379 = new HashMap<String, SymbolState>();
        rules.put(379, state379);
        state379.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state259.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state448.put("BYTE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state225.put("DOT", new SymbolState(LITERAL,  1));
        state494.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state123.put("N_LBRACKET_RBRACKET_0", new SymbolState(384));
        state431.put("INSTANCEOF", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state332 = new HashMap<String, SymbolState>();
        rules.put(332, state332);
        state332.put("INTERFACE", new SymbolState(TYPEDECLARATIONWITHOUTMODIFIERS,  1));
        state420.put("ID", new SymbolState(MODIFIER,  1));
        state212.put("COMMA", new SymbolState(BASICTYPE,  1));
        state140.put("NULL", new SymbolState(353));
        state449.put("RPAREN", new SymbolState(TYPE,  3));
        state131.put("ID", new SymbolState(LITERAL,  1));
        state311.put("PRIMARY", new SymbolState(239));
        state244.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state303.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state311.put("BYTE", new SymbolState(1));
        state139.put("STR_LITERAL", new SymbolState(214));
        Map<String, SymbolState> state423 = new HashMap<String, SymbolState>();
        rules.put(423, state423);
        state423.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state139.put("ID", new SymbolState(51));
        state514.put("SYNCHRONIZED", new SymbolState(MODIFIERS,  2));
        state613.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state323.put("LBRACKET", new SymbolState(ARGUMENTS,  4));
        state171.put("CHAR_LITERAL", new SymbolState(69));
        state430.put("LITERAL", new SymbolState(204));
        state323.put("BECOMES", new SymbolState(ARGUMENTS,  4));
        state359.put("INT", new SymbolState(78));
        state373.put("ID", new SymbolState(385));
        state167.put("DOT", new SymbolState(N_SELECTOR_0,  0));
        state604.put("INT", new SymbolState(ARGUMENTS,  4));
        state10.put("STR_LITERAL", new SymbolState(PREFIXOP,  1));
        state213.put("BYTE", new SymbolState(1));
        state303.put("CHAR", new SymbolState(BASICTYPE,  1));
        state551.put("LONG", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state99.put("FALSE", new SymbolState(386));
        state234.put("N_SELECTOR_0", new SymbolState(387));
        Map<String, SymbolState> state236 = new HashMap<String, SymbolState>();
        rules.put(236, state236);
        state236.put("ID", new SymbolState(BASICTYPE,  1));
        state2.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state386.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state108.put("LONG", new SymbolState(BOOLEANLITERAL,  1));
        state87.put("TYPEDECLARATION", new SymbolState(388));
        state165.put("LBRACKET", new SymbolState(LITERAL,  1));
        state201.put("RBRACE", new SymbolState(TYPE,  3));
        state499.put("CHAR_LITERAL", new SymbolState(69));
        Map<String, SymbolState> state453 = new HashMap<String, SymbolState>();
        rules.put(453, state453);
        state453.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state251.put("PREFIXOP", new SymbolState(251));
        Map<String, SymbolState> state147 = new HashMap<String, SymbolState>();
        rules.put(147, state147);
        state147.put("N_DOT_IDENTIFIER_0", new SymbolState(389));
        state137.put("LBRACKET", new SymbolState(LITERAL,  1));
        state594.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state583.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  2));
        state13.put("SEMI", new SymbolState(EXPRESSION2,  2));
        state275.put("SHORT", new SymbolState(MODIFIER,  1));
        state369.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state374.put("BOOLEAN", new SymbolState(56));
        state588.put("BYTE", new SymbolState(ARGUMENTS,  2));
        state255.put("DOT", new SymbolState(LITERAL,  1));
        state446.put("CHAR", new SymbolState(81));
        state72.put("ID", new SymbolState(TYPE,  3));
        state522.put("LONG", new SymbolState(MODIFIER,  1));
        state278.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state237.put("BOOLEAN", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state388.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  2));
        state49.put("PAREXPRESSION", new SymbolState(100));
        Map<String, SymbolState> state356 = new HashMap<String, SymbolState>();
        rules.put(356, state356);
        state356.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state221.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state175.put("RPAREN", new SymbolState(LITERAL,  1));
        state140.put("EXPRESSION1", new SymbolState(390));
        state268.put("BYTE", new SymbolState(391));
        state241.put("N_DOT_IDENTIFIER_0", new SymbolState(392));
        state31.put("BASICTYPE", new SymbolState(141));
        state194.put("SHORT", new SymbolState(BASICTYPE,  1));
        state140.put("EXPRESSION3", new SymbolState(393));
        state56.put("SHORT", new SymbolState(BASICTYPE,  1));
        state140.put("EXPRESSION2", new SymbolState(394));
        state267.put("RBRACE", new SymbolState(CLASSBODYDECLARATION,  1));
        state316.put("COMMA", new SymbolState(PAREXPRESSION,  3));
        state445.put("SHORT", new SymbolState(20));
        state54.put("PRIMARY", new SymbolState(163));
        state17.put("TRUE", new SymbolState(BASICTYPE,  1));
        state57.put("FLOAT", new SymbolState(PREFIXOP,  1));
        state577.put("PUBLIC", new SymbolState(MODIFIERS,  2));
        state370.put("SEMI", new SymbolState(CLASSDECLARATION,  5));
        state365.put("ID", new SymbolState(BRACKETSOPT,  1));
        state234.put("ID", new SymbolState(N_SELECTOR_0,  0));
        state259.put("MINUS", new SymbolState(10));
        state5.put("FALSE", new SymbolState(21));
        state182.put("LONG", new SymbolState(6));
        state374.put("EXPRESSION2", new SymbolState(61));
        state563.put("FLOAT", new SymbolState(VARIABLEDECLARATORREST,  3));
        state79.put("BECOMES", new SymbolState(INTEGERLITERAL,  1));
        state374.put("EXPRESSION1", new SymbolState(62));
        state340.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state600.put("RPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state222.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state494.put("BYTE", new SymbolState(BASICTYPE,  1));
        state374.put("EXPRESSION3", new SymbolState(60));
        state136.put("DOUBLE", new SymbolState(17));
        state176.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state491.put("IMPLEMENTS", new SymbolState(TYPE,  1));
        state44.put("PLUS", new SymbolState(PREFIXOP,  1));
        state604.put("BOOLEAN", new SymbolState(ARGUMENTS,  4));
        state446.put("LONG", new SymbolState(6));
        state199.put("BECOMES", new SymbolState(IDENTIFIER,  1));
        state519.put("DOT", new SymbolState(SELECTOR,  2));
        state75.put("BYTE", new SymbolState(LITERAL,  1));
        state604.put("FLOAT", new SymbolState(ARGUMENTS,  4));
        state486.put("LPAREN", new SymbolState(IDENTIFIER,  1));
        state184.put("DECIMAL_INTEGER_LITERAL", new SymbolState(169));
        state488.put("SHORT", new SymbolState(EXPRESSION3,  2));
        state166.put("DOT", new SymbolState(LITERAL,  1));
        state301.put("INTEGERLITERAL", new SymbolState(66));
        state261.put("MINUS", new SymbolState(10));
        state446.put("EXPRESSION2", new SymbolState(91));
        state446.put("EXPRESSION3", new SymbolState(92));
        Map<String, SymbolState> state24 = new HashMap<String, SymbolState>();
        rules.put(24, state24);
        state24.put("LBRACKET", new SymbolState(395));
        state294.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state227.put("ID", new SymbolState(51));
        state124.put("STR_LITERAL", new SymbolState(155));
        state111.put("LONG", new SymbolState(BASICTYPE,  1));
        state482.put("CHAR", new SymbolState(BASICTYPE,  1));
        state237.put("LONG", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state357.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state31.put("PREFIXOP", new SymbolState(124));
        state393.put("ID", new SymbolState(EXPRESSION2,  1));
        state446.put("EXPRESSION1", new SymbolState(90));
        state50.put("BYTE", new SymbolState(1));
        state59.put("IDENTIFIER", new SymbolState(26));
        state595.put("BOOLEAN", new SymbolState(PAREXPRESSION,  3));
        state446.put("FALSE", new SymbolState(21));
        state551.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state347.put("EXCLAMATION", new SymbolState(44));
        Map<String, SymbolState> state483 = new HashMap<String, SymbolState>();
        rules.put(483, state483);
        state483.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state56.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state528.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state214.put("DOT", new SymbolState(LITERAL,  1));
        state186.put("LONG", new SymbolState(IDENTIFIER,  1));
        state140.put("CHAR", new SymbolState(81));
        state27.put("LITERAL", new SymbolState(74));
        state499.put("LPAREN", new SymbolState(14));
        state188.put("RBRACKET", new SymbolState(EXPRESSION3,  2));
        state59.put("INTEGERLITERAL", new SymbolState(192));
        state471.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state44.put("TRUE", new SymbolState(PREFIXOP,  1));
        state263.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state300.put("BYTE", new SymbolState(BASICTYPE,  1));
        state129.put("CHAR", new SymbolState(TYPE,  1));
        state411.put("FLOAT", new SymbolState(ARGUMENTS,  2));
        state227.put("BYTE", new SymbolState(1));
        state30.put("NULL", new SymbolState(16));
        state0.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state20.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state184.put("FLOAT", new SymbolState(8));
        state182.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        state430.put("EXPRESSION", new SymbolState(396));
        state401.put("DOT", new SymbolState(PRIMARY,  1));
        state26.put("SHORT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state345.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state223.put("COMMA", new SymbolState(PRIMARY,  1));
        state376.put("FLOAT", new SymbolState(SELECTOR,  2));
        state539.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state611.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state6.put("SHORT", new SymbolState(BASICTYPE,  1));
        state14.put("IDENTIFIER", new SymbolState(26));
        state121.put("NATIVE", new SymbolState(397));
        state465.put("RPAREN", new SymbolState(PRIMARY,  1));
        state439.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state444.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state42.put("SEMI", new SymbolState(PRIMARY,  1));
        state124.put("FLOAT", new SymbolState(8));
        state248.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state86.put("MEMBERDECL", new SymbolState(398));
        state475.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state41.put("IDENTIFIER", new SymbolState(26));
        Map<String, SymbolState> state508 = new HashMap<String, SymbolState>();
        rules.put(508, state508);
        state508.put("RBRACKET", new SymbolState(399));
        state393.put("INT", new SymbolState(EXPRESSION2,  1));
        state99.put("PAREXPRESSION", new SymbolState(138));
        state27.put("EXCLAMATION", new SymbolState(44));
        state163.put("RPAREN", new SymbolState(N_SELECTOR_0,  0));
        state282.put("RBRACKET", new SymbolState(EXPRESSION2REST,  2));
        state445.put("FLOAT", new SymbolState(8));
        state45.put("BOOLEANLITERAL", new SymbolState(143));
        state191.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state59.put("CHAR", new SymbolState(81));
        state5.put("IDENTIFIER", new SymbolState(26));
        state108.put("SHORT", new SymbolState(BOOLEANLITERAL,  1));
        state140.put("IDENTIFIER", new SymbolState(26));
        state259.put("TYPE", new SymbolState(259));
        state363.put("RBRACE", new SymbolState(EXPRESSION1,  1));
        state398.put("SEMI", new SymbolState(CLASSBODYDECLARATION,  2));
        state165.put("RBRACKET", new SymbolState(LITERAL,  1));
        state291.put("RBRACE", new SymbolState(400));
        state455.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state184.put("ID", new SymbolState(51));
        state417.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state145 = new HashMap<String, SymbolState>();
        rules.put(145, state145);
        state145.put("RPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state595.put("DOUBLE", new SymbolState(PAREXPRESSION,  3));
        state62.put("RPAREN", new SymbolState(EXPRESSION,  1));
        state141.put("ID", new SymbolState(TYPE,  1));
        state112.put("INTERFACE", new SymbolState(TYPEDECLARATIONWITHMODIFIERS,  2));
        state158.put("TRUE", new SymbolState(12));
        state171.put("EXPRESSION1", new SymbolState(62));
        state619.put("SHORT", new SymbolState(EXPRESSION2REST,  2));
        state171.put("EXPRESSION3", new SymbolState(60));
        Map<String, SymbolState> state183 = new HashMap<String, SymbolState>();
        rules.put(183, state183);
        state183.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state171.put("EXPRESSION2", new SymbolState(61));
        state182.put("EXPRESSION1", new SymbolState(90));
        state182.put("EXPRESSION2", new SymbolState(91));
        state182.put("EXPRESSION3", new SymbolState(92));
        state333.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state177.put("DOT", new SymbolState(SELECTOR,  3));
        state193.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state359.put("PLUS", new SymbolState(57));
        state534.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state229.put("LBRACE", new SymbolState(N_COMMA_TYPE_0,  3));
        state58.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state78.put("NULL", new SymbolState(BASICTYPE,  1));
        state581.put("BOOLEANLITERAL", new SymbolState(143));
        state120.put("LITERAL", new SymbolState(401));
        state338.put("RPAREN", new SymbolState(IDENTIFIER,  1));
        state174.put("ID", new SymbolState(51));
        state376.put("INSTANCEOF", new SymbolState(SELECTOR,  2));
        state56.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state405.put("RBRACE", new SymbolState(VARIABLEINITIALIZER,  1));
        state528.put("LONG", new SymbolState(BASICTYPE,  1));
        state484.put("ID", new SymbolState(BASICTYPE,  1));
        state261.put("EXPRESSION", new SymbolState(402));
        state613.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state184.put("BOOLEAN", new SymbolState(56));
        state121.put("PROTECTED", new SymbolState(403));
        state553.put("SHORT", new SymbolState(INTEGERLITERAL,  1));
        state180.put("RPAREN", new SymbolState(LITERAL,  1));
        state106.put("RPAREN", new SymbolState(EXPRESSION1,  1));
        state213.put("INT", new SymbolState(78));
        state10.put("PLUS", new SymbolState(PREFIXOP,  1));
        state420.put("SEMI", new SymbolState(MODIFIER,  1));
        state20.put("BYTE", new SymbolState(BASICTYPE,  1));
        state500.put("SEMI", new SymbolState(IDENTIFIER,  1));
        state393.put("SEMI", new SymbolState(EXPRESSION2,  1));
        state44.put("CHAR_LITERAL", new SymbolState(PREFIXOP,  1));
        state581.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state361.put("LBRACKET", new SymbolState(404));
        state350.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  0));
        state86.put("TYPE", new SymbolState(371));
        state136.put("STR_LITERAL", new SymbolState(214));
        state171.put("DOUBLE", new SymbolState(17));
        state587.put("SEMI", new SymbolState(MODIFIER,  1));
        state302.put("BOOLEAN", new SymbolState(METHODORFIELDDECL,  3));
        state41.put("LPAREN", new SymbolState(261));
        Map<String, SymbolState> state245 = new HashMap<String, SymbolState>();
        rules.put(245, state245);
        state245.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state448.put("INT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state6.put("LONG", new SymbolState(BASICTYPE,  1));
        state172.put("LBRACKET", new SymbolState(LITERAL,  1));
        state351.put("SHORT", new SymbolState(20));
        state145.put("COMMA", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        Map<String, SymbolState> state572 = new HashMap<String, SymbolState>();
        rules.put(572, state572);
        state572.put("RPAREN", new SymbolState(EXPRESSION,  3));
        state129.put("FLOAT", new SymbolState(TYPE,  1));
        state131.put("SHORT", new SymbolState(LITERAL,  1));
        state372.put("RBRACKET", new SymbolState(EXPRESSION2,  2));
        state6.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state509.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state100.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state488.put("ID", new SymbolState(EXPRESSION3,  2));
        state500.put("DOT", new SymbolState(IDENTIFIER,  1));
        state123.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state54.put("SHORT", new SymbolState(20));
        state124.put("LPAREN", new SymbolState(158));
        Map<String, SymbolState> state529 = new HashMap<String, SymbolState>();
        rules.put(529, state529);
        state529.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state23.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state224.put("SEMI", new SymbolState(PRIMARY,  1));
        state51.put("LPAREN", new SymbolState(IDENTIFIER,  1));
        state392.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state411.put("RBRACE", new SymbolState(ARGUMENTS,  2));
        state446.put("ID", new SymbolState(51));
        state200.put("BECOMES", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state54.put("TYPE", new SymbolState(54));
        state10.put("ID", new SymbolState(PREFIXOP,  1));
        state351.put("STR_LITERAL", new SymbolState(155));
        state522.put("FLOAT", new SymbolState(MODIFIER,  1));
        state269.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state167.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  0));
        state6.put("FALSE", new SymbolState(BASICTYPE,  1));
        state362.put("DOUBLE", new SymbolState(EXPRESSION2,  1));
        state174.put("LONG", new SymbolState(6));
        state519.put("INSTANCEOF", new SymbolState(SELECTOR,  2));
        state278.put("FLOAT", new SymbolState(8));
        Map<String, SymbolState> state530 = new HashMap<String, SymbolState>();
        rules.put(530, state530);
        state530.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state357.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state524.put("BOOLEAN", new SymbolState(TYPE,  1));
        state261.put("BASICTYPE", new SymbolState(141));
        state365.put("DOUBLE", new SymbolState(BRACKETSOPT,  1));
        state596.put("FLOAT", new SymbolState(N_SELECTOR_0,  2));
        state182.put("FALSE", new SymbolState(21));
        state598.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state54.put("FALSE", new SymbolState(76));
        state252.put("DOUBLE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state71.put("SEMI", new SymbolState(LITERAL,  1));
        state60.put("COMMA", new SymbolState(EXPRESSION2,  1));
        state401.put("DOUBLE", new SymbolState(PRIMARY,  1));
        state140.put("EXPRESSION", new SymbolState(405));
        state445.put("LPAREN", new SymbolState(30));
        state347.put("BOOLEANLITERAL", new SymbolState(143));
        state23.put("LONG", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state567 = new HashMap<String, SymbolState>();
        rules.put(567, state567);
        state567.put("RPAREN", new SymbolState(406));
        state291.put("LONG", new SymbolState(382));
        state446.put("INTEGERLITERAL", new SymbolState(153));
        state562.put("DOUBLE", new SymbolState(N_SELECTOR_0,  0));
        state275.put("INT", new SymbolState(MODIFIER,  1));
        state605.put("ID", new SymbolState(407));
        state278.put("PAREXPRESSION", new SymbolState(223));
        state38.put("DOT", new SymbolState(LITERAL,  1));
        state75.put("ID", new SymbolState(LITERAL,  1));
        state257.put("COMMA", new SymbolState(BOOLEANLITERAL,  1));
        state120.put("PREFIXOP", new SymbolState(120));
        state176.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state139.put("LONG", new SymbolState(6));
        state180.put("DOT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state330 = new HashMap<String, SymbolState>();
        rules.put(330, state330);
        state330.put("IDENTIFIER", new SymbolState(408));
        state42.put("LBRACKET", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state204 = new HashMap<String, SymbolState>();
        rules.put(204, state204);
        state204.put("RPAREN", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state279 = new HashMap<String, SymbolState>();
        rules.put(279, state279);
        state279.put("RPAREN", new SymbolState(INTEGERLITERAL,  1));
        state237.put("DOUBLE", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state16.put("LBRACKET", new SymbolState(LITERAL,  1));
        state623.put("N_COMMA_EXPRESSION_0", new SymbolState(409));
        state184.put("INT", new SymbolState(78));
        state278.put("EXPRESSION", new SymbolState(410));
        state214.put("RBRACKET", new SymbolState(LITERAL,  1));
        state494.put("ID", new SymbolState(BASICTYPE,  1));
        state257.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state410.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state184.put("IDENTIFIER", new SymbolState(26));
        state335.put("LONG", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state627 = new HashMap<String, SymbolState>();
        rules.put(627, state627);
        state627.put("COMMA", new SymbolState(BRACKETSOPT,  1));
        state522.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state160.put("CLASS", new SymbolState(MODIFIER,  1));
        state124.put("CHAR_LITERAL", new SymbolState(183));
        state204.put("BECOMES", new SymbolState(PRIMARY,  1));
        state227.put("PAREXPRESSION", new SymbolState(271));
        state613.put("SEMI", new SymbolState(BASICTYPE,  1));
        state26.put("LPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state94.put("DOT", new SymbolState(N_SELECTOR_0,  0));
        state468.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state489.put("DOT", new SymbolState(SELECTOR,  2));
        state213.put("FALSE", new SymbolState(21));
        state163.put("DOT", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state540 = new HashMap<String, SymbolState>();
        rules.put(540, state540);
        state540.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state457.put("LPAREN", new SymbolState(30));
        state306.put("CHAR", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state247 = new HashMap<String, SymbolState>();
        rules.put(247, state247);
        state247.put("RBRACKET", new SymbolState(TYPE,  1));
        state333.put("ID", new SymbolState(BASICTYPE,  1));
        state63.put("IMPLEMENTS", new SymbolState(IDENTIFIER,  1));
        state1.put("ID", new SymbolState(BASICTYPE,  1));
        state17.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state147.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state45.put("EXCLAMATION", new SymbolState(44));
        Map<String, SymbolState> state264 = new HashMap<String, SymbolState>();
        rules.put(264, state264);
        state264.put("LBRACKET", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state382 = new HashMap<String, SymbolState>();
        rules.put(382, state382);
        state382.put("ID", new SymbolState(BASICTYPE,  1));
        state242.put("BOOLEAN", new SymbolState(BRACKETSOPT,  1));
        state499.put("RPAREN", new SymbolState(411));
        state79.put("RPAREN", new SymbolState(INTEGERLITERAL,  1));
        Map<String, SymbolState> state360 = new HashMap<String, SymbolState>();
        rules.put(360, state360);
        state360.put("ID", new SymbolState(TYPE,  1));
        state280.put("NULL", new SymbolState(107));
        state136.put("EXPRESSION", new SymbolState(412));
        state347.put("BYTE", new SymbolState(1));
        state564.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state581.put("TRUE", new SymbolState(73));
        state630.put("CLASSBODY", new SymbolState(413));
        state45.put("RPAREN", new SymbolState(414));
        state213.put("PLUS", new SymbolState(57));
        state440.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state102.put("BYTE", new SymbolState(SELECTOR,  2));
        state140.put("INT", new SymbolState(78));
        Map<String, SymbolState> state617 = new HashMap<String, SymbolState>();
        rules.put(617, state617);
        state617.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state59.put("EXPRESSION3", new SymbolState(415));
        state65.put("LONG", new SymbolState(LITERAL,  1));
        state57.put("STR_LITERAL", new SymbolState(PREFIXOP,  1));
        state10.put("MINUS", new SymbolState(PREFIXOP,  1));
        state529.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state476.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state588.put("RBRACE", new SymbolState(ARGUMENTS,  2));
        state512.put("EOF", new SymbolState(IMPORTDECLARATION,  4));
        state259.put("FLOAT", new SymbolState(8));
        state70.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state522.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state341.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state267.put("DOUBLE", new SymbolState(CLASSBODYDECLARATION,  1));
        state347.put("ID", new SymbolState(51));
        state51.put("PLUS", new SymbolState(IDENTIFIER,  1));
        state99.put("STR_LITERAL", new SymbolState(84));
        state558.put("RPAREN", new SymbolState(BRACKETSOPT,  1));
        state369.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state38.put("LBRACKET", new SymbolState(LITERAL,  1));
        state31.put("NULL", new SymbolState(16));
        state272.put("FLOAT", new SymbolState(EXPRESSION3,  2));
        state24.put("LBRACE", new SymbolState(BRACKETSOPT,  1));
        state602.put("ID", new SymbolState(416));
        state20.put("MINUS", new SymbolState(BASICTYPE,  1));
        state291.put("BASICTYPE", new SymbolState(360));
        state347.put("LONG", new SymbolState(6));
        state81.put("CHAR", new SymbolState(BASICTYPE,  1));
        state374.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state152.put("COMMA", new SymbolState(BASICTYPE,  1));
        state598.put("CHAR", new SymbolState(MODIFIER,  1));
        state254.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state401.put("ID", new SymbolState(PRIMARY,  1));
        state176.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state501 = new HashMap<String, SymbolState>();
        rules.put(501, state501);
        state501.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state448.put("N_DOT_IDENTIFIER_0", new SymbolState(417));
        state153.put("LBRACKET", new SymbolState(LITERAL,  1));
        state357.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state194.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state251.put("EXCLAMATION", new SymbolState(44));
        state332.put("CLASS", new SymbolState(TYPEDECLARATIONWITHOUTMODIFIERS,  1));
        state15.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state23.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state610.put("SHORT", new SymbolState(418));
        state5.put("LONG", new SymbolState(6));
        state185.put("ID", new SymbolState(51));
        state121.put("CLASS", new SymbolState(77));
        state604.put("BYTE", new SymbolState(ARGUMENTS,  4));
        state374.put("EXCLAMATION", new SymbolState(44));
        state95.put("BYTE", new SymbolState(1));
        state44.put("NULL", new SymbolState(PREFIXOP,  1));
        state589.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state191.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state442.put("RPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state26.put("PLUS", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state185.put("LONG", new SymbolState(6));
        state275.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state515.put("BOOLEAN", new SymbolState(N_SELECTOR_0,  2));
        state588.put("SHORT", new SymbolState(ARGUMENTS,  2));
        state242.put("SHORT", new SymbolState(BRACKETSOPT,  1));
        state29.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state5.put("BYTE", new SymbolState(1));
        state278.put("BASICTYPE", new SymbolState(141));
        state596.put("BOOLEAN", new SymbolState(N_SELECTOR_0,  2));
        state484.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state87.put("CLASSDECLARATION", new SymbolState(381));
        state178.put("BYTE", new SymbolState(BRACKETSOPT,  1));
        state613.put("INT", new SymbolState(BASICTYPE,  1));
        state266.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state92.put("BECOMES", new SymbolState(EXPRESSION2,  1));
        state158.put("PAREXPRESSION", new SymbolState(271));
        state241.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state261.put("NULL", new SymbolState(16));
        state176.put("INT", new SymbolState(MODIFIER,  1));
        state239.put("DOT", new SymbolState(N_SELECTOR_0,  0));
        state611.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state621.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state304.put("LBRACKET", new SymbolState(N_SELECTOR_0,  0));
        state46.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state335.put("CHAR", new SymbolState(EXPRESSION3,  2));
        state59.put("DECIMAL_INTEGER_LITERAL", new SymbolState(279));
        state146.put("EXPRESSION3", new SymbolState(419));
        state41.put("BYTE", new SymbolState(1));
        state58.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state86.put("STRICTFP", new SymbolState(420));
        state107.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state237.put("MINUS", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state75.put("INT", new SymbolState(LITERAL,  1));
        state317.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state363.put("LONG", new SymbolState(EXPRESSION1,  1));
        state208.put("ID", new SymbolState(63));
        state398.put("CHAR", new SymbolState(CLASSBODYDECLARATION,  2));
        state13.put("CHAR", new SymbolState(EXPRESSION2,  2));
        state99.put("PRIMARY", new SymbolState(304));
        state265.put("COMMA", new SymbolState(BASICTYPE,  1));
        state10.put("BOOLEAN", new SymbolState(PREFIXOP,  1));
        state114.put("BECOMES", new SymbolState(EXPRESSION2,  1));
        state95.put("LONG", new SymbolState(6));
        Map<String, SymbolState> state118 = new HashMap<String, SymbolState>();
        rules.put(118, state118);
        state118.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state446.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        state351.put("BOOLEANLITERAL", new SymbolState(175));
        state499.put("INTEGERLITERAL", new SymbolState(231));
        state566.put("BOOLEAN", new SymbolState(421));
        state88.put("SEMI", new SymbolState(IDENTIFIER,  1));
        state629.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state597.put("COMMA", new SymbolState(N_COMMA_TYPE_0,  0));
        state197.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state158.put("BYTE", new SymbolState(1));
        state381.put("INTERFACE", new SymbolState(TYPEDECLARATIONWITHOUTMODIFIERS,  1));
        state500.put("BOOLEAN", new SymbolState(IDENTIFIER,  1));
        state176.put("SHORT", new SymbolState(MODIFIER,  1));
        state462.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state527.put("DOUBLE", new SymbolState(422));
        state589.put("BYTE", new SymbolState(SELECTOR,  3));
        state268.put("DOUBLE", new SymbolState(423));
        state439.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state64.put("LONG", new SymbolState(EXPRESSION3,  2));
        state182.put("INTEGERLITERAL", new SymbolState(153));
        state291.put("BOOLEAN", new SymbolState(133));
        state580.put("COMMA", new SymbolState(BASICTYPE,  1));
        state99.put("CHAR", new SymbolState(81));
        state301.put("MINUS", new SymbolState(10));
        state72.put("RBRACE", new SymbolState(TYPE,  3));
        state353.put("FLOAT", new SymbolState(LITERAL,  1));
        state185.put("DOUBLE", new SymbolState(17));
        state622.put("LBRACKET", new SymbolState(PAREXPRESSION,  3));
        state45.put("STR_LITERAL", new SymbolState(170));
        Map<String, SymbolState> state561 = new HashMap<String, SymbolState>();
        rules.put(561, state561);
        state561.put("COMMA", new SymbolState(EXPRESSION2REST,  2));
        state83.put("DOT", new SymbolState(PRIMARY,  1));
        state534.put("ID", new SymbolState(MODIFIER,  1));
        state509.put("CHAR", new SymbolState(BASICTYPE,  1));
        state209.put("LBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state244.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state390.put("INT", new SymbolState(EXPRESSION,  1));
        state383.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state304.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  0));
        state376.put("DOUBLE", new SymbolState(SELECTOR,  2));
        state78.put("TRUE", new SymbolState(BASICTYPE,  1));
        state134.put("NULL", new SymbolState(306));
        state587.put("NATIVE", new SymbolState(MODIFIER,  1));
        state162.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state557 = new HashMap<String, SymbolState>();
        rules.put(557, state557);
        state557.put("LBRACE", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state192 = new HashMap<String, SymbolState>();
        rules.put(192, state192);
        state192.put("DOT", new SymbolState(LITERAL,  1));
        state175.put("BECOMES", new SymbolState(LITERAL,  1));
        state553.put("SEMI", new SymbolState(INTEGERLITERAL,  1));
        state608.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state359.put("ID", new SymbolState(51));
        state300.put("SHORT", new SymbolState(BASICTYPE,  1));
        state171.put("NULL", new SymbolState(107));
        state283.put("RPAREN", new SymbolState(IDENTIFIER,  1));
        state81.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state588.put("INT", new SymbolState(ARGUMENTS,  2));
        state457.put("INTEGERLITERAL", new SymbolState(153));
        state441.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state587.put("INT", new SymbolState(MODIFIER,  1));
        state399.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state627.put("LBRACKET", new SymbolState(424));
        state579.put("LPAREN", new SymbolState(TYPE,  3));
        state506.put("SHORT", new SymbolState(SELECTOR,  3));
        state283.put("BECOMES", new SymbolState(IDENTIFIER,  1));
        state397.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state454.put("INSTANCEOF", new SymbolState(SELECTOR,  2));
        state439.put("INT", new SymbolState(MODIFIER,  1));
        state138.put("DOT", new SymbolState(PRIMARY,  1));
        state430.put("BYTE", new SymbolState(1));
        state448.put("BECOMES", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state198.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  2));
        state430.put("TRUE", new SymbolState(73));
        state1.put("BYTE", new SymbolState(BASICTYPE,  1));
        state291.put("CHAR", new SymbolState(425));
        state13.put("DOUBLE", new SymbolState(EXPRESSION2,  2));
        state195.put("INT", new SymbolState(EXPRESSION2,  2));
        state576.put("COMMA", new SymbolState(PAREXPRESSION,  3));
        state295.put("RBRACE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state200.put("RBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state288.put("RPAREN", new SymbolState(IDENTIFIER,  1));
        state151.put("LBRACE", new SymbolState(319));
        state616.put("INSTANCEOF", new SymbolState(ARGUMENTS,  2));
        state294.put("DOT", new SymbolState(SELECTOR,  3));
        state213.put("BOOLEAN", new SymbolState(56));
        state355.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state146.put("PRIMARY", new SymbolState(239));
        state32.put("INT", new SymbolState(318));
        state56.put("ID", new SymbolState(BASICTYPE,  1));
        state273.put("LBRACKET", new SymbolState(LITERAL,  1));
        state62.put("COMMA", new SymbolState(EXPRESSION,  1));
        state41.put("EXCLAMATION", new SymbolState(44));
        state263.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state534.put("INT", new SymbolState(MODIFIER,  1));
        state140.put("BYTE", new SymbolState(1));
        state353.put("BYTE", new SymbolState(LITERAL,  1));
        state201.put("LONG", new SymbolState(TYPE,  3));
        state134.put("PREFIXOP", new SymbolState(174));
        state276.put("RBRACE", new SymbolState(EXPRESSION2REST,  2));
        state27.put("EXPRESSION", new SymbolState(426));
        state563.put("RBRACE", new SymbolState(VARIABLEDECLARATORREST,  3));
        state10.put("LONG", new SymbolState(PREFIXOP,  1));
        state392.put("LBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state539.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state45.put("TRUE", new SymbolState(73));
        state604.put("RBRACE", new SymbolState(ARGUMENTS,  4));
        state45.put("PREFIXOP", new SymbolState(185));
        state448.put("FLOAT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state539.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state471.put("N_LBRACKET_RBRACKET_0", new SymbolState(427));
        state176.put("NATIVE", new SymbolState(MODIFIER,  1));
        state509.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state446.put("PLUS", new SymbolState(57));
        state374.put("BYTE", new SymbolState(1));
        state200.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state120.put("DECIMAL_INTEGER_LITERAL", new SymbolState(253));
        state12.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state141.put("CHAR_LITERAL", new SymbolState(TYPE,  1));
        state3.put("BECOMES", new SymbolState(N_SELECTOR_0,  0));
        state492.put("SELECTOR", new SymbolState(428));
        state146.put("MINUS", new SymbolState(10));
        state295.put("SEMI", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state549.put("LBRACE", new SymbolState(IDENTIFIER,  1));
        state298.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state185.put("CHAR_LITERAL", new SymbolState(69));
        state141.put("STR_LITERAL", new SymbolState(TYPE,  1));
        state59.put("FLOAT", new SymbolState(8));
        Map<String, SymbolState> state395 = new HashMap<String, SymbolState>();
        rules.put(395, state395);
        state395.put("RBRACKET", new SymbolState(429));
        state230.put("BOOLEAN", new SymbolState(EXPRESSION3,  2));
        state298.put("STATIC", new SymbolState(MODIFIER,  1));
        state111.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state215.put("BECOMES", new SymbolState(IDENTIFIER,  1));
        state264.put("DOT", new SymbolState(INTEGERLITERAL,  1));
        state350.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  0));
        Map<String, SymbolState> state547 = new HashMap<String, SymbolState>();
        rules.put(547, state547);
        state547.put("DOT", new SymbolState(ARGUMENTS,  2));
        state454.put("LPAREN", new SymbolState(430));
        state621.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state362.put("INT", new SymbolState(EXPRESSION2,  1));
        Map<String, SymbolState> state606 = new HashMap<String, SymbolState>();
        rules.put(606, state606);
        state606.put("RPAREN", new SymbolState(431));
        state8.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state147.put("LBRACE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state396.put("N_COMMA_EXPRESSION_0", new SymbolState(432));
        state362.put("FLOAT", new SymbolState(EXPRESSION2,  1));
        state59.put("ID", new SymbolState(51));
        state454.put("ARGUMENTS", new SymbolState(433));
        state185.put("CHAR", new SymbolState(81));
        state290.put("DOT", new SymbolState(434));
        state2.put("RPAREN", new SymbolState(SELECTOR,  3));
        state146.put("PLUS", new SymbolState(57));
        state72.put("BOOLEAN", new SymbolState(TYPE,  3));
        state13.put("LONG", new SymbolState(EXPRESSION2,  2));
        state1.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state263.put("SHORT", new SymbolState(MODIFIER,  1));
        state399.put("DOT", new SymbolState(SELECTOR,  3));
        state259.put("INT", new SymbolState(78));
        state45.put("TYPE", new SymbolState(259));
        state50.put("INT", new SymbolState(78));
        state587.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state10.put("LPAREN", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state211 = new HashMap<String, SymbolState>();
        rules.put(211, state211);
        state211.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state530.put("COMMA", new SymbolState(BASICTYPE,  1));
        state430.put("BOOLEAN", new SymbolState(56));
        state243.put("FINAL", new SymbolState(MODIFIER,  1));
        state437.put("LPAREN", new SymbolState(IDENTIFIER,  1));
        state243.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state215.put("SEMI", new SymbolState(IDENTIFIER,  1));
        state350.put("IMPORTDECLARATION", new SymbolState(46));
        state261.put("DOUBLE", new SymbolState(17));
        state407.put("RPAREN", new SymbolState(IDENTIFIER,  1));
        state625.put("RBRACE", new SymbolState(435));
        state513.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state158.put("DOUBLE", new SymbolState(17));
        state171.put("INT", new SymbolState(78));
        state539.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state27.put("LONG", new SymbolState(6));
        state477.put("SEMI", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state272.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state86.put("SHORT", new SymbolState(436));
        Map<String, SymbolState> state526 = new HashMap<String, SymbolState>();
        rules.put(526, state526);
        state526.put("COMMA", new SymbolState(BASICTYPE,  1));
        state283.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state446.put("TYPE", new SymbolState(5));
        state64.put("CHAR", new SymbolState(EXPRESSION3,  2));
        state514.put("STRICTFP", new SymbolState(MODIFIERS,  2));
        Map<String, SymbolState> state502 = new HashMap<String, SymbolState>();
        rules.put(502, state502);
        state502.put("ID", new SymbolState(437));
        state445.put("IDENTIFIER", new SymbolState(26));
        state534.put("SHORT", new SymbolState(MODIFIER,  1));
        state376.put("SHORT", new SymbolState(SELECTOR,  2));
        state184.put("LITERAL", new SymbolState(438));
        state159.put("RBRACKET", new SymbolState(LITERAL,  1));
        state543.put("LBRACE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state259.put("LONG", new SymbolState(6));
        state514.put("INT", new SymbolState(MODIFIERS,  2));
        state78.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state253.put("ID", new SymbolState(INTEGERLITERAL,  1));
        state201.put("SHORT", new SymbolState(TYPE,  3));
        state528.put("CHAR", new SymbolState(BASICTYPE,  1));
        state459.put("RBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state20.put("INT", new SymbolState(BASICTYPE,  1));
        state278.put("BYTE", new SymbolState(1));
        state141.put("LONG", new SymbolState(TYPE,  1));
        state260.put("RBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state194.put("BYTE", new SymbolState(BASICTYPE,  1));
        state446.put("LPAREN", new SymbolState(30));
        state31.put("SHORT", new SymbolState(20));
        state451.put("SHORT", new SymbolState(20));
        state73.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state499.put("MINUS", new SymbolState(10));
        state120.put("PRIMARY", new SymbolState(234));
        state413.put("EOF", new SymbolState(CLASSDECLARATION,  5));
        state139.put("BYTE", new SymbolState(1));
        state213.put("PREFIXOP", new SymbolState(139));
        state86.put("FINAL", new SymbolState(439));
        state587.put("BYTE", new SymbolState(MODIFIER,  1));
        state171.put("TRUE", new SymbolState(73));
        state289.put("RPAREN", new SymbolState(PRIMARY,  1));
        state80.put("COMMA", new SymbolState(PRIMARY,  1));
        state194.put("INT", new SymbolState(BASICTYPE,  1));
        state497.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state169.put("INSTANCEOF", new SymbolState(INTEGERLITERAL,  1));
        state242.put("CHAR", new SymbolState(BRACKETSOPT,  1));
        state213.put("CHAR_LITERAL", new SymbolState(159));
        state562.put("DOT", new SymbolState(N_SELECTOR_0,  0));
        state411.put("CHAR", new SymbolState(ARGUMENTS,  2));
        state146.put("DOUBLE", new SymbolState(17));
        state259.put("STR_LITERAL", new SymbolState(170));
        state498.put("IDENTIFIER", new SymbolState(440));
        state50.put("STR_LITERAL", new SymbolState(441));
        state263.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state27.put("STR_LITERAL", new SymbolState(214));
        state551.put("SHORT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state527.put("IDENTIFIER", new SymbolState(442));
        state139.put("EXPRESSION3", new SymbolState(443));
        state1.put("MINUS", new SymbolState(BASICTYPE,  1));
        state234.put("BYTE", new SymbolState(N_SELECTOR_0,  0));
        state57.put("LONG", new SymbolState(PREFIXOP,  1));
        state266.put("SHORT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state321 = new HashMap<String, SymbolState>();
        rules.put(321, state321);
        state321.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state624.put("IDENTIFIER", new SymbolState(444));
        state32.put("IDENTIFIER", new SymbolState(241));
        state1.put("INT", new SymbolState(BASICTYPE,  1));
        state216.put("DOT", new SymbolState(ARGUMENTS,  4));
        state539.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state259.put("TRUE", new SymbolState(73));
        state458.put("BYTE", new SymbolState(152));
        state30.put("FALSE", new SymbolState(76));
        state387.put("ID", new SymbolState(EXPRESSION3,  2));
        state619.put("BOOLEAN", new SymbolState(EXPRESSION2REST,  2));
        state534.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state244.put("N_LBRACKET_RBRACKET_0", new SymbolState(365));
        state19.put("BYTE", new SymbolState(MEMBERDECL,  1));
        state146.put("FALSE", new SymbolState(257));
        state403.put("STATIC", new SymbolState(MODIFIER,  1));
        state146.put("PAREXPRESSION", new SymbolState(80));
        state252.put("SEMI", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state30.put("PAREXPRESSION", new SymbolState(271));
        state4.put("LBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state450.put("INSTANCEOF", new SymbolState(SELECTOR,  2));
        state30.put("SHORT", new SymbolState(20));
        Map<String, SymbolState> state52 = new HashMap<String, SymbolState>();
        rules.put(52, state52);
        state52.put("RBRACKET", new SymbolState(EXPRESSION2,  2));
        Map<String, SymbolState> state438 = new HashMap<String, SymbolState>();
        rules.put(438, state438);
        state438.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state187.put("RBRACE", new SymbolState(ARGUMENTS,  4));
        state267.put("LONG", new SymbolState(CLASSBODYDECLARATION,  1));
        state50.put("CHAR", new SymbolState(81));
        state439.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state509.put("SHORT", new SymbolState(BASICTYPE,  1));
        state71.put("INT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state127 = new HashMap<String, SymbolState>();
        rules.put(127, state127);
        state127.put("RPAREN", new SymbolState(INTEGERLITERAL,  1));
        state272.put("LBRACKET", new SymbolState(445));
        state517.put("LBRACKET", new SymbolState(446));
        state376.put("INT", new SymbolState(SELECTOR,  2));
        state277.put("ID", new SymbolState(288));
        state515.put("DOT", new SymbolState(N_SELECTOR_0,  2));
        state301.put("SHORT", new SymbolState(20));
        state17.put("LONG", new SymbolState(BASICTYPE,  1));
        state551.put("PLUS", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state86.put("METHODORFIELDDECL", new SymbolState(447));
        state359.put("TRUE", new SymbolState(164));
        state211.put("SEMI", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state158.put("EXPRESSION3", new SymbolState(114));
        state134.put("EXCLAMATION", new SymbolState(44));
        state327.put("RBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state455.put("CHAR", new SymbolState(BASICTYPE,  1));
        state158.put("EXPRESSION1", new SymbolState(115));
        state158.put("EXPRESSION2", new SymbolState(113));
        state227.put("BOOLEAN", new SymbolState(56));
        state359.put("FLOAT", new SymbolState(8));
        state525.put("BECOMES", new SymbolState(SELECTOR,  2));
        state276.put("BOOLEAN", new SymbolState(EXPRESSION2REST,  2));
        state423.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state581.put("BYTE", new SymbolState(1));
        state364.put("ID", new SymbolState(EXPRESSION,  3));
        state408.put("SEMI", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state510.put("IDENTIFIER", new SymbolState(448));
        state131.put("BYTE", new SymbolState(LITERAL,  1));
        state9.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state41.put("STR_LITERAL", new SymbolState(84));
        state359.put("PRIMARY", new SymbolState(234));
        state463.put("BRACKETSOPT", new SymbolState(449));
        state252.put("LONG", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state430.put("NULL", new SymbolState(107));
        state393.put("BYTE", new SymbolState(EXPRESSION2,  1));
        state502.put("IDENTIFIER", new SymbolState(450));
        state56.put("LONG", new SymbolState(BASICTYPE,  1));
        state1.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state176.put("STATIC", new SymbolState(MODIFIER,  1));
        state581.put("IDENTIFIER", new SymbolState(26));
        state401.put("SEMI", new SymbolState(PRIMARY,  1));
        state631.put("CHAR", new SymbolState(40));
        state94.put("RPAREN", new SymbolState(N_SELECTOR_0,  0));
        state587.put("LONG", new SymbolState(MODIFIER,  1));
        state21.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state156.put("LBRACKET", new SymbolState(LITERAL,  1));
        state445.put("MINUS", new SymbolState(10));
        state390.put("ASSIGNMENTOPERATOR", new SymbolState(451));
        state411.put("DOT", new SymbolState(ARGUMENTS,  2));
        state178.put("CHAR_LITERAL", new SymbolState(BRACKETSOPT,  1));
        state610.put("INT", new SymbolState(452));
        state498.put("BOOLEAN", new SymbolState(453));
        state58.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state370.put("CLASS", new SymbolState(CLASSDECLARATION,  5));
        state67.put("EOF", new SymbolState(TYPEDECLARATION,  1));
        state568.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state581.put("EXPRESSION3", new SymbolState(60));
        state250.put("LBRACKET", new SymbolState(ARGUMENTS,  4));
        state484.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state581.put("EXPRESSION2", new SymbolState(61));
        state581.put("EXPRESSION1", new SymbolState(62));
        state14.put("LONG", new SymbolState(6));
        state345.put("BECOMES", new SymbolState(IDENTIFIER,  1));
        state41.put("LONG", new SymbolState(6));
        state430.put("DOUBLE", new SymbolState(17));
        state14.put("EXPRESSION1", new SymbolState(115));
        state227.put("IDENTIFIER", new SymbolState(26));
        state14.put("EXPRESSION2", new SymbolState(113));
        state93.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state14.put("EXPRESSION3", new SymbolState(114));
        state46.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state364.put("DOUBLE", new SymbolState(EXPRESSION,  3));
        Map<String, SymbolState> state270 = new HashMap<String, SymbolState>();
        rules.put(270, state270);
        state270.put("IDENTIFIER", new SymbolState(454));
        state120.put("BOOLEAN", new SymbolState(56));
        state42.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state132.put("BECOMES", new SymbolState(EXPRESSION2REST,  2));
        state81.put("BYTE", new SymbolState(BASICTYPE,  1));
        state176.put("ID", new SymbolState(MODIFIER,  1));
        state509.put("ID", new SymbolState(BASICTYPE,  1));
        state522.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state188.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state162.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state587.put("FINAL", new SymbolState(MODIFIER,  1));
        state399.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state178.put("INT", new SymbolState(BRACKETSOPT,  1));
        state276.put("DOUBLE", new SymbolState(EXPRESSION2REST,  2));
        state196.put("EOF", new SymbolState(CLASSDECLARATION,  7));
        state5.put("ID", new SymbolState(51));
        state8.put("LONG", new SymbolState(BASICTYPE,  1));
        state183.put("LBRACKET", new SymbolState(LITERAL,  1));
        state275.put("BYTE", new SymbolState(MODIFIER,  1));
        state275.put("STATIC", new SymbolState(MODIFIER,  1));
        state347.put("TYPE", new SymbolState(259));
        state122.put("RPAREN", new SymbolState(SELECTOR,  3));
        state20.put("NULL", new SymbolState(BASICTYPE,  1));
        state509.put("SEMI", new SymbolState(BASICTYPE,  1));
        state253.put("DOUBLE", new SymbolState(INTEGERLITERAL,  1));
        state309.put("DOT", new SymbolState(LITERAL,  1));
        state241.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state55 = new HashMap<String, SymbolState>();
        rules.put(55, state55);
        state55.put("COMMA", new SymbolState(BASICTYPE,  1));
        state387.put("CHAR", new SymbolState(EXPRESSION3,  2));
        state510.put("INT", new SymbolState(455));
        state172.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state54.put("PAREXPRESSION", new SymbolState(271));
        state331.put("ID", new SymbolState(88));
        state244.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state500.put("BECOMES", new SymbolState(IDENTIFIER,  1));
        state45.put("SHORT", new SymbolState(20));
        state280.put("BASICTYPE", new SymbolState(141));
        state598.put("INT", new SymbolState(MODIFIER,  1));
        state120.put("SHORT", new SymbolState(20));
        state397.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state268.put("INT", new SymbolState(456));
        state141.put("SHORT", new SymbolState(TYPE,  1));
        state237.put("ID", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state248.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state405.put("CHAR", new SymbolState(VARIABLEINITIALIZER,  1));
        state396.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state333.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state125.put("COMMA", new SymbolState(IDENTIFIER,  1));
        state398.put("SHORT", new SymbolState(CLASSBODYDECLARATION,  2));
        state215.put("CHAR", new SymbolState(IDENTIFIER,  1));
        state224.put("BECOMES", new SymbolState(PRIMARY,  1));
        state45.put("BOOLEAN", new SymbolState(56));
        state598.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state534.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state528.put("SHORT", new SymbolState(BASICTYPE,  1));
        state174.put("FLOAT", new SymbolState(8));
        state58.put("BYTE", new SymbolState(MODIFIER,  1));
        state346.put("RPAREN", new SymbolState(IDENTIFIER,  1));
        state298.put("FINAL", new SymbolState(MODIFIER,  1));
        state333.put("BYTE", new SymbolState(BASICTYPE,  1));
        state145.put("BECOMES", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state4.put("RPAREN", new SymbolState(N_SELECTOR_0,  2));
        state568.put("LBRACKET", new SymbolState(457));
        state174.put("SHORT", new SymbolState(20));
        state64.put("DOUBLE", new SymbolState(EXPRESSION3,  2));
        state56.put("MINUS", new SymbolState(BASICTYPE,  1));
        state394.put("SEMI", new SymbolState(EXPRESSION1,  1));
        state191.put("SHORT", new SymbolState(BOOLEANLITERAL,  1));
        state387.put("LONG", new SymbolState(EXPRESSION3,  2));
        state619.put("ID", new SymbolState(EXPRESSION2REST,  2));
        state571.put("IMPLEMENTS", new SymbolState(458));
        Map<String, SymbolState> state68 = new HashMap<String, SymbolState>();
        rules.put(68, state68);
        state68.put("RBRACKET", new SymbolState(459));
        state625.put("SEMI", new SymbolState(460));
        state182.put("FLOAT", new SymbolState(8));
        state214.put("LBRACKET", new SymbolState(LITERAL,  1));
        state534.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state451.put("PLUS", new SymbolState(57));
        Map<String, SymbolState> state337 = new HashMap<String, SymbolState>();
        rules.put(337, state337);
        state337.put("SEMI", new SymbolState(CLASSDECLARATION,  3));
        state261.put("PREFIXOP", new SymbolState(124));
        state381.put("EOF", new SymbolState(TYPEDECLARATIONWITHOUTMODIFIERS,  1));
        state466.put("BOOLEAN", new SymbolState(IDENTIFIER,  1));
        state543.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state303.put("BYTE", new SymbolState(BASICTYPE,  1));
        state349.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state587.put("SHORT", new SymbolState(MODIFIER,  1));
        state255.put("COMMA", new SymbolState(LITERAL,  1));
        state543.put("IMPLEMENTS", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state23.put("BOOLEAN", new SymbolState(BOOLEANLITERAL,  1));
        state275.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state93.put("INT", new SymbolState(MODIFIER,  1));
        state173.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state439.put("FINAL", new SymbolState(MODIFIER,  1));
        state411.put("INSTANCEOF", new SymbolState(ARGUMENTS,  2));
        state13.put("FLOAT", new SymbolState(EXPRESSION2,  2));
        state257.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state32.put("CHAR", new SymbolState(40));
        state59.put("INT", new SymbolState(78));
        state351.put("BASICTYPE", new SymbolState(141));
        state581.put("EXCLAMATION", new SymbolState(44));
        state568.put("DOT", new SymbolState(461));
        state134.put("BOOLEAN", new SymbolState(56));
        state23.put("SHORT", new SymbolState(BOOLEANLITERAL,  1));
        state134.put("CHAR", new SymbolState(81));
        state514.put("STATIC", new SymbolState(MODIFIERS,  2));
        state566.put("FLOAT", new SymbolState(462));
        state45.put("PLUS", new SymbolState(57));
        state345.put("RBRACKET", new SymbolState(IDENTIFIER,  1));
        state272.put("ID", new SymbolState(EXPRESSION3,  2));
        state146.put("ID", new SymbolState(51));
        state41.put("FLOAT", new SymbolState(8));
        state87.put("SEMI", new SymbolState(28));
        state440.put("N_DOT_IDENTIFIER_0", new SymbolState(463));
        state75.put("FLOAT", new SymbolState(LITERAL,  1));
        state58.put("ID", new SymbolState(MODIFIER,  1));
        state253.put("FLOAT", new SymbolState(INTEGERLITERAL,  1));
        state56.put("INT", new SymbolState(BASICTYPE,  1));
        state595.put("INSTANCEOF", new SymbolState(PAREXPRESSION,  3));
        state459.put("SEMI", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state67.put("INTERFACE", new SymbolState(TYPEDECLARATION,  1));
        state579.put("FALSE", new SymbolState(TYPE,  3));
        state306.put("RBRACE", new SymbolState(LITERAL,  1));
        state276.put("FLOAT", new SymbolState(EXPRESSION2REST,  2));
        state333.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state216.put("LBRACKET", new SymbolState(ARGUMENTS,  4));
        state398.put("INT", new SymbolState(CLASSBODYDECLARATION,  2));
        Map<String, SymbolState> state235 = new HashMap<String, SymbolState>();
        rules.put(235, state235);
        state235.put("SEMI", new SymbolState(464));
        state351.put("PAREXPRESSION", new SymbolState(271));
        state400.put("CLASS", new SymbolState(CLASSBODY,  3));
        state146.put("LITERAL", new SymbolState(465));
        state522.put("SEMI", new SymbolState(MODIFIER,  1));
        state34.put("ID", new SymbolState(466));
        state178.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BRACKETSOPT,  1));
        state99.put("EXPRESSION3", new SymbolState(467));
        state447.put("INT", new SymbolState(MEMBERDECL,  1));
        state95.put("CHAR_LITERAL", new SymbolState(156));
        state194.put("ID", new SymbolState(BASICTYPE,  1));
        state333.put("INT", new SymbolState(BASICTYPE,  1));
        state108.put("BOOLEAN", new SymbolState(BOOLEANLITERAL,  1));
        state582.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state78.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state31.put("CHAR", new SymbolState(81));
        state494.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state259.put("PLUS", new SymbolState(57));
        state208.put("INT", new SymbolState(468));
        state619.put("BECOMES", new SymbolState(EXPRESSION2REST,  2));
        state301.put("BOOLEANLITERAL", new SymbolState(175));
        state405.put("SHORT", new SymbolState(VARIABLEINITIALIZER,  1));
        state499.put("PLUS", new SymbolState(57));
        state183.put("DOT", new SymbolState(LITERAL,  1));
        state218.put("DOUBLE", new SymbolState(METHODORFIELDREST,  1));
        state357.put("FINAL", new SymbolState(MODIFIER,  1));
        state327.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state184.put("CHAR", new SymbolState(81));
        state437.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state364.put("SEMI", new SymbolState(EXPRESSION,  3));
        state140.put("PLUS", new SymbolState(57));
        state164.put("SEMI", new SymbolState(BOOLEANLITERAL,  1));
        state337.put("CLASS", new SymbolState(CLASSDECLARATION,  3));
        state272.put("BYTE", new SymbolState(EXPRESSION3,  2));
        state140.put("ID", new SymbolState(51));
        state32.put("LONG", new SymbolState(47));
        state551.put("BOOLEAN", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state488.put("SEMI", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state286 = new HashMap<String, SymbolState>();
        rules.put(286, state286);
        state286.put("LBRACE", new SymbolState(TYPE,  1));
        state259.put("LPAREN", new SymbolState(14));
        state377.put("RBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state515.put("FLOAT", new SymbolState(N_SELECTOR_0,  2));
        state184.put("EXPRESSION3", new SymbolState(469));
        state184.put("EXPRESSION2", new SymbolState(470));
        state284.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state604.put("SEMI", new SymbolState(ARGUMENTS,  4));
        state481.put("N_DOT_IDENTIFIER_0", new SymbolState(471));
        state184.put("EXPRESSION1", new SymbolState(472));
        state87.put("INTERFACE", new SymbolState(373));
        state577.put("INTERFACE", new SymbolState(MODIFIERS,  2));
        state522.put("BYTE", new SymbolState(MODIFIER,  1));
        state455.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state446.put("BASICTYPE", new SymbolState(141));
        state561.put("BECOMES", new SymbolState(EXPRESSION2REST,  2));
        state419.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state506.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state332.put("SEMI", new SymbolState(TYPEDECLARATIONWITHOUTMODIFIERS,  1));
        state562.put("BYTE", new SymbolState(N_SELECTOR_0,  0));
        state620.put("BECOMES", new SymbolState(ARGUMENTS,  2));
        state156.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state507.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state403.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state121.put("CLASSDECLARATION", new SymbolState(381));
        state551.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state521.put("TYPEDECLARATIONWITHOUTMODIFIERS", new SymbolState(67));
        state242.put("INT", new SymbolState(BRACKETSOPT,  1));
        state490.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state83.put("RPAREN", new SymbolState(PRIMARY,  1));
        state280.put("LITERAL", new SymbolState(204));
        state598.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state479.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state463.put("DOT", new SymbolState(473));
        state131.put("DOUBLE", new SymbolState(LITERAL,  1));
        state251.put("FLOAT", new SymbolState(8));
        state374.put("IDENTIFIER", new SymbolState(26));
        state220.put("RPAREN", new SymbolState(474));
        state557.put("IMPLEMENTS", new SymbolState(TYPE,  3));
        state102.put("DOT", new SymbolState(SELECTOR,  2));
        state614.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state24.put("IMPLEMENTS", new SymbolState(BRACKETSOPT,  1));
        state218.put("SEMI", new SymbolState(METHODORFIELDREST,  1));
        state160.put("NATIVE", new SymbolState(MODIFIER,  1));
        state163.put("N_SELECTOR_0", new SymbolState(475));
        state216.put("INSTANCEOF", new SymbolState(ARGUMENTS,  4));
        state579.put("CHAR_LITERAL", new SymbolState(TYPE,  3));
        state139.put("TRUE", new SymbolState(260));
        state411.put("LBRACKET", new SymbolState(ARGUMENTS,  2));
        state91.put("RBRACKET", new SymbolState(EXPRESSION1,  1));
        state288.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state184.put("NULL", new SymbolState(11));
        state368.put("LPAREN", new SymbolState(IDENTIFIER,  1));
        state27.put("TYPE", new SymbolState(5));
        state364.put("INT", new SymbolState(EXPRESSION,  3));
        state158.put("LITERAL", new SymbolState(83));
        state289.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state171.put("PLUS", new SymbolState(57));
        state614.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state556 = new HashMap<String, SymbolState>();
        rules.put(556, state556);
        state556.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state280.put("PREFIXOP", new SymbolState(185));
        state83.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state280.put("TRUE", new SymbolState(73));
        state276.put("SEMI", new SymbolState(EXPRESSION2REST,  2));
        state111.put("CHAR", new SymbolState(BASICTYPE,  1));
        state5.put("EXPRESSION3", new SymbolState(476));
        state176.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state347.put("EXPRESSION2", new SymbolState(61));
        state95.put("LPAREN", new SymbolState(351));
        state347.put("EXPRESSION3", new SymbolState(60));
        state347.put("EXPRESSION1", new SymbolState(62));
        state534.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state95.put("BOOLEAN", new SymbolState(56));
        state80.put("DOT", new SymbolState(PRIMARY,  1));
        state131.put("SEMI", new SymbolState(LITERAL,  1));
        state49.put("LONG", new SymbolState(6));
        state591.put("IDENTIFIER", new SymbolState(477));
        state451.put("MINUS", new SymbolState(10));
        state445.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        Map<String, SymbolState> state98 = new HashMap<String, SymbolState>();
        rules.put(98, state98);
        state98.put("RBRACE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state58.put("NATIVE", new SymbolState(MODIFIER,  1));
        state313.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state256.put("CHAR", new SymbolState(BASICTYPE,  1));
        state230.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state263.put("INT", new SymbolState(MODIFIER,  1));
        state41.put("TYPE", new SymbolState(41));
        state522.put("ID", new SymbolState(MODIFIER,  1));
        state302.put("ID", new SymbolState(METHODORFIELDDECL,  3));
        state66.put("BECOMES", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state404 = new HashMap<String, SymbolState>();
        rules.put(404, state404);
        state404.put("RBRACKET", new SymbolState(478));
        state359.put("DOUBLE", new SymbolState(17));
        state377.put("N_DOT_IDENTIFIER_0", new SymbolState(479));
        state581.put("TYPE", new SymbolState(259));
        state134.put("IDENTIFIER", new SymbolState(26));
        state553.put("RBRACE", new SymbolState(INTEGERLITERAL,  1));
        state29.put("SHORT", new SymbolState(BASICTYPE,  1));
        state609.put("COMMA", new SymbolState(280));
        state471.put("BRACKETSOPT", new SymbolState(480));
        state124.put("FALSE", new SymbolState(76));
        state50.put("LITERAL", new SymbolState(465));
        state594.put("COMMA", new SymbolState(SELECTOR,  3));
        state363.put("SHORT", new SymbolState(EXPRESSION1,  1));
        state11.put("RBRACKET", new SymbolState(LITERAL,  1));
        state261.put("CHAR", new SymbolState(81));
        state109.put("DOT", new SymbolState(PAREXPRESSION,  3));
        state376.put("ID", new SymbolState(SELECTOR,  2));
        state598.put("SHORT", new SymbolState(MODIFIER,  1));
        state279.put("LBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state474.put("LBRACKET", new SymbolState(ARGUMENTS,  4));
        state186.put("DOT", new SymbolState(IDENTIFIER,  1));
        state596.put("BYTE", new SymbolState(N_SELECTOR_0,  2));
        state56.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state520.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state327.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state319 = new HashMap<String, SymbolState>();
        rules.put(319, state319);
        state319.put("RBRACE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state218.put("BOOLEAN", new SymbolState(METHODORFIELDREST,  1));
        state72.put("CHAR", new SymbolState(TYPE,  3));
        state353.put("RBRACE", new SymbolState(LITERAL,  1));
        state115.put("RPAREN", new SymbolState(EXPRESSION,  1));
        state477.put("INT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state26.put("TRUE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state351.put("LPAREN", new SymbolState(158));
        state441.put("LBRACKET", new SymbolState(LITERAL,  1));
        state185.put("PRIMARY", new SymbolState(94));
        state227.put("NULL", new SymbolState(16));
        state80.put("RPAREN", new SymbolState(PRIMARY,  1));
        state446.put("MINUS", new SymbolState(10));
        state111.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state0.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state612.put("ID", new SymbolState(186));
        state124.put("MINUS", new SymbolState(10));
        state162.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state291.put("IDENTIFIER", new SymbolState(481));
        state553.put("BOOLEAN", new SymbolState(INTEGERLITERAL,  1));
        state506.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state323.put("RPAREN", new SymbolState(ARGUMENTS,  4));
        state124.put("PLUS", new SymbolState(57));
        state65.put("DOUBLE", new SymbolState(LITERAL,  1));
        state259.put("BASICTYPE", new SymbolState(141));
        state280.put("EXCLAMATION", new SymbolState(44));
        state430.put("CHAR_LITERAL", new SymbolState(69));
        state455.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state496 = new HashMap<String, SymbolState>();
        rules.put(496, state496);
        state496.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state194.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state165.put("DOT", new SymbolState(LITERAL,  1));
        state264.put("INSTANCEOF", new SymbolState(INTEGERLITERAL,  1));
        state451.put("IDENTIFIER", new SymbolState(26));
        state278.put("EXCLAMATION", new SymbolState(44));
        state6.put("PLUS", new SymbolState(BASICTYPE,  1));
        state31.put("INTEGERLITERAL", new SymbolState(66));
        state140.put("PREFIXOP", new SymbolState(120));
        state612.put("BYTE", new SymbolState(482));
        state263.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state10.put("EXCLAMATION", new SymbolState(PREFIXOP,  1));
        state267.put("FLOAT", new SymbolState(CLASSBODYDECLARATION,  1));
        state551.put("MINUS", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state363.put("BYTE", new SymbolState(EXPRESSION1,  1));
        state311.put("PREFIXOP", new SymbolState(146));
        state539.put("CHAR_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state3.put("LBRACKET", new SymbolState(N_SELECTOR_0,  0));
        state242.put("SEMI", new SymbolState(BRACKETSOPT,  1));
        state451.put("FLOAT", new SymbolState(8));
        state176.put("CHAR", new SymbolState(MODIFIER,  1));
        state611.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state171.put("SHORT", new SymbolState(20));
        state534.put("STATIC", new SymbolState(MODIFIER,  1));
        state335.put("SEMI", new SymbolState(EXPRESSION3,  2));
        state172.put("DOT", new SymbolState(LITERAL,  1));
        state185.put("EXCLAMATION", new SymbolState(44));
        state1.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state170.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state187.put("LONG", new SymbolState(ARGUMENTS,  4));
        state466.put("SEMI", new SymbolState(IDENTIFIER,  1));
        state294.put("CHAR", new SymbolState(SELECTOR,  3));
        state171.put("BYTE", new SymbolState(1));
        state457.put("MINUS", new SymbolState(10));
        state278.put("INT", new SymbolState(78));
        state210.put("COMMA", new SymbolState(BASICTYPE,  1));
        state45.put("MINUS", new SymbolState(10));
        state81.put("MINUS", new SymbolState(BASICTYPE,  1));
        state117.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state351.put("LONG", new SymbolState(6));
        state275.put("FINAL", new SymbolState(MODIFIER,  1));
        state477.put("DOUBLE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state430.put("SHORT", new SymbolState(20));
        state334.put("SHORT", new SymbolState(203));
        state76.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state401.put("BYTE", new SymbolState(PRIMARY,  1));
        state261.put("PRIMARY", new SymbolState(163));
        state5.put("PRIMARY", new SymbolState(3));
        state283.put("DOT", new SymbolState(IDENTIFIER,  1));
        state131.put("FLOAT", new SymbolState(LITERAL,  1));
        state527.put("INT", new SymbolState(483));
        state198.put("BECOMES", new SymbolState(N_SELECTOR_0,  2));
        state49.put("PLUS", new SymbolState(57));
        state134.put("BOOLEANLITERAL", new SymbolState(131));
        state494.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state458.put("INT", new SymbolState(318));
        state1.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state65.put("RBRACE", new SymbolState(LITERAL,  1));
        state509.put("INT", new SymbolState(BASICTYPE,  1));
        state522.put("STATIC", new SymbolState(MODIFIER,  1));
        state107.put("RPAREN", new SymbolState(LITERAL,  1));
        state301.put("FALSE", new SymbolState(76));
        state435.put("EOF", new SymbolState(INTERFACEBODY,  3));
        state145.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state439.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state174.put("PAREXPRESSION", new SymbolState(42));
        state158.put("TYPE", new SymbolState(54));
        state301.put("STR_LITERAL", new SymbolState(155));
        state589.put("INT", new SymbolState(SELECTOR,  3));
        state439.put("ID", new SymbolState(MODIFIER,  1));
        state117.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state153.put("RBRACKET", new SymbolState(LITERAL,  1));
        state298.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state301.put("CHAR_LITERAL", new SymbolState(183));
        state213.put("NULL", new SymbolState(166));
        state309.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state612.put("FLOAT", new SymbolState(484));
        state108.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state136.put("SHORT", new SymbolState(20));
        state164.put("LONG", new SymbolState(BOOLEANLITERAL,  1));
        state306.put("SEMI", new SymbolState(LITERAL,  1));
        state392.put("DOT", new SymbolState(485));
        state306.put("DOT", new SymbolState(LITERAL,  1));
        state263.put("BYTE", new SymbolState(MODIFIER,  1));
        state499.put("BOOLEANLITERAL", new SymbolState(143));
        state178.put("MINUS", new SymbolState(BRACKETSOPT,  1));
        state78.put("INT", new SymbolState(BASICTYPE,  1));
        state65.put("INT", new SymbolState(LITERAL,  1));
        state611.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state587.put("STATIC", new SymbolState(MODIFIER,  1));
        state270.put("ID", new SymbolState(486));
        state254.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state174.put("DOUBLE", new SymbolState(17));
        Map<String, SymbolState> state35 = new HashMap<String, SymbolState>();
        rules.put(35, state35);
        state35.put("EOF", new SymbolState(487));
        state579.put("DECIMAL_INTEGER_LITERAL", new SymbolState(TYPE,  3));
        state174.put("EXPRESSION3", new SymbolState(488));
        state366.put("RPAREN", new SymbolState(TYPE,  1));
        state614.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state276.put("CHAR", new SymbolState(EXPRESSION2REST,  2));
        state143.put("COMMA", new SymbolState(LITERAL,  1));
        state50.put("ID", new SymbolState(51));
        state305.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state540.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state528.put("ID", new SymbolState(BASICTYPE,  1));
        state184.put("PREFIXOP", new SymbolState(99));
        state619.put("INT", new SymbolState(EXPRESSION2REST,  2));
        state464.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state161.put("IDENTIFIER", new SymbolState(489));
        state164.put("ID", new SymbolState(BOOLEANLITERAL,  1));
        state55.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state134.put("MINUS", new SymbolState(10));
        state218.put("RBRACE", new SymbolState(METHODORFIELDREST,  1));
        state121.put("PRIVATE", new SymbolState(490));
        state369.put("EXCLAMATION", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state453.put("COMMA", new SymbolState(BASICTYPE,  1));
        state54.put("LPAREN", new SymbolState(158));
        state69.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state340.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state149 = new HashMap<String, SymbolState>();
        rules.put(149, state149);
        state149.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        Map<String, SymbolState> state339 = new HashMap<String, SymbolState>();
        rules.put(339, state339);
        state339.put("RPAREN", new SymbolState(EXPRESSION2REST,  2));
        state619.put("DOUBLE", new SymbolState(EXPRESSION2REST,  2));
        state5.put("TRUE", new SymbolState(260));
        state11.put("DOT", new SymbolState(LITERAL,  1));
        state208.put("BASICTYPE", new SymbolState(491));
        state137.put("RPAREN", new SymbolState(LITERAL,  1));
        state420.put("FLOAT", new SymbolState(MODIFIER,  1));
        state451.put("CHAR", new SymbolState(81));
        Map<String, SymbolState> state103 = new HashMap<String, SymbolState>();
        rules.put(103, state103);
        state103.put("RPAREN", new SymbolState(EXPRESSION,  3));
        state251.put("CHAR", new SymbolState(81));
        state416.put("DOUBLE", new SymbolState(IDENTIFIER,  1));
        state145.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state185.put("FALSE", new SymbolState(37));
        state16.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state430.put("INTEGERLITERAL", new SymbolState(231));
        state64.put("SEMI", new SymbolState(EXPRESSION3,  2));
        state482.put("INT", new SymbolState(BASICTYPE,  1));
        state85.put("RPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state356.put("COMMA", new SymbolState(BASICTYPE,  1));
        state51.put("MINUS", new SymbolState(IDENTIFIER,  1));
        state394.put("BYTE", new SymbolState(EXPRESSION1,  1));
        state41.put("FALSE", new SymbolState(386));
        state5.put("SHORT", new SymbolState(20));
        state251.put("LITERAL", new SymbolState(289));
        state611.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state171.put("IDENTIFIER", new SymbolState(26));
        state278.put("ID", new SymbolState(51));
        state387.put("FLOAT", new SymbolState(EXPRESSION3,  2));
        state367.put("RBRACKET", new SymbolState(LITERAL,  1));
        state340.put("BYTE", new SymbolState(BASICTYPE,  1));
        state253.put("BYTE", new SymbolState(INTEGERLITERAL,  1));
        state251.put("INT", new SymbolState(78));
        state71.put("BYTE", new SymbolState(LITERAL,  1));
        state261.put("LPAREN", new SymbolState(158));
        state139.put("EXCLAMATION", new SymbolState(44));
        state136.put("LONG", new SymbolState(6));
        state124.put("CHAR", new SymbolState(81));
        state95.put("INT", new SymbolState(78));
        state27.put("EXPRESSION1", new SymbolState(90));
        state171.put("PREFIXOP", new SymbolState(185));
        state99.put("LPAREN", new SymbolState(261));
        state27.put("EXPRESSION2", new SymbolState(91));
        state234.put("BOOLEAN", new SymbolState(N_SELECTOR_0,  0));
        state494.put("SEMI", new SymbolState(BASICTYPE,  1));
        state27.put("EXPRESSION3", new SymbolState(92));
        state514.put("LONG", new SymbolState(MODIFIERS,  2));
        state69.put("LBRACKET", new SymbolState(LITERAL,  1));
        state263.put("FLOAT", new SymbolState(MODIFIER,  1));
        state37.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state4.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  2));
        state397.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state547.put("INSTANCEOF", new SymbolState(ARGUMENTS,  2));
        state284.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state430.put("FLOAT", new SymbolState(8));
        state94.put("N_SELECTOR_0", new SymbolState(492));
        state598.put("STATIC", new SymbolState(MODIFIER,  1));
        state32.put("ID", new SymbolState(125));
        state454.put("LBRACKET", new SymbolState(SELECTOR,  2));
        state26.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state359.put("BYTE", new SymbolState(1));
        state134.put("STR_LITERAL", new SymbolState(172));
        state369.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state387.put("SEMI", new SymbolState(EXPRESSION3,  2));
        state166.put("LBRACKET", new SymbolState(LITERAL,  1));
        state139.put("FLOAT", new SymbolState(8));
        state486.put("DOT", new SymbolState(IDENTIFIER,  1));
        state582.put("BRACKETSOPT", new SymbolState(493));
        state303.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state59.put("PAREXPRESSION", new SymbolState(217));
        state221.put("RBRACE", new SymbolState(SELECTOR,  3));
        state207.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state291.put("FLOAT", new SymbolState(348));
        state227.put("BASICTYPE", new SymbolState(141));
        state192.put("RPAREN", new SymbolState(LITERAL,  1));
        state365.put("BYTE", new SymbolState(BRACKETSOPT,  1));
        state162.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state510.put("BOOLEAN", new SymbolState(494));
        state610.put("DOUBLE", new SymbolState(495));
        state566.put("DOUBLE", new SymbolState(496));
        state125.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state213.put("MINUS", new SymbolState(10));
        state245.put("COMMA", new SymbolState(BASICTYPE,  1));
        state387.put("INT", new SymbolState(EXPRESSION3,  2));
        state65.put("SEMI", new SymbolState(LITERAL,  1));
        state71.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state69.put("COMMA", new SymbolState(LITERAL,  1));
        state201.put("CHAR", new SymbolState(TYPE,  3));
        state146.put("BOOLEANLITERAL", new SymbolState(325));
        state486.put("RPAREN", new SymbolState(IDENTIFIER,  1));
        state171.put("PRIMARY", new SymbolState(94));
        state228.put("LBRACE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state189.put("RPAREN", new SymbolState(INTEGERLITERAL,  1));
        state499.put("EXPRESSION", new SymbolState(497));
        Map<String, SymbolState> state452 = new HashMap<String, SymbolState>();
        rules.put(452, state452);
        state452.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state105 = new HashMap<String, SymbolState>();
        rules.put(105, state105);
        state105.put("INSTANCEOF", new SymbolState(498));
        state335.put("BOOLEAN", new SymbolState(EXPRESSION3,  2));
        state31.put("BOOLEAN", new SymbolState(56));
        state172.put("SHORT", new SymbolState(LITERAL,  1));
        state334.put("BASICTYPE", new SymbolState(286));
        state496.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state620.put("RPAREN", new SymbolState(ARGUMENTS,  2));
        state581.put("FLOAT", new SymbolState(8));
        state102.put("LPAREN", new SymbolState(499));
        state243.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state519.put("BECOMES", new SymbolState(SELECTOR,  2));
        state140.put("BASICTYPE", new SymbolState(141));
        state577.put("SYNCHRONIZED", new SymbolState(MODIFIERS,  2));
        state193.put("DOT", new SymbolState(PRIMARY,  1));
        state193.put("FLOAT", new SymbolState(PRIMARY,  1));
        state499.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state330.put("ID", new SymbolState(500));
        state445.put("NULL", new SymbolState(166));
        state276.put("BYTE", new SymbolState(EXPRESSION2REST,  2));
        state183.put("RPAREN", new SymbolState(LITERAL,  1));
        state414.put("DOT", new SymbolState(ARGUMENTS,  2));
        state594.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state191.put("BOOLEAN", new SymbolState(BOOLEANLITERAL,  1));
        state95.put("SHORT", new SymbolState(20));
        state54.put("CHAR_LITERAL", new SymbolState(183));
        state476.put("RBRACKET", new SymbolState(EXPRESSION3,  2));
        state93.put("SHORT", new SymbolState(MODIFIER,  1));
        state64.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state411.put("SHORT", new SymbolState(ARGUMENTS,  2));
        state99.put("IDENTIFIER", new SymbolState(26));
        state120.put("INTEGERLITERAL", new SymbolState(65));
        state620.put("COMMA", new SymbolState(ARGUMENTS,  2));
        state416.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state268.put("CHAR", new SymbolState(501));
        state347.put("PLUS", new SymbolState(57));
        state213.put("TYPE", new SymbolState(5));
        state102.put("RBRACE", new SymbolState(SELECTOR,  2));
        state140.put("MINUS", new SymbolState(10));
        state188.put("DOT", new SymbolState(502));
        state27.put("INT", new SymbolState(78));
        state457.put("PREFIXOP", new SymbolState(139));
        state278.put("STR_LITERAL", new SymbolState(170));
        state291.put("METHODORFIELDDECL", new SymbolState(447));
        state162.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state294.put("LONG", new SymbolState(SELECTOR,  3));
        state224.put("ID", new SymbolState(PRIMARY,  1));
        state403.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state527.put("FLOAT", new SymbolState(503));
        state124.put("INTEGERLITERAL", new SymbolState(66));
        state490.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state290.put("N_LBRACKET_RBRACKET_0", new SymbolState(504));
        state99.put("LONG", new SymbolState(6));
        state140.put("EXCLAMATION", new SymbolState(44));
        state234.put("FLOAT", new SymbolState(N_SELECTOR_0,  0));
        state129.put("SEMI", new SymbolState(TYPE,  1));
        state359.put("INTEGERLITERAL", new SymbolState(65));
        state450.put("ARGUMENTS", new SymbolState(505));
        state182.put("MINUS", new SymbolState(10));
        state278.put("DOUBLE", new SymbolState(17));
        state430.put("ID", new SymbolState(51));
        Map<String, SymbolState> state148 = new HashMap<String, SymbolState>();
        rules.put(148, state148);
        state148.put("RBRACKET", new SymbolState(506));
        state5.put("FLOAT", new SymbolState(8));
        state383.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state45.put("CHAR_LITERAL", new SymbolState(69));
        state81.put("ID", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state233 = new HashMap<String, SymbolState>();
        rules.put(233, state233);
        state233.put("RBRACKET", new SymbolState(507));
        state398.put("BOOLEAN", new SymbolState(CLASSBODYDECLARATION,  2));
        state1.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state13.put("SHORT", new SymbolState(EXPRESSION2,  2));
        state162.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state319.put("SEMI", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state182.put("EXPRESSION", new SymbolState(508));
        state14.put("STR_LITERAL", new SymbolState(155));
        state549.put("IMPLEMENTS", new SymbolState(IDENTIFIER,  1));
        state72.put("SHORT", new SymbolState(TYPE,  3));
        state556.put("COMMA", new SymbolState(BASICTYPE,  1));
        state45.put("BYTE", new SymbolState(1));
        state28.put("EOF", new SymbolState(TYPEDECLARATION,  1));
        state578.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state107.put("BECOMES", new SymbolState(LITERAL,  1));
        state139.put("IDENTIFIER", new SymbolState(26));
        state164.put("DOUBLE", new SymbolState(BOOLEANLITERAL,  1));
        state171.put("STR_LITERAL", new SymbolState(170));
        state108.put("CHAR", new SymbolState(BOOLEANLITERAL,  1));
        state139.put("SHORT", new SymbolState(20));
        state311.put("LONG", new SymbolState(6));
        state139.put("BASICTYPE", new SymbolState(141));
        state393.put("FLOAT", new SymbolState(EXPRESSION2,  1));
        state26.put("LONG", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state534.put("NATIVE", new SymbolState(MODIFIER,  1));
        state108.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state417.put("RBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state351.put("TYPE", new SymbolState(54));
        state374.put("TYPE", new SymbolState(259));
        state325.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state545.put("BECOMES", new SymbolState(PAREXPRESSION,  3));
        state413.put("CLASS", new SymbolState(CLASSDECLARATION,  5));
        state261.put("PLUS", new SymbolState(57));
        state595.put("LBRACKET", new SymbolState(PAREXPRESSION,  3));
        state500.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state612.put("DOUBLE", new SymbolState(509));
        state447.put("BYTE", new SymbolState(MEMBERDECL,  1));
        state393.put("INSTANCEOF", new SymbolState(510));
        state95.put("FLOAT", new SymbolState(8));
        state325.put("LBRACKET", new SymbolState(LITERAL,  1));
        state439.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state31.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        state9.put("COMMA", new SymbolState(BASICTYPE,  1));
        state137.put("DOT", new SymbolState(LITERAL,  1));
        state58.put("STATIC", new SymbolState(MODIFIER,  1));
        state566.put("BYTE", new SymbolState(511));
        state323.put("COMMA", new SymbolState(ARGUMENTS,  4));
        state439.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state134.put("CHAR_LITERAL", new SymbolState(38));
        state143.put("DOT", new SymbolState(LITERAL,  1));
        state31.put("CHAR_LITERAL", new SymbolState(183));
        state30.put("BASICTYPE", new SymbolState(141));
        state522.put("INT", new SymbolState(MODIFIER,  1));
        state5.put("EXCLAMATION", new SymbolState(44));
        state515.put("LONG", new SymbolState(N_SELECTOR_0,  2));
        state528.put("INT", new SymbolState(BASICTYPE,  1));
        state446.put("BYTE", new SymbolState(1));
        state326.put("SEMI", new SymbolState(512));
        state430.put("STR_LITERAL", new SymbolState(170));
        state136.put("IDENTIFIER", new SymbolState(26));
        state594.put("DOT", new SymbolState(SELECTOR,  3));
        state46.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state534.put("LONG", new SymbolState(MODIFIER,  1));
        state506.put("INT", new SymbolState(SELECTOR,  3));
        state31.put("MINUS", new SymbolState(10));
        state195.put("SEMI", new SymbolState(EXPRESSION2,  2));
        Map<String, SymbolState> state424 = new HashMap<String, SymbolState>();
        rules.put(424, state424);
        state424.put("RBRACKET", new SymbolState(513));
        state234.put("SHORT", new SymbolState(N_SELECTOR_0,  0));
        state552.put("BYTE", new SymbolState(VARIABLEDECLARATORREST,  1));
        state182.put("IDENTIFIER", new SymbolState(26));
        state448.put("RBRACE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state579.put("SHORT", new SymbolState(TYPE,  3));
        state374.put("INT", new SymbolState(78));
        state416.put("INT", new SymbolState(IDENTIFIER,  1));
        state492.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state86.put("MODIFIER", new SymbolState(514));
        state204.put("DOT", new SymbolState(PRIMARY,  1));
        state171.put("FLOAT", new SymbolState(8));
        state171.put("EXCLAMATION", new SymbolState(44));
        state521.put("TYPEDECLARATION", new SymbolState(388));
        state514.put("PUBLIC", new SymbolState(MODIFIERS,  2));
        state535.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state272.put("SELECTOR", new SymbolState(515));
        state178.put("BOOLEAN", new SymbolState(BRACKETSOPT,  1));
        state49.put("EXPRESSION", new SymbolState(516));
        state280.put("BOOLEANLITERAL", new SymbolState(143));
        state456.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state167.put("N_SELECTOR_0", new SymbolState(517));
        state566.put("ID", new SymbolState(345));
        state354.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state399.put("BECOMES", new SymbolState(SELECTOR,  3));
        state616.put("LBRACKET", new SymbolState(ARGUMENTS,  2));
        state416.put("BYTE", new SymbolState(IDENTIFIER,  1));
        state408.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state357.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state420.put("BYTE", new SymbolState(MODIFIER,  1));
        state359.put("LITERAL", new SymbolState(401));
        state253.put("SHORT", new SymbolState(INTEGERLITERAL,  1));
        state171.put("LPAREN", new SymbolState(14));
        state428.put("DOT", new SymbolState(N_SELECTOR_0,  2));
        state383.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state563.put("BOOLEAN", new SymbolState(VARIABLEDECLARATORREST,  3));
        state434.put("ID", new SymbolState(518));
        state618.put("IDENTIFIER", new SymbolState(519));
        state291.put("SHORT", new SymbolState(436));
        state7.put("RPAREN", new SymbolState(ARGUMENTS,  2));
        state577.put("PROTECTED", new SymbolState(MODIFIERS,  2));
        state512.put("CLASS", new SymbolState(IMPORTDECLARATION,  4));
        state50.put("DOUBLE", new SymbolState(17));
        state363.put("INT", new SymbolState(EXPRESSION1,  1));
        state347.put("LPAREN", new SymbolState(14));
        state337.put("EOF", new SymbolState(CLASSDECLARATION,  3));
        state30.put("BOOLEAN", new SymbolState(56));
        state604.put("DOUBLE", new SymbolState(ARGUMENTS,  4));
        state41.put("LITERAL", new SymbolState(438));
        state95.put("DOUBLE", new SymbolState(17));
        state51.put("FALSE", new SymbolState(IDENTIFIER,  1));
        state32.put("SHORT", new SymbolState(203));
        state224.put("SHORT", new SymbolState(PRIMARY,  1));
        state552.put("RBRACE", new SymbolState(VARIABLEDECLARATORREST,  1));
        state520.put("INT", new SymbolState(BASICTYPE,  1));
        state612.put("BOOLEAN", new SymbolState(520));
        state539.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state523.put("N_TYPEDECLARATION_0", new SymbolState(521));
        state57.put("TRUE", new SymbolState(PREFIXOP,  1));
        state303.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state353.put("ID", new SymbolState(LITERAL,  1));
        state71.put("LBRACKET", new SymbolState(LITERAL,  1));
        state447.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        state56.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state301.put("PREFIXOP", new SymbolState(124));
        state184.put("BASICTYPE", new SymbolState(141));
        state527.put("ID", new SymbolState(338));
        state499.put("PREFIXOP", new SymbolState(185));
        state248.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state136.put("TRUE", new SymbolState(260));
        state186.put("BOOLEAN", new SymbolState(IDENTIFIER,  1));
        state446.put("PRIMARY", new SymbolState(3));
        state237.put("INT", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state139.put("INT", new SymbolState(78));
        state174.put("CHAR", new SymbolState(81));
        state30.put("BOOLEANLITERAL", new SymbolState(175));
        state33.put("RPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state140.put("LITERAL", new SymbolState(401));
        state86.put("PUBLIC", new SymbolState(522));
        state8.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state120.put("IDENTIFIER", new SymbolState(26));
        state164.put("RBRACE", new SymbolState(BOOLEANLITERAL,  1));
        state78.put("SHORT", new SymbolState(BASICTYPE,  1));
        state259.put("ID", new SymbolState(51));
        state49.put("BOOLEANLITERAL", new SymbolState(39));
        state259.put("DOUBLE", new SymbolState(17));
        Map<String, SymbolState> state495 = new HashMap<String, SymbolState>();
        rules.put(495, state495);
        state495.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state120.put("CHAR", new SymbolState(81));
        state307.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state0.put("N_IMPORTDECLARATION_0", new SymbolState(523));
        state126.put("CHAR", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state49.put("TYPE", new SymbolState(5));
        state6.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state215.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state81.put("PLUS", new SymbolState(BASICTYPE,  1));
        state457.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        state378.put("LBRACKET", new SymbolState(ARGUMENTS,  4));
        state85.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        Map<String, SymbolState> state128 = new HashMap<String, SymbolState>();
        rules.put(128, state128);
        state128.put("COMMA", new SymbolState(EXPRESSION2REST,  2));
        state612.put("BASICTYPE", new SymbolState(524));
        state313.put("RBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state2.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state365.put("INT", new SymbolState(BRACKETSOPT,  1));
        state184.put("MINUS", new SymbolState(10));
        state322.put("IDENTIFIER", new SymbolState(525));
        state416.put("LPAREN", new SymbolState(IDENTIFIER,  1));
        state234.put("INT", new SymbolState(N_SELECTOR_0,  0));
        state150.put("ID", new SymbolState(IDENTIFIER,  1));
        state446.put("NULL", new SymbolState(166));
        state59.put("LPAREN", new SymbolState(351));
        state498.put("CHAR", new SymbolState(526));
        state580.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state23.put("CHAR", new SymbolState(BOOLEANLITERAL,  1));
        state406.put("BECOMES", new SymbolState(PAREXPRESSION,  3));
        state574.put("INSTANCEOF", new SymbolState(527));
        Map<String, SymbolState> state217 = new HashMap<String, SymbolState>();
        rules.put(217, state217);
        state217.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state134.put("SHORT", new SymbolState(20));
        state5.put("INT", new SymbolState(78));
        state298.put("NATIVE", new SymbolState(MODIFIER,  1));
        state251.put("ID", new SymbolState(51));
        state199.put("DOT", new SymbolState(IDENTIFIER,  1));
        state5.put("INTEGERLITERAL", new SymbolState(153));
        state401.put("FLOAT", new SymbolState(PRIMARY,  1));
        state251.put("DOUBLE", new SymbolState(17));
        state59.put("STR_LITERAL", new SymbolState(273));
        state510.put("SHORT", new SymbolState(528));
        state380.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  3));
        state561.put("RPAREN", new SymbolState(EXPRESSION2REST,  2));
        state266.put("DOT", new SymbolState(LITERAL,  1));
        state41.put("DOUBLE", new SymbolState(17));
        state268.put("LONG", new SymbolState(529));
        state120.put("NULL", new SymbolState(353));
        state221.put("DOT", new SymbolState(SELECTOR,  3));
        state147.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state38.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state397.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state598.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state224.put("INT", new SymbolState(PRIMARY,  1));
        state445.put("STR_LITERAL", new SymbolState(214));
        Map<String, SymbolState> state320 = new HashMap<String, SymbolState>();
        rules.put(320, state320);
        state320.put("RBRACKET", new SymbolState(TYPE,  3));
        state154.put("ID", new SymbolState(407));
        state435.put("INTERFACE", new SymbolState(INTERFACEBODY,  3));
        state333.put("SEMI", new SymbolState(BASICTYPE,  1));
        state605.put("LONG", new SymbolState(530));
        state255.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state593.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state311.put("MINUS", new SymbolState(10));
        state459.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state27.put("TRUE", new SymbolState(260));
        state378.put("DOT", new SymbolState(ARGUMENTS,  4));
        state187.put("DOT", new SymbolState(ARGUMENTS,  4));
        state335.put("SHORT", new SymbolState(EXPRESSION3,  2));
        state595.put("ID", new SymbolState(PAREXPRESSION,  3));
        state520.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state623.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state383.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state376.put("CHAR", new SymbolState(SELECTOR,  2));
        state129.put("LONG", new SymbolState(TYPE,  1));
        state251.put("PAREXPRESSION", new SymbolState(217));
        state69.put("BECOMES", new SymbolState(LITERAL,  1));
        state37.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state191.put("FLOAT", new SymbolState(BOOLEANLITERAL,  1));
        state178.put("STR_LITERAL", new SymbolState(BRACKETSOPT,  1));
        state240.put("LBRACE", new SymbolState(252));
        state588.put("ID", new SymbolState(ARGUMENTS,  2));
        state15.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state170.put("DOT", new SymbolState(LITERAL,  1));
        state30.put("INTEGERLITERAL", new SymbolState(66));
        state588.put("BOOLEAN", new SymbolState(ARGUMENTS,  2));
        state17.put("BYTE", new SymbolState(BASICTYPE,  1));
        state570.put("RPAREN", new SymbolState(EXPRESSION2,  2));
        state193.put("DOUBLE", new SymbolState(PRIMARY,  1));
        state351.put("DOUBLE", new SymbolState(17));
        state321.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state59.put("TRUE", new SymbolState(36));
        state20.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state17.put("CHAR", new SymbolState(BASICTYPE,  1));
        state194.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state477.put("BYTE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state101.put("COMMA", new SymbolState(BRACKETSOPT,  1));
        state204.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state30.put("EXCLAMATION", new SymbolState(44));
        state604.put("DOT", new SymbolState(ARGUMENTS,  4));
        state377.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state389.put("DOT", new SymbolState(531));
        state78.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state610.put("TYPE", new SymbolState(532));
        state237.put("FLOAT", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state176.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state302.put("CHAR", new SymbolState(METHODORFIELDDECL,  3));
        state178.put("CHAR", new SymbolState(BRACKETSOPT,  1));
        state300.put("INT", new SymbolState(BASICTYPE,  1));
        state57.put("SHORT", new SymbolState(PREFIXOP,  1));
        state99.put("CHAR_LITERAL", new SymbolState(165));
        state14.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        state174.put("IDENTIFIER", new SymbolState(26));
        state171.put("PAREXPRESSION", new SymbolState(223));
        state369.put("MINUS", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state63.put("DOT", new SymbolState(IDENTIFIER,  1));
        state234.put("BECOMES", new SymbolState(N_SELECTOR_0,  0));
        state271.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state267.put("BOOLEAN", new SymbolState(CLASSBODYDECLARATION,  1));
        state598.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state525.put("INSTANCEOF", new SymbolState(SELECTOR,  2));
        state75.put("RBRACE", new SymbolState(LITERAL,  1));
        state30.put("DOUBLE", new SymbolState(17));
        state383.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state14.put("BYTE", new SymbolState(1));
        state498.put("LONG", new SymbolState(533));
        state581.put("PREFIXOP", new SymbolState(185));
        state328.put("RPAREN", new SymbolState(TYPE,  3));
        state14.put("TYPE", new SymbolState(54));
        state413.put("SEMI", new SymbolState(CLASSDECLARATION,  5));
        state50.put("BOOLEAN", new SymbolState(56));
        state149.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state173.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state301.put("CHAR", new SymbolState(81));
        state551.put("CHAR", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state120.put("PAREXPRESSION", new SymbolState(224));
        state545.put("DOT", new SymbolState(PAREXPRESSION,  3));
        state271.put("BECOMES", new SymbolState(PRIMARY,  1));
        state31.put("IDENTIFIER", new SymbolState(26));
        state86.put("ID", new SymbolState(150));
        state464.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state347.put("CHAR_LITERAL", new SymbolState(69));
        state81.put("LONG", new SymbolState(BASICTYPE,  1));
        state182.put("PRIMARY", new SymbolState(3));
        state0.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state554.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state180.put("COMMA", new SymbolState(LITERAL,  1));
        state334.put("BYTE", new SymbolState(152));
        state168.put("DOT", new SymbolState(SELECTOR,  2));
        state59.put("EXCLAMATION", new SymbolState(44));
        state187.put("LBRACKET", new SymbolState(ARGUMENTS,  4));
        state186.put("SHORT", new SymbolState(IDENTIFIER,  1));
        state458.put("BASICTYPE", new SymbolState(286));
        state562.put("RBRACE", new SymbolState(N_SELECTOR_0,  0));
        state86.put("VOLATILE", new SymbolState(534));
        state587.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state311.put("BOOLEAN", new SymbolState(56));
        state605.put("INT", new SymbolState(535));
        state477.put("ID", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state234.put("DOT", new SymbolState(N_SELECTOR_0,  0));
        state278.put("LITERAL", new SymbolState(204));
        state107.put("COMMA", new SymbolState(LITERAL,  1));
        state82.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state41.put("DECIMAL_INTEGER_LITERAL", new SymbolState(169));
        state627.put("RPAREN", new SymbolState(BRACKETSOPT,  1));
        state49.put("CHAR", new SymbolState(81));
        state127.put("COMMA", new SymbolState(INTEGERLITERAL,  1));
        state278.put("TRUE", new SymbolState(73));
        state295.put("LONG", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state351.put("EXPRESSION1", new SymbolState(115));
        state168.put("COMMA", new SymbolState(SELECTOR,  2));
        state178.put("FLOAT", new SymbolState(BRACKETSOPT,  1));
        state351.put("EXPRESSION2", new SymbolState(113));
        state539.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state351.put("EXPRESSION3", new SymbolState(114));
        state30.put("PLUS", new SymbolState(57));
        state428.put("LBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state19.put("ID", new SymbolState(MEMBERDECL,  1));
        state518.put("RBRACKET", new SymbolState(IDENTIFIER,  1));
        state369.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state158.put("PLUS", new SymbolState(57));
        state174.put("NULL", new SymbolState(306));
        state598.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state176.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state317.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state65.put("CHAR", new SymbolState(LITERAL,  1));
        state29.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state419.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state589.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state376.put("SEMI", new SymbolState(SELECTOR,  2));
        state461.put("ID", new SymbolState(536));
        state538.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state128.put("RPAREN", new SymbolState(EXPRESSION2REST,  2));
        state504.put("LBRACKET", new SymbolState(537));
        state316.put("BECOMES", new SymbolState(PAREXPRESSION,  3));
        state283.put("LPAREN", new SymbolState(IDENTIFIER,  1));
        state51.put("DECIMAL_INTEGER_LITERAL", new SymbolState(IDENTIFIER,  1));
        state156.put("RPAREN", new SymbolState(LITERAL,  1));
        state550.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  2));
        state524.put("RBRACE", new SymbolState(TYPE,  1));
        state41.put("INTEGERLITERAL", new SymbolState(367));
        state64.put("FLOAT", new SymbolState(EXPRESSION3,  2));
        state303.put("SEMI", new SymbolState(BASICTYPE,  1));
        state139.put("PAREXPRESSION", new SymbolState(100));
        state431.put("RPAREN", new SymbolState(PAREXPRESSION,  3));
        state445.put("LITERAL", new SymbolState(74));
        state363.put("DOUBLE", new SymbolState(EXPRESSION1,  1));
        state563.put("DOUBLE", new SymbolState(VARIABLEDECLARATORREST,  3));
        state579.put("EXCLAMATION", new SymbolState(TYPE,  3));
        state124.put("SHORT", new SymbolState(20));
        state311.put("BASICTYPE", new SymbolState(141));
        state142.put("COMMA", new SymbolState(SELECTOR,  3));
        state252.put("SHORT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state451.put("STR_LITERAL", new SymbolState(172));
        state334.put("FLOAT", new SymbolState(245));
        state14.put("SHORT", new SymbolState(20));
        state605.put("DOUBLE", new SymbolState(538));
        state26.put("N_DOT_IDENTIFIER_0", new SymbolState(539));
        state401.put("RBRACE", new SymbolState(PRIMARY,  1));
        state251.put("IDENTIFIER", new SymbolState(26));
        state437.put("INSTANCEOF", new SymbolState(IDENTIFIER,  1));
        state221.put("SHORT", new SymbolState(SELECTOR,  3));
        state279.put("INSTANCEOF", new SymbolState(INTEGERLITERAL,  1));
        state99.put("EXCLAMATION", new SymbolState(44));
        state14.put("FALSE", new SymbolState(76));
        state499.put("IDENTIFIER", new SymbolState(26));
        state208.put("FLOAT", new SymbolState(540));
        state374.put("ID", new SymbolState(51));
        state278.put("PREFIXOP", new SymbolState(185));
        state7.put("BECOMES", new SymbolState(ARGUMENTS,  2));
        state120.put("LPAREN", new SymbolState(31));
        state551.put("STR_LITERAL", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state347.put("INTEGERLITERAL", new SymbolState(231));
        state551.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state117.put("BECOMES", new SymbolState(SELECTOR,  3));
        state347.put("FLOAT", new SymbolState(8));
        state576.put("RPAREN", new SymbolState(PAREXPRESSION,  3));
        state197.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state353.put("SEMI", new SymbolState(LITERAL,  1));
        state22.put("LBRACKET", new SymbolState(541));
        state197.put("BRACKETSOPT", new SymbolState(542));
        state227.put("LONG", new SymbolState(6));
        state267.put("SHORT", new SymbolState(CLASSBODYDECLARATION,  1));
        state536.put("INSTANCEOF", new SymbolState(IDENTIFIER,  1));
        state333.put("CHAR", new SymbolState(BASICTYPE,  1));
        state65.put("ID", new SymbolState(LITERAL,  1));
        state299.put("SEMI", new SymbolState(QUALIFIEDIDENTIFIER,  2));
        state551.put("FLOAT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state408.put("CHAR", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state338.put("DOT", new SymbolState(IDENTIFIER,  1));
        state577.put("CLASS", new SymbolState(MODIFIERS,  2));
        state193.put("BOOLEAN", new SymbolState(PRIMARY,  1));
        state253.put("RBRACE", new SymbolState(INTEGERLITERAL,  1));
        state127.put("LBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state587.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state160.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state387.put("BOOLEAN", new SymbolState(EXPRESSION3,  2));
        state173.put("BECOMES", new SymbolState(SELECTOR,  3));
        state555.put("CLASS", new SymbolState(INTERFACEDECLARATION,  5));
        state256.put("LONG", new SymbolState(BASICTYPE,  1));
        state351.put("EXCLAMATION", new SymbolState(44));
        state93.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state617.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state334.put("BOOLEAN", new SymbolState(53));
        state542.put("RPAREN", new SymbolState(TYPE,  3));
        state531.put("IDENTIFIER", new SymbolState(543));
        state251.put("TYPE", new SymbolState(59));
        state73.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state408.put("BYTE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state75.put("LBRACKET", new SymbolState(LITERAL,  1));
        state227.put("INTEGERLITERAL", new SymbolState(66));
        state170.put("BECOMES", new SymbolState(LITERAL,  1));
        state417.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state227.put("CHAR", new SymbolState(81));
        state27.put("INTEGERLITERAL", new SymbolState(153));
        state46.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state362.put("SHORT", new SymbolState(EXPRESSION2,  1));
        state221.put("LONG", new SymbolState(SELECTOR,  3));
        state445.put("BASICTYPE", new SymbolState(141));
        state109.put("SHORT", new SymbolState(PAREXPRESSION,  3));
        state6.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state123.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state230.put("CHAR", new SymbolState(EXPRESSION3,  2));
        state95.put("PRIMARY", new SymbolState(167));
        state86.put("INT", new SymbolState(544));
        state164.put("SHORT", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state232 = new HashMap<String, SymbolState>();
        rules.put(232, state232);
        state232.put("RPAREN", new SymbolState(545));
        state118.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state458.put("DOUBLE", new SymbolState(265));
        state340.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state48 = new HashMap<String, SymbolState>();
        rules.put(48, state48);
        state48.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state411.put("DOUBLE", new SymbolState(ARGUMENTS,  2));
        state505.put("BECOMES", new SymbolState(SELECTOR,  3));
        state534.put("STRICTFP", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state391 = new HashMap<String, SymbolState>();
        rules.put(391, state391);
        state391.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state519.put("RPAREN", new SymbolState(SELECTOR,  2));
        state610.put("FLOAT", new SymbolState(546));
        state120.put("FLOAT", new SymbolState(8));
        state374.put("RPAREN", new SymbolState(547));
        state411.put("BOOLEAN", new SymbolState(ARGUMENTS,  2));
        state581.put("LONG", new SymbolState(6));
        Map<String, SymbolState> state157 = new HashMap<String, SymbolState>();
        rules.put(157, state157);
        state157.put("RBRACKET", new SymbolState(TYPE,  1));
        state227.put("EXPRESSION", new SymbolState(548));
        state139.put("FALSE", new SymbolState(21));
        state115.put("BECOMES", new SymbolState(237));
        state520.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state100.put("RBRACKET", new SymbolState(PRIMARY,  1));
        state102.put("INSTANCEOF", new SymbolState(SELECTOR,  2));
        state365.put("SEMI", new SymbolState(BRACKETSOPT,  1));
        state40.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state473.put("ID", new SymbolState(346));
        state146.put("IDENTIFIER", new SymbolState(26));
        state75.put("CHAR", new SymbolState(LITERAL,  1));
        state122.put("COMMA", new SymbolState(SELECTOR,  3));
        state178.put("ID", new SymbolState(BRACKETSOPT,  1));
        Map<String, SymbolState> state77 = new HashMap<String, SymbolState>();
        rules.put(77, state77);
        state77.put("ID", new SymbolState(549));
        Map<String, SymbolState> state285 = new HashMap<String, SymbolState>();
        rules.put(285, state285);
        state285.put("RPAREN", new SymbolState(EXPRESSION2,  2));
        state397.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state374.put("PAREXPRESSION", new SymbolState(223));
        state227.put("STR_LITERAL", new SymbolState(155));
        state231.put("BECOMES", new SymbolState(LITERAL,  1));
        state578.put("SELECTOR", new SymbolState(550));
        state445.put("BYTE", new SymbolState(1));
        state417.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state514.put("PROTECTED", new SymbolState(MODIFIERS,  2));
        state315.put("RBRACKET", new SymbolState(EXPRESSION3,  2));
        state171.put("LITERAL", new SymbolState(204));
        state447.put("SEMI", new SymbolState(MEMBERDECL,  1));
        state25.put("IDENTIFIER", new SymbolState(551));
        state301.put("BOOLEAN", new SymbolState(56));
        state405.put("FLOAT", new SymbolState(VARIABLEINITIALIZER,  1));
        state50.put("PLUS", new SymbolState(57));
        state551.put("FALSE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state488.put("DOUBLE", new SymbolState(EXPRESSION3,  2));
        state15.put("NATIVE", new SymbolState(MODIFIER,  1));
        state301.put("DOUBLE", new SymbolState(17));
        state374.put("FLOAT", new SymbolState(8));
        state439.put("SEMI", new SymbolState(MODIFIER,  1));
        state598.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state41.put("PAREXPRESSION", new SymbolState(138));
        state30.put("CHAR_LITERAL", new SymbolState(183));
        state467.put("RBRACKET", new SymbolState(EXPRESSION3,  2));
        state600.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state230.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state351.put("LITERAL", new SymbolState(83));
        state244.put("BRACKETSOPT", new SymbolState(552));
        state545.put("RBRACKET", new SymbolState(PAREXPRESSION,  3));
        state578.put("RBRACKET", new SymbolState(EXPRESSION3,  2));
        state479.put("RBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state202.put("EOF", new SymbolState(INTERFACEDECLARATION,  3));
        state218.put("CHAR", new SymbolState(METHODORFIELDREST,  1));
        state451.put("DECIMAL_INTEGER_LITERAL", new SymbolState(553));
        state248.put("FINAL", new SymbolState(MODIFIER,  1));
        state12.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state350.put("IMPORT", new SymbolState(292));
        state95.put("ID", new SymbolState(51));
        state120.put("EXCLAMATION", new SymbolState(44));
        state455.put("SEMI", new SymbolState(BASICTYPE,  1));
        state59.put("NULL", new SymbolState(119));
        state75.put("SEMI", new SymbolState(LITERAL,  1));
        state397.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state489.put("ARGUMENTS", new SymbolState(554));
        state182.put("PREFIXOP", new SymbolState(139));
        state157.put("BECOMES", new SymbolState(TYPE,  1));
        state301.put("LONG", new SymbolState(6));
        state120.put("FALSE", new SymbolState(23));
        state514.put("BOOLEAN", new SymbolState(MODIFIERS,  2));
        state347.put("BASICTYPE", new SymbolState(141));
        state254.put("COMMA", new SymbolState(BOOLEANLITERAL,  1));
        state414.put("LBRACKET", new SymbolState(ARGUMENTS,  2));
        state100.put("BECOMES", new SymbolState(PRIMARY,  1));
        state464.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state375.put("INTERFACEBODY", new SymbolState(555));
        state499.put("NULL", new SymbolState(107));
        state589.put("DOUBLE", new SymbolState(SELECTOR,  3));
        state401.put("CHAR", new SymbolState(PRIMARY,  1));
        state129.put("BYTE", new SymbolState(TYPE,  1));
        state158.put("ID", new SymbolState(51));
        state342.put("COMMA", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state275.put("CHAR", new SymbolState(MODIFIER,  1));
        state353.put("LBRACKET", new SymbolState(LITERAL,  1));
        state195.put("CHAR", new SymbolState(EXPRESSION2,  2));
        state498.put("DOUBLE", new SymbolState(556));
        state58.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state248.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state32.put("DOUBLE", new SymbolState(265));
        state29.put("INT", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state296 = new HashMap<String, SymbolState>();
        rules.put(296, state296);
        state296.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state17.put("ID", new SymbolState(BASICTYPE,  1));
        state303.put("SHORT", new SymbolState(BASICTYPE,  1));
        state309.put("DOUBLE", new SymbolState(LITERAL,  1));
        state598.put("NATIVE", new SymbolState(MODIFIER,  1));
        state389.put("BRACKETSOPT", new SymbolState(557));
        state551.put("LPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state176.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state237.put("BYTE", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state172.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state185.put("PAREXPRESSION", new SymbolState(223));
        state31.put("PAREXPRESSION", new SymbolState(271));
        state124.put("TYPE", new SymbolState(54));
        state604.put("CHAR", new SymbolState(ARGUMENTS,  4));
        state14.put("CHAR_LITERAL", new SymbolState(183));
        state499.put("INT", new SymbolState(78));
        state141.put("DOUBLE", new SymbolState(TYPE,  1));
        state217.put("LBRACKET", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state110 = new HashMap<String, SymbolState>();
        rules.put(110, state110);
        state110.put("RPAREN", new SymbolState(EXPRESSION2,  2));
        state109.put("SEMI", new SymbolState(PAREXPRESSION,  3));
        state126.put("ID", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state506.put("FLOAT", new SymbolState(SELECTOR,  3));
        state279.put("DOT", new SymbolState(INTEGERLITERAL,  1));
        state191.put("RBRACE", new SymbolState(BOOLEANLITERAL,  1));
        state116.put("EOF", new SymbolState(TYPEDECLARATION,  1));
        state555.put("INTERFACE", new SymbolState(INTERFACEDECLARATION,  5));
        state56.put("PLUS", new SymbolState(BASICTYPE,  1));
        state582.put("N_LBRACKET_RBRACKET_0", new SymbolState(558));
        state535.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state420.put("NATIVE", new SymbolState(MODIFIER,  1));
        state213.put("IDENTIFIER", new SymbolState(26));
        state230.put("ID", new SymbolState(EXPRESSION3,  2));
        state261.put("STR_LITERAL", new SymbolState(155));
        state134.put("DECIMAL_INTEGER_LITERAL", new SymbolState(553));
        state213.put("PAREXPRESSION", new SymbolState(100));
        state136.put("BASICTYPE", new SymbolState(141));
        state27.put("BYTE", new SymbolState(1));
        state458.put("BOOLEAN", new SymbolState(53));
        state515.put("SHORT", new SymbolState(N_SELECTOR_0,  2));
        state479.put("BRACKETSOPT", new SymbolState(559));
        state58.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state457.put("INT", new SymbolState(78));
        state446.put("BOOLEANLITERAL", new SymbolState(39));
        state351.put("TRUE", new SymbolState(12));
        state451.put("INT", new SymbolState(78));
        Map<String, SymbolState> state324 = new HashMap<String, SymbolState>();
        rules.put(324, state324);
        state324.put("DOT", new SymbolState(ARGUMENTS,  4));
        state598.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state263.put("STATIC", new SymbolState(MODIFIER,  1));
        state4.put("DOT", new SymbolState(N_SELECTOR_0,  2));
        state499.put("PRIMARY", new SymbolState(94));
        state169.put("LBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state579.put("NULL", new SymbolState(TYPE,  3));
        state311.put("STR_LITERAL", new SymbolState(441));
        state5.put("LPAREN", new SymbolState(30));
        state301.put("EXPRESSION", new SymbolState(560));
        state350.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  0));
        state176.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state619.put("CHAR", new SymbolState(EXPRESSION2REST,  2));
        state605.put("TYPE", new SymbolState(561));
        state325.put("RPAREN", new SymbolState(LITERAL,  1));
        state134.put("PRIMARY", new SymbolState(562));
        state394.put("SHORT", new SymbolState(EXPRESSION1,  1));
        state202.put("INTERFACE", new SymbolState(INTERFACEDECLARATION,  3));
        state227.put("PREFIXOP", new SymbolState(124));
        state6.put("TRUE", new SymbolState(BASICTYPE,  1));
        state291.put("INT", new SymbolState(544));
        state210.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state242.put("DOUBLE", new SymbolState(BRACKETSOPT,  1));
        state392.put("COMMA", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state514.put("FINAL", new SymbolState(MODIFIERS,  2));
        state58.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state65.put("FLOAT", new SymbolState(LITERAL,  1));
        state289.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state102.put("DOUBLE", new SymbolState(SELECTOR,  2));
        state438.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state354.put("COMMA", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state125.put("DOT", new SymbolState(IDENTIFIER,  1));
        state140.put("VARIABLEINITIALIZER", new SymbolState(563));
        state59.put("BOOLEAN", new SymbolState(56));
        state108.put("FLOAT", new SymbolState(BOOLEANLITERAL,  1));
        state268.put("BOOLEAN", new SymbolState(564));
        state571.put("LBRACE", new SymbolState(252));
        state162.put("RBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state613.put("CHAR", new SymbolState(BASICTYPE,  1));
        state403.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state134.put("PLUS", new SymbolState(57));
        state393.put("BOOLEAN", new SymbolState(EXPRESSION2,  1));
        state160.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state347.put("PAREXPRESSION", new SymbolState(223));
        state581.put("LPAREN", new SymbolState(14));
        state494.put("LONG", new SymbolState(BASICTYPE,  1));
        state430.put("MINUS", new SymbolState(10));
        state363.put("BOOLEAN", new SymbolState(EXPRESSION1,  1));
        state26.put("FALSE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state50.put("LONG", new SymbolState(6));
        state393.put("BECOMES", new SymbolState(EXPRESSION2,  1));
        state417.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state208.put("LONG", new SymbolState(565));
        state92.put("INSTANCEOF", new SymbolState(566));
        state613.put("SHORT", new SymbolState(BASICTYPE,  1));
        state365.put("FLOAT", new SymbolState(BRACKETSOPT,  1));
        state581.put("INTEGERLITERAL", new SymbolState(231));
        state391.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state443.put("RBRACKET", new SymbolState(EXPRESSION3,  2));
        state446.put("PREFIXOP", new SymbolState(139));
        state96.put("LBRACE", new SymbolState(TYPELIST,  2));
        state120.put("TYPE", new SymbolState(359));
        state158.put("EXPRESSION", new SymbolState(567));
        state588.put("INSTANCEOF", new SymbolState(ARGUMENTS,  2));
        state23.put("ID", new SymbolState(BOOLEANLITERAL,  1));
        state191.put("SEMI", new SymbolState(BOOLEANLITERAL,  1));
        state521.put("EOF", new SymbolState(COMPILATIONUNIT,  2));
        state15.put("STATIC", new SymbolState(MODIFIER,  1));
        state17.put("FALSE", new SymbolState(BASICTYPE,  1));
        state38.put("DOUBLE", new SymbolState(LITERAL,  1));
        state239.put("N_SELECTOR_0", new SymbolState(568));
        state243.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state263.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state301.put("PRIMARY", new SymbolState(163));
        state50.put("PREFIXOP", new SymbolState(146));
        state333.put("LONG", new SymbolState(BASICTYPE,  1));
        state324.put("RBRACKET", new SymbolState(ARGUMENTS,  4));
        state311.put("INTEGERLITERAL", new SymbolState(180));
        state362.put("SEMI", new SymbolState(EXPRESSION2,  1));
        state400.put("EOF", new SymbolState(CLASSBODY,  3));
        state324.put("LBRACKET", new SymbolState(ARGUMENTS,  4));
        state75.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state334.put("TYPELIST", new SymbolState(569));
        state6.put("BYTE", new SymbolState(BASICTYPE,  1));
        state30.put("TYPE", new SymbolState(54));
        state280.put("LPAREN", new SymbolState(14));
        state457.put("CHAR_LITERAL", new SymbolState(159));
        state99.put("BOOLEAN", new SymbolState(56));
        state174.put("DECIMAL_INTEGER_LITERAL", new SymbolState(553));
        state364.put("FLOAT", new SymbolState(EXPRESSION,  3));
        state369.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state139.put("INTEGERLITERAL", new SymbolState(153));
        state138.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state20.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state186.put("BYTE", new SymbolState(IDENTIFIER,  1));
        state221.put("DOUBLE", new SymbolState(SELECTOR,  3));
        state136.put("MINUS", new SymbolState(10));
        state351.put("BOOLEAN", new SymbolState(56));
        state78.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state105.put("EXPRESSION2REST", new SymbolState(570));
        state119.put("RPAREN", new SymbolState(LITERAL,  1));
        state139.put("LPAREN", new SymbolState(30));
        state596.put("SEMI", new SymbolState(N_SELECTOR_0,  2));
        state79.put("INSTANCEOF", new SymbolState(INTEGERLITERAL,  1));
        state1.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state357.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state390.put("SHORT", new SymbolState(EXPRESSION,  1));
        state134.put("ID", new SymbolState(51));
        state283.put("INSTANCEOF", new SymbolState(IDENTIFIER,  1));
        state291.put("ID", new SymbolState(150));
        state231.put("LBRACKET", new SymbolState(LITERAL,  1));
        state77.put("IDENTIFIER", new SymbolState(571));
        state278.put("LONG", new SymbolState(6));
        state416.put("FLOAT", new SymbolState(IDENTIFIER,  1));
        state490.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state222.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state182.put("SHORT", new SymbolState(20));
        state451.put("PRIMARY", new SymbolState(562));
        state311.put("LITERAL", new SymbolState(465));
        state185.put("DECIMAL_INTEGER_LITERAL", new SymbolState(189));
        state249.put("RPAREN", new SymbolState(TYPE,  1));
        state311.put("DOUBLE", new SymbolState(17));
        state54.put("CHAR", new SymbolState(81));
        state252.put("CHAR", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state48.put("COMMA", new SymbolState(BASICTYPE,  1));
        state524.put("INT", new SymbolState(TYPE,  1));
        state409.put("COMMA", new SymbolState(280));
        state501.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state438.put("RBRACKET", new SymbolState(PRIMARY,  1));
        state75.put("SHORT", new SymbolState(LITERAL,  1));
        state99.put("PREFIXOP", new SymbolState(99));
        state515.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  2));
        state275.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state520.put("SHORT", new SymbolState(BASICTYPE,  1));
        state57.put("FALSE", new SymbolState(PREFIXOP,  1));
        state158.put("CHAR", new SymbolState(81));
        state263.put("ID", new SymbolState(MODIFIER,  1));
        state8.put("BYTE", new SymbolState(BASICTYPE,  1));
        state59.put("BYTE", new SymbolState(1));
        state374.put("PLUS", new SymbolState(57));
        state57.put("BOOLEAN", new SymbolState(PREFIXOP,  1));
        state457.put("PRIMARY", new SymbolState(3));
        state57.put("BYTE", new SymbolState(PREFIXOP,  1));
        state49.put("CHAR_LITERAL", new SymbolState(159));
        state140.put("FLOAT", new SymbolState(8));
        state217.put("RPAREN", new SymbolState(PRIMARY,  1));
        state530.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state408.put("BECOMES", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state587.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state67.put("SEMI", new SymbolState(TYPEDECLARATION,  1));
        state464.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state171.put("ID", new SymbolState(51));
        state141.put("BOOLEAN", new SymbolState(TYPE,  1));
        state66.put("DOT", new SymbolState(LITERAL,  1));
        state196.put("SEMI", new SymbolState(CLASSDECLARATION,  7));
        state224.put("BOOLEAN", new SymbolState(PRIMARY,  1));
        state111.put("SEMI", new SymbolState(BASICTYPE,  1));
        state195.put("FLOAT", new SymbolState(EXPRESSION2,  2));
        state95.put("EXPRESSION1", new SymbolState(572));
        state450.put("LBRACKET", new SymbolState(SELECTOR,  2));
        state95.put("EXPRESSION2", new SymbolState(573));
        state408.put("RBRACE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state95.put("EXPRESSION3", new SymbolState(574));
        state451.put("LONG", new SymbolState(6));
        state333.put("SHORT", new SymbolState(BASICTYPE,  1));
        state359.put("CHAR_LITERAL", new SymbolState(309));
        state86.put("CHAR", new SymbolState(425));
        state136.put("BYTE", new SymbolState(1));
        state447.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        state458.put("ID", new SymbolState(125));
        state528.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state302.put("BYTE", new SymbolState(METHODORFIELDDECL,  3));
        state243.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state124.put("PRIMARY", new SymbolState(163));
        state342.put("BECOMES", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state259.put("IDENTIFIER", new SymbolState(26));
        state261.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        state459.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state253.put("CHAR", new SymbolState(INTEGERLITERAL,  1));
        state174.put("PRIMARY", new SymbolState(562));
        state225.put("COMMA", new SymbolState(LITERAL,  1));
        state19.put("CHAR", new SymbolState(MEMBERDECL,  1));
        state26.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state595.put("INT", new SymbolState(PAREXPRESSION,  3));
        state31.put("INT", new SymbolState(78));
        state136.put("EXPRESSION1", new SymbolState(90));
        state136.put("EXPRESSION2", new SymbolState(91));
        state595.put("FLOAT", new SymbolState(PAREXPRESSION,  3));
        state136.put("EXPRESSION3", new SymbolState(92));
        state251.put("DECIMAL_INTEGER_LITERAL", new SymbolState(279));
        state553.put("LBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state30.put("LONG", new SymbolState(6));
        state263.put("NATIVE", new SymbolState(MODIFIER,  1));
        state528.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state596.put("BECOMES", new SymbolState(N_SELECTOR_0,  2));
        state49.put("BYTE", new SymbolState(1));
        state457.put("TRUE", new SymbolState(260));
        state136.put("FLOAT", new SymbolState(8));
        state184.put("TRUE", new SymbolState(575));
        state81.put("FALSE", new SymbolState(BASICTYPE,  1));
        state76.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state488.put("CHAR", new SymbolState(EXPRESSION3,  2));
        state201.put("BOOLEAN", new SymbolState(TYPE,  3));
        state311.put("ID", new SymbolState(51));
        state93.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state16.put("RPAREN", new SymbolState(LITERAL,  1));
        state113.put("RPAREN", new SymbolState(EXPRESSION1,  1));
        state510.put("ID", new SymbolState(500));
        state604.put("INSTANCEOF", new SymbolState(ARGUMENTS,  4));
        state397.put("NATIVE", new SymbolState(MODIFIER,  1));
        state397.put("STATIC", new SymbolState(MODIFIER,  1));
        state30.put("MINUS", new SymbolState(10));
        state581.put("STR_LITERAL", new SymbolState(170));
        state134.put("INT", new SymbolState(78));
        state280.put("FALSE", new SymbolState(37));
        state500.put("BYTE", new SymbolState(IDENTIFIER,  1));
        state5.put("PAREXPRESSION", new SymbolState(100));
        state193.put("INT", new SymbolState(PRIMARY,  1));
        state369.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state584.put("COMMA", new SymbolState(BASICTYPE,  1));
        state294.put("BOOLEAN", new SymbolState(SELECTOR,  3));
        state136.put("EXCLAMATION", new SymbolState(44));
        state397.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state227.put("BOOLEANLITERAL", new SymbolState(175));
        state158.put("BOOLEANLITERAL", new SymbolState(175));
        state251.put("PLUS", new SymbolState(57));
        state357.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state15.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state481.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state139.put("BOOLEAN", new SymbolState(56));
        state213.put("CHAR", new SymbolState(81));
        state550.put("LBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state393.put("DOUBLE", new SymbolState(EXPRESSION2,  1));
        state447.put("CHAR", new SymbolState(MEMBERDECL,  1));
        state50.put("CHAR_LITERAL", new SymbolState(255));
        state588.put("CHAR", new SymbolState(ARGUMENTS,  2));
        state57.put("LPAREN", new SymbolState(PREFIXOP,  1));
        state14.put("BASICTYPE", new SymbolState(141));
        state30.put("STR_LITERAL", new SymbolState(155));
        state446.put("TRUE", new SymbolState(260));
        state506.put("SEMI", new SymbolState(SELECTOR,  3));
        state51.put("STR_LITERAL", new SymbolState(IDENTIFIER,  1));
        state440.put("RPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state140.put("TYPE", new SymbolState(359));
        state224.put("DOUBLE", new SymbolState(PRIMARY,  1));
        state533.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state614.put("FINAL", new SymbolState(MODIFIER,  1));
        state12.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state237.put("CHAR_LITERAL", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state384.put("BECOMES", new SymbolState(BRACKETSOPT,  1));
        state397.put("FINAL", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state548 = new HashMap<String, SymbolState>();
        rules.put(548, state548);
        state548.put("RPAREN", new SymbolState(576));
        state93.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state14.put("PLUS", new SymbolState(57));
        state264.put("BECOMES", new SymbolState(INTEGERLITERAL,  1));
        state405.put("LONG", new SymbolState(VARIABLEINITIALIZER,  1));
        state121.put("MODIFIER", new SymbolState(577));
        Map<String, SymbolState> state238 = new HashMap<String, SymbolState>();
        rules.put(238, state238);
        state238.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state387.put("RBRACE", new SymbolState(EXPRESSION3,  2));
        state352.put("RBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state552.put("FLOAT", new SymbolState(VARIABLEDECLARATORREST,  1));
        state105.put("COMMA", new SymbolState(EXPRESSION2,  1));
        state256.put("INT", new SymbolState(BASICTYPE,  1));
        state304.put("N_SELECTOR_0", new SymbolState(578));
        state539.put("BRACKETSOPT", new SymbolState(579));
        state174.put("PREFIXOP", new SymbolState(174));
        state524.put("CHAR", new SymbolState(TYPE,  1));
        state44.put("MINUS", new SymbolState(PREFIXOP,  1));
        state595.put("RBRACE", new SymbolState(PAREXPRESSION,  3));
        state605.put("FLOAT", new SymbolState(580));
        state219.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state14.put("TRUE", new SymbolState(12));
        state41.put("TRUE", new SymbolState(575));
        state490.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state230.put("INT", new SymbolState(EXPRESSION3,  2));
        state65.put("BYTE", new SymbolState(LITERAL,  1));
        state403.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state94.put("BECOMES", new SymbolState(N_SELECTOR_0,  0));
        state509.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state10.put("DECIMAL_INTEGER_LITERAL", new SymbolState(PREFIXOP,  1));
        state147.put("IMPLEMENTS", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state95.put("CHAR", new SymbolState(81));
        state499.put("ID", new SymbolState(51));
        state417.put("SEMI", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state131.put("DOT", new SymbolState(LITERAL,  1));
        state44.put("EXCLAMATION", new SymbolState(PREFIXOP,  1));
        state583.put("DOT", new SymbolState(N_SELECTOR_0,  2));
        state359.put("FALSE", new SymbolState(23));
        state139.put("TYPE", new SymbolState(5));
        state193.put("BYTE", new SymbolState(PRIMARY,  1));
        state213.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        state579.put("ID", new SymbolState(TYPE,  3));
        state242.put("RBRACE", new SymbolState(BRACKETSOPT,  1));
        state335.put("BYTE", new SymbolState(EXPRESSION3,  2));
        state5.put("STR_LITERAL", new SymbolState(214));
        state519.put("LPAREN", new SymbolState(581));
        state74.put("RBRACKET", new SymbolState(PRIMARY,  1));
        state442.put("N_DOT_IDENTIFIER_0", new SymbolState(582));
        state93.put("CHAR", new SymbolState(MODIFIER,  1));
        state15.put("CLASS", new SymbolState(MODIFIER,  1));
        state158.put("CHAR_LITERAL", new SymbolState(183));
        state420.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state5.put("PREFIXOP", new SymbolState(139));
        state474.put("BECOMES", new SymbolState(ARGUMENTS,  4));
        state141.put("MINUS", new SymbolState(TYPE,  1));
        state457.put("ID", new SymbolState(51));
        state53.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state31.put("LPAREN", new SymbolState(158));
        state237.put("TRUE", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state15.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state230.put("SEMI", new SymbolState(EXPRESSION3,  2));
        state482.put("ID", new SymbolState(BASICTYPE,  1));
        state379.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state309.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state136.put("CHAR_LITERAL", new SymbolState(159));
        state488.put("RBRACE", new SymbolState(EXPRESSION3,  2));
        state295.put("DOUBLE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state227.put("EXCLAMATION", new SymbolState(44));
        state517.put("SELECTOR", new SymbolState(583));
        state577.put("VOLATILE", new SymbolState(MODIFIERS,  2));
        state301.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        state172.put("CHAR", new SymbolState(LITERAL,  1));
        state54.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        state498.put("INT", new SymbolState(584));
        state51.put("BOOLEAN", new SymbolState(IDENTIFIER,  1));
        state311.put("PAREXPRESSION", new SymbolState(80));
        state207.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state194.put("LONG", new SymbolState(BASICTYPE,  1));
        state303.put("ID", new SymbolState(BASICTYPE,  1));
        state439.put("CHAR", new SymbolState(MODIFIER,  1));
        state442.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state393.put("LONG", new SymbolState(EXPRESSION2,  1));
        state581.put("LITERAL", new SymbolState(204));
        state49.put("ID", new SymbolState(51));
        state515.put("CHAR", new SymbolState(N_SELECTOR_0,  2));
        state523.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  0));
        state611.put("RBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state195.put("ID", new SymbolState(EXPRESSION2,  2));
        state27.put("BASICTYPE", new SymbolState(141));
        state16.put("DOT", new SymbolState(LITERAL,  1));
        state134.put("BASICTYPE", new SymbolState(141));
        state482.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state490.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state160.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state429.put("IMPLEMENTS", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state153.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state56.put("CHAR", new SymbolState(BASICTYPE,  1));
        state6.put("NULL", new SymbolState(BASICTYPE,  1));
        state524.put("DOUBLE", new SymbolState(TYPE,  1));
        state390.put("ID", new SymbolState(EXPRESSION,  1));
        state620.put("DOT", new SymbolState(ARGUMENTS,  2));
        state341.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state445.put("BOOLEANLITERAL", new SymbolState(39));
        state605.put("BYTE", new SymbolState(585));
        state353.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state457.put("LONG", new SymbolState(6));
        state131.put("LONG", new SymbolState(LITERAL,  1));
        state237.put("SHORT", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state374.put("LPAREN", new SymbolState(14));
        state8.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state31.put("EXCLAMATION", new SymbolState(44));
        state457.put("PLUS", new SymbolState(57));
        state505.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state595.put("SEMI", new SymbolState(PAREXPRESSION,  3));
        state610.put("BYTE", new SymbolState(586));
        state359.put("IDENTIFIER", new SymbolState(26));
        state51.put("INT", new SymbolState(IDENTIFIER,  1));
        state90.put("RBRACKET", new SymbolState(EXPRESSION,  1));
        state20.put("TRUE", new SymbolState(BASICTYPE,  1));
        state124.put("BOOLEANLITERAL", new SymbolState(175));
        state267.put("BYTE", new SymbolState(CLASSBODYDECLARATION,  1));
        state474.put("DOT", new SymbolState(ARGUMENTS,  4));
        state217.put("DOT", new SymbolState(PRIMARY,  1));
        state311.put("CHAR_LITERAL", new SymbolState(255));
        state574.put("RPAREN", new SymbolState(EXPRESSION2,  1));
        state99.put("INTEGERLITERAL", new SymbolState(367));
        state8.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state579.put("TRUE", new SymbolState(TYPE,  3));
        state370.put("EOF", new SymbolState(CLASSDECLARATION,  5));
        state288.put("DOT", new SymbolState(IDENTIFIER,  1));
        state59.put("PLUS", new SymbolState(57));
        state37.put("COMMA", new SymbolState(BOOLEANLITERAL,  1));
        state293.put("CLASS", new SymbolState(IMPORTDECLARATION,  6));
        state545.put("INSTANCEOF", new SymbolState(PAREXPRESSION,  3));
        state353.put("INT", new SymbolState(LITERAL,  1));
        state390.put("CHAR", new SymbolState(EXPRESSION,  1));
        state256.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state158.put("EXCLAMATION", new SymbolState(44));
        state613.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state215.put("INT", new SymbolState(IDENTIFIER,  1));
        state224.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state261.put("BOOLEANLITERAL", new SymbolState(175));
        state311.put("FLOAT", new SymbolState(8));
        state332.put("EOF", new SymbolState(TYPEDECLARATIONWITHOUTMODIFIERS,  1));
        state158.put("FALSE", new SymbolState(76));
        state259.put("LITERAL", new SymbolState(204));
        state522.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state86.put("SYNCHRONIZED", new SymbolState(587));
        state105.put("RPAREN", new SymbolState(EXPRESSION2,  1));
        state244.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state466.put("CHAR", new SymbolState(IDENTIFIER,  1));
        state474.put("RBRACKET", new SymbolState(ARGUMENTS,  4));
        state185.put("MINUS", new SymbolState(10));
        state457.put("BASICTYPE", new SymbolState(141));
        state17.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state415 = new HashMap<String, SymbolState>();
        rules.put(415, state415);
        state415.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state539.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state369.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state171.put("RPAREN", new SymbolState(588));
        state506.put("BOOLEAN", new SymbolState(SELECTOR,  3));
        state347.put("TRUE", new SymbolState(73));
        state506.put("DOT", new SymbolState(SELECTOR,  3));
        state362.put("ID", new SymbolState(EXPRESSION2,  1));
        state102.put("ARGUMENTS", new SymbolState(589));
        state71.put("RBRACE", new SymbolState(LITERAL,  1));
        state60.put("RPAREN", new SymbolState(EXPRESSION2,  1));
        state514.put("CHAR", new SymbolState(MODIFIERS,  2));
        state266.put("BYTE", new SymbolState(LITERAL,  1));
        state416.put("ID", new SymbolState(IDENTIFIER,  1));
        state37.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state27.put("PAREXPRESSION", new SymbolState(100));
        state587.put("FLOAT", new SymbolState(MODIFIER,  1));
        state408.put("SHORT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state497.put("N_COMMA_EXPRESSION_0", new SymbolState(590));
        state446.put("INT", new SymbolState(78));
        state244.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state286.put("COMMA", new SymbolState(TYPE,  1));
        state134.put("TYPE", new SymbolState(134));
        state351.put("INTEGERLITERAL", new SymbolState(66));
        state311.put("INT", new SymbolState(78));
        state104.put("BECOMES", new SymbolState(EXPRESSION2,  2));
        state401.put("INT", new SymbolState(PRIMARY,  1));
        state526.put("RPAREN", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state544 = new HashMap<String, SymbolState>();
        rules.put(544, state544);
        state544.put("ID", new SymbolState(BASICTYPE,  1));
        state611.put("DOT", new SymbolState(591));
        state256.put("BYTE", new SymbolState(BASICTYPE,  1));
        state21.put("RBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state590.put("COMMA", new SymbolState(280));
        state482.put("BYTE", new SymbolState(BASICTYPE,  1));
        state124.put("BOOLEAN", new SymbolState(56));
        state192.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state301.put("EXPRESSION2", new SymbolState(113));
        state301.put("EXPRESSION3", new SymbolState(114));
        state176.put("FLOAT", new SymbolState(MODIFIER,  1));
        state17.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state301.put("EXPRESSION1", new SymbolState(115));
        state362.put("CHAR", new SymbolState(EXPRESSION2,  1));
        state552.put("LONG", new SymbolState(VARIABLEDECLARATORREST,  1));
        state65.put("SHORT", new SymbolState(LITERAL,  1));
        state13.put("BOOLEAN", new SymbolState(EXPRESSION2,  2));
        state596.put("LONG", new SymbolState(N_SELECTOR_0,  2));
        state394.put("INT", new SymbolState(EXPRESSION1,  1));
        state300.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state49.put("EXCLAMATION", new SymbolState(44));
        state29.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state109.put("CHAR", new SymbolState(PAREXPRESSION,  3));
        state86.put("IDENTIFIER", new SymbolState(481));
        state131.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state39.put("RBRACKET", new SymbolState(LITERAL,  1));
        state73.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state280.put("EXPRESSION3", new SymbolState(60));
        state126.put("SHORT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state15.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state280.put("EXPRESSION2", new SymbolState(61));
        state392.put("BRACKETSOPT", new SymbolState(592));
        state280.put("EXPRESSION1", new SymbolState(62));
        state581.put("FALSE", new SymbolState(37));
        state414.put("RBRACKET", new SymbolState(ARGUMENTS,  2));
        state117.put("RPAREN", new SymbolState(SELECTOR,  3));
        state162.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state342.put("RPAREN", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state71.put("DOUBLE", new SymbolState(LITERAL,  1));
        state500.put("INT", new SymbolState(IDENTIFIER,  1));
        state19.put("SHORT", new SymbolState(MEMBERDECL,  1));
        state420.put("VOLATILE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state358 = new HashMap<String, SymbolState>();
        rules.put(358, state358);
        state358.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state447.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        state99.put("LITERAL", new SymbolState(438));
        state1.put("CHAR", new SymbolState(BASICTYPE,  1));
        state552.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  1));
        state445.put("TYPE", new SymbolState(5));
        state103.put("COMMA", new SymbolState(EXPRESSION,  3));
        state109.put("FLOAT", new SymbolState(PAREXPRESSION,  3));
        state45.put("LONG", new SymbolState(6));
        state227.put("PRIMARY", new SymbolState(163));
        state444.put("ID", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state400.put("SEMI", new SymbolState(CLASSBODY,  3));
        state566.put("INT", new SymbolState(593));
        state44.put("BOOLEAN", new SymbolState(PREFIXOP,  1));
        state189.put("INSTANCEOF", new SymbolState(INTEGERLITERAL,  1));
        state146.put("STR_LITERAL", new SymbolState(441));
        Map<String, SymbolState> state615 = new HashMap<String, SymbolState>();
        rules.put(615, state615);
        state615.put("RBRACKET", new SymbolState(594));
        state359.put("BASICTYPE", new SymbolState(141));
        state614.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state280.put("PAREXPRESSION", new SymbolState(223));
        state45.put("BASICTYPE", new SymbolState(141));
        state465.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state506.put("LONG", new SymbolState(SELECTOR,  3));
        state136.put("FALSE", new SymbolState(21));
        state420.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state417.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state411.put("BECOMES", new SymbolState(ARGUMENTS,  2));
        state83.put("BECOMES", new SymbolState(PRIMARY,  1));
        state536.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state226.put("RPAREN", new SymbolState(ARGUMENTS,  2));
        state417.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state445.put("TRUE", new SymbolState(260));
        state129.put("RBRACE", new SymbolState(TYPE,  1));
        state141.put("PLUS", new SymbolState(TYPE,  1));
        state142.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state318.put("LBRACE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state585 = new HashMap<String, SymbolState>();
        rules.put(585, state585);
        state585.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state49.put("DECIMAL_INTEGER_LITERAL", new SymbolState(264));
        state397.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state38.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state610.put("ID", new SymbolState(518));
        Map<String, SymbolState> state560 = new HashMap<String, SymbolState>();
        rules.put(560, state560);
        state560.put("RPAREN", new SymbolState(595));
        state390.put("LONG", new SymbolState(EXPRESSION,  1));
        state93.put("STATIC", new SymbolState(MODIFIER,  1));
        state174.put("EXCLAMATION", new SymbolState(44));
        state93.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state275.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state525.put("RPAREN", new SymbolState(SELECTOR,  2));
        state294.put("INT", new SymbolState(SELECTOR,  3));
        state275.put("NATIVE", new SymbolState(MODIFIER,  1));
        state54.put("PREFIXOP", new SymbolState(124));
        Map<String, SymbolState> state436 = new HashMap<String, SymbolState>();
        rules.put(436, state436);
        state436.put("ID", new SymbolState(BASICTYPE,  1));
        state8.put("NULL", new SymbolState(BASICTYPE,  1));
        state598.put("ID", new SymbolState(MODIFIER,  1));
        state521.put("INTERFACEDECLARATION", new SymbolState(332));
        state513.put("COMMA", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state387.put("SELECTOR", new SymbolState(596));
        state278.put("CHAR_LITERAL", new SymbolState(69));
        state57.put("MINUS", new SymbolState(PREFIXOP,  1));
        state54.put("LITERAL", new SymbolState(83));
        state41.put("BOOLEANLITERAL", new SymbolState(219));
        state30.put("PREFIXOP", new SymbolState(124));
        state458.put("TYPE", new SymbolState(597));
        state187.put("INSTANCEOF", new SymbolState(ARGUMENTS,  4));
        state275.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state86.put("PROTECTED", new SymbolState(598));
        state465.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state27.put("BOOLEAN", new SymbolState(56));
        state31.put("ID", new SymbolState(51));
        state369.put("CHAR_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state585.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state253.put("BOOLEAN", new SymbolState(INTEGERLITERAL,  1));
        state420.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state174.put("PLUS", new SymbolState(57));
        state566.put("CHAR", new SymbolState(599));
        state158.put("NULL", new SymbolState(16));
        state324.put("INSTANCEOF", new SymbolState(ARGUMENTS,  4));
        state187.put("DOUBLE", new SymbolState(ARGUMENTS,  4));
        state445.put("BOOLEAN", new SymbolState(56));
        state258.put("IDENTIFIER", new SymbolState(600));
        state477.put("RBRACE", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state490.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state110.put("BECOMES", new SymbolState(EXPRESSION2,  2));
        state611.put("SEMI", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state479.put("DOT", new SymbolState(601));
        state129.put("BOOLEAN", new SymbolState(TYPE,  1));
        state505.put("RBRACKET", new SymbolState(SELECTOR,  3));
        state524.put("ID", new SymbolState(TYPE,  1));
        state522.put("CHAR", new SymbolState(MODIFIER,  1));
        state272.put("DOT", new SymbolState(602));
        state576.put("DOT", new SymbolState(PAREXPRESSION,  3));
        state335.put("ID", new SymbolState(EXPRESSION3,  2));
        state275.put("LONG", new SymbolState(MODIFIER,  1));
        state243.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state158.put("SHORT", new SymbolState(20));
        state466.put("DOT", new SymbolState(IDENTIFIER,  1));
        state51.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state407.put("COMMA", new SymbolState(IDENTIFIER,  1));
        state365.put("LBRACKET", new SymbolState(603));
        state374.put("TRUE", new SymbolState(73));
        state448.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state93.put("LONG", new SymbolState(MODIFIER,  1));
        state114.put("RPAREN", new SymbolState(EXPRESSION2,  1));
        state19.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        state174.put("BOOLEAN", new SymbolState(56));
        state98.put("SEMI", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state261.put("ID", new SymbolState(51));
        state71.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state195.put("SHORT", new SymbolState(EXPRESSION2,  2));
        state515.put("LBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state554.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state195.put("BYTE", new SymbolState(EXPRESSION2,  2));
        state294.put("SHORT", new SymbolState(SELECTOR,  3));
        state394.put("RBRACE", new SymbolState(EXPRESSION1,  1));
        state215.put("SHORT", new SymbolState(IDENTIFIER,  1));
        state376.put("LONG", new SymbolState(SELECTOR,  2));
        state336.put("RPAREN", new SymbolState(604));
        state185.put("LITERAL", new SymbolState(204));
        state374.put("LONG", new SymbolState(6));
        state300.put("LONG", new SymbolState(BASICTYPE,  1));
        state598.put("BYTE", new SymbolState(MODIFIER,  1));
        state520.put("BYTE", new SymbolState(BASICTYPE,  1));
        state260.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state60.put("INSTANCEOF", new SymbolState(605));
        state136.put("TYPE", new SymbolState(5));
        state539.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state256.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state72.put("SEMI", new SymbolState(TYPE,  3));
        state457.put("SHORT", new SymbolState(20));
        state351.put("EXPRESSION", new SymbolState(606));
        state384.put("RPAREN", new SymbolState(BRACKETSOPT,  1));
        state58.put("LONG", new SymbolState(MODIFIER,  1));
        state129.put("DOUBLE", new SymbolState(TYPE,  1));
        state5.put("CHAR", new SymbolState(81));
        state486.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state527.put("CHAR", new SymbolState(607));
        state127.put("INSTANCEOF", new SymbolState(INTEGERLITERAL,  1));
        state251.put("MINUS", new SymbolState(10));
        state448.put("BOOLEAN", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state364.put("BYTE", new SymbolState(EXPRESSION,  3));
        state416.put("LONG", new SymbolState(IDENTIFIER,  1));
        state581.put("ID", new SymbolState(51));
        state204.put("COMMA", new SymbolState(PRIMARY,  1));
        state346.put("LBRACKET", new SymbolState(IDENTIFIER,  1));
        state63.put("LBRACE", new SymbolState(IDENTIFIER,  1));
        state447.put("ID", new SymbolState(MEMBERDECL,  1));
        state251.put("EXPRESSION3", new SymbolState(608));
        state499.put("CHAR", new SymbolState(81));
        state410.put("N_COMMA_EXPRESSION_0", new SymbolState(609));
        state135.put("LBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state469.put("INSTANCEOF", new SymbolState(610));
        state522.put("FINAL", new SymbolState(MODIFIER,  1));
        state59.put("CHAR_LITERAL", new SymbolState(156));
        state168.put("INSTANCEOF", new SymbolState(SELECTOR,  2));
        state224.put("CHAR", new SymbolState(PRIMARY,  1));
        state228.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state69.put("DOT", new SymbolState(LITERAL,  1));
        state295.put("N_DOT_IDENTIFIER_0", new SymbolState(611));
        state119.put("LBRACKET", new SymbolState(LITERAL,  1));
        state259.put("PREFIXOP", new SymbolState(185));
        state95.put("STR_LITERAL", new SymbolState(273));
        state278.put("TYPE", new SymbolState(259));
        state458.put("FLOAT", new SymbolState(245));
        state193.put("SHORT", new SymbolState(PRIMARY,  1));
        state295.put("LBRACKET", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state221.put("CHAR", new SymbolState(SELECTOR,  3));
        state237.put("FALSE", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state8.put("ID", new SymbolState(BASICTYPE,  1));
        state26.put("BOOLEAN", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        Map<String, SymbolState> state586 = new HashMap<String, SymbolState>();
        rules.put(586, state586);
        state586.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state213.put("BASICTYPE", new SymbolState(141));
        state406.put("LBRACKET", new SymbolState(PAREXPRESSION,  3));
        state351.put("DECIMAL_INTEGER_LITERAL", new SymbolState(79));
        state302.put("SHORT", new SymbolState(METHODORFIELDDECL,  3));
        state243.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state45.put("NULL", new SymbolState(107));
        state226.put("COMMA", new SymbolState(ARGUMENTS,  2));
        Map<String, SymbolState> state470 = new HashMap<String, SymbolState>();
        rules.put(470, state470);
        state470.put("RBRACKET", new SymbolState(EXPRESSION1,  1));
        state138.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state631.put("TYPE", new SymbolState(597));
        state451.put("TYPE", new SymbolState(134));
        state490.put("FINAL", new SymbolState(MODIFIER,  1));
        state403.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state351.put("BYTE", new SymbolState(1));
        state140.put("BOOLEANLITERAL", new SymbolState(75));
        state562.put("LONG", new SymbolState(N_SELECTOR_0,  0));
        state388.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  2));
        state6.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state187.put("BYTE", new SymbolState(ARGUMENTS,  4));
        state598.put("FLOAT", new SymbolState(MODIFIER,  1));
        state54.put("BASICTYPE", new SymbolState(141));
        state525.put("LBRACKET", new SymbolState(SELECTOR,  2));
        state534.put("FLOAT", new SymbolState(MODIFIER,  1));
        state381.put("SEMI", new SymbolState(TYPEDECLARATIONWITHOUTMODIFIERS,  1));
        state457.put("BOOLEAN", new SymbolState(56));
        state280.put("INTEGERLITERAL", new SymbolState(231));
        state506.put("RBRACE", new SymbolState(SELECTOR,  3));
        state295.put("BOOLEAN", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state78.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state334.put("DOUBLE", new SymbolState(265));
        state362.put("INSTANCEOF", new SymbolState(612));
        state525.put("DOT", new SymbolState(SELECTOR,  2));
        state169.put("RBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state417.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state31.put("PRIMARY", new SymbolState(163));
        state510.put("FLOAT", new SymbolState(613));
        state134.put("PAREXPRESSION", new SymbolState(42));
        state263.put("FINAL", new SymbolState(MODIFIER,  1));
        state405.put("ID", new SymbolState(VARIABLEINITIALIZER,  1));
        state187.put("SHORT", new SymbolState(ARGUMENTS,  4));
        state335.put("DOUBLE", new SymbolState(EXPRESSION3,  2));
        state158.put("BASICTYPE", new SymbolState(141));
        state59.put("DOUBLE", new SymbolState(17));
        state121.put("PUBLIC", new SymbolState(614));
        state260.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state457.put("EXPRESSION", new SymbolState(615));
        state599.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state146.put("EXCLAMATION", new SymbolState(44));
        state340.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state494.put("CHAR", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state425 = new HashMap<String, SymbolState>();
        rules.put(425, state425);
        state425.put("ID", new SymbolState(BASICTYPE,  1));
        state26.put("DOUBLE", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state430.put("RPAREN", new SymbolState(616));
        state146.put("CHAR", new SymbolState(81));
        state8.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state309.put("CHAR", new SymbolState(LITERAL,  1));
        state54.put("FLOAT", new SymbolState(8));
        state583.put("RPAREN", new SymbolState(N_SELECTOR_0,  2));
        state227.put("MINUS", new SymbolState(10));
        state275.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state58.put("INT", new SymbolState(MODIFIER,  1));
        state293.put("EOF", new SymbolState(IMPORTDECLARATION,  6));
        state273.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state143.put("RPAREN", new SymbolState(LITERAL,  1));
        state58.put("FLOAT", new SymbolState(MODIFIER,  1));
        state446.put("LITERAL", new SymbolState(74));
        state131.put("RBRACE", new SymbolState(LITERAL,  1));
        state251.put("NULL", new SymbolState(119));
        state264.put("RBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state478.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state42.put("DOT", new SymbolState(PRIMARY,  1));
        state367.put("LBRACKET", new SymbolState(LITERAL,  1));
        state347.put("INT", new SymbolState(78));
        state126.put("BOOLEAN", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state182.put("INT", new SymbolState(78));
        state589.put("RBRACE", new SymbolState(SELECTOR,  3));
        state8.put("TRUE", new SymbolState(BASICTYPE,  1));
        state1.put("TRUE", new SymbolState(BASICTYPE,  1));
        state8.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state261.put("CHAR_LITERAL", new SymbolState(183));
        state14.put("BOOLEAN", new SymbolState(56));
        state256.put("SHORT", new SymbolState(BASICTYPE,  1));
        state244.put("RBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state80.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state50.put("MINUS", new SymbolState(10));
        state127.put("DOT", new SymbolState(INTEGERLITERAL,  1));
        state28.put("CLASS", new SymbolState(TYPEDECLARATION,  1));
        state7.put("INSTANCEOF", new SymbolState(ARGUMENTS,  2));
        state458.put("LONG", new SymbolState(47));
        state208.put("BYTE", new SymbolState(617));
        state56.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state49.put("INT", new SymbolState(78));
        state365.put("RBRACE", new SymbolState(BRACKETSOPT,  1));
        state363.put("CHAR", new SymbolState(EXPRESSION1,  1));
        state120.put("ID", new SymbolState(51));
        state64.put("BOOLEAN", new SymbolState(EXPRESSION3,  2));
        state64.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state182.put("ID", new SymbolState(51));
        state475.put("DOT", new SymbolState(618));
        state192.put("LBRACKET", new SymbolState(LITERAL,  1));
        state523.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state523.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  0));
        state547.put("RBRACKET", new SymbolState(ARGUMENTS,  2));
        state99.put("DOUBLE", new SymbolState(17));
        state510.put("TYPE", new SymbolState(619));
        state477.put("LONG", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state101.put("LBRACE", new SymbolState(BRACKETSOPT,  1));
        state12.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state112.put("SEMI", new SymbolState(TYPEDECLARATIONWITHMODIFIERS,  2));
        state141.put("NULL", new SymbolState(TYPE,  1));
        state416.put("INSTANCEOF", new SymbolState(IDENTIFIER,  1));
        state17.put("SHORT", new SymbolState(BASICTYPE,  1));
        state90.put("BECOMES", new SymbolState(237));
        state477.put("FLOAT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state499.put("DOUBLE", new SymbolState(17));
        state278.put("RPAREN", new SymbolState(620));
        state164.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state59.put("BOOLEANLITERAL", new SymbolState(137));
        state394.put("ID", new SymbolState(EXPRESSION1,  1));
        state416.put("SEMI", new SymbolState(IDENTIFIER,  1));
        state585.put("COMMA", new SymbolState(BASICTYPE,  1));
        state171.put("EXPRESSION", new SymbolState(621));
        state408.put("FLOAT", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state280.put("BYTE", new SymbolState(1));
        state120.put("MINUS", new SymbolState(10));
        state302.put("FLOAT", new SymbolState(METHODORFIELDDECL,  3));
        state509.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state261.put("LITERAL", new SymbolState(83));
        state622.put("INSTANCEOF", new SymbolState(PAREXPRESSION,  3));
        state251.put("BYTE", new SymbolState(1));
        state29.put("SEMI", new SymbolState(BASICTYPE,  1));
        state243.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state500.put("DOUBLE", new SymbolState(IDENTIFIER,  1));
        state14.put("FLOAT", new SymbolState(8));
        state359.put("LPAREN", new SymbolState(31));
        state383.put("FINAL", new SymbolState(MODIFIER,  1));
        state182.put("CHAR", new SymbolState(81));
        state99.put("INT", new SymbolState(78));
        state27.put("SHORT", new SymbolState(20));
        state596.put("INT", new SymbolState(N_SELECTOR_0,  2));
        state158.put("IDENTIFIER", new SymbolState(26));
        state484.put("LONG", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state348 = new HashMap<String, SymbolState>();
        rules.put(348, state348);
        state348.put("ID", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state402 = new HashMap<String, SymbolState>();
        rules.put(402, state402);
        state402.put("RPAREN", new SymbolState(622));
        state237.put("CHAR", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state490.put("CLASS", new SymbolState(MODIFIER,  1));
        state551.put("NULL", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state520.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state209.put("COMMA", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state250.put("INSTANCEOF", new SymbolState(ARGUMENTS,  4));
        state539.put("MINUS", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state45.put("EXPRESSION", new SymbolState(623));
        state66.put("RPAREN", new SymbolState(LITERAL,  1));
        state441.put("DOT", new SymbolState(LITERAL,  1));
        state143.put("BECOMES", new SymbolState(LITERAL,  1));
        state136.put("PAREXPRESSION", new SymbolState(100));
        state99.put("TRUE", new SymbolState(575));
        state430.put("IDENTIFIER", new SymbolState(26));
        state267.put("ID", new SymbolState(CLASSBODYDECLARATION,  1));
        state581.put("PAREXPRESSION", new SymbolState(223));
        state50.put("TYPE", new SymbolState(50));
        state223.put("BECOMES", new SymbolState(PRIMARY,  1));
        state562.put("BOOLEAN", new SymbolState(N_SELECTOR_0,  0));
        state613.put("ID", new SymbolState(BASICTYPE,  1));
        state295.put("CHAR", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state184.put("FALSE", new SymbolState(386));
        state427.put("ID", new SymbolState(BRACKETSOPT,  1));
        state294.put("BYTE", new SymbolState(SELECTOR,  3));
        state471.put("DOT", new SymbolState(624));
        state582.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state271.put("RPAREN", new SymbolState(PRIMARY,  1));
        state319.put("N_INTERFACEBODYDECLARATION_0", new SymbolState(625));
        state184.put("DOUBLE", new SymbolState(17));
        state292.put("IDENTIFIER", new SymbolState(626));
        state614.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state122.put("DOT", new SymbolState(SELECTOR,  3));
        state405.put("BYTE", new SymbolState(VARIABLEINITIALIZER,  1));
        state23.put("INT", new SymbolState(BOOLEANLITERAL,  1));
        state359.put("LONG", new SymbolState(6));
        state49.put("SHORT", new SymbolState(20));
        state116.put("SEMI", new SymbolState(TYPEDECLARATION,  1));
        state274.put("ID", new SymbolState(88));
        state407.put("BECOMES", new SymbolState(IDENTIFIER,  1));
        state121.put("INTERFACE", new SymbolState(373));
        state50.put("BOOLEANLITERAL", new SymbolState(325));
        state174.put("TRUE", new SymbolState(108));
        state349.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state463.put("N_LBRACKET_RBRACKET_0", new SymbolState(627));
        state298.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state438.put("DOT", new SymbolState(PRIMARY,  1));
        state446.put("DOUBLE", new SymbolState(17));
        state73.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state430.put("CHAR", new SymbolState(81));
        state420.put("FINAL", new SymbolState(MODIFIER,  1));
        state390.put("SEMI", new SymbolState(EXPRESSION,  1));
        state587.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state164.put("CHAR", new SymbolState(BOOLEANLITERAL,  1));
        state3.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  0));
        state357.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state347.put("NULL", new SymbolState(107));
        state160.put("FINAL", new SymbolState(MODIFIER,  1));
        state451.put("BYTE", new SymbolState(1));
        state386.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state228.put("COMMA", new SymbolState(N_DOT_IDENTIFIER_0,  3));
        state140.put("LONG", new SymbolState(6));
        state463.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state124.put("LONG", new SymbolState(6));
        state351.put("FLOAT", new SymbolState(8));
        state596.put("DOT", new SymbolState(N_SELECTOR_0,  2));
        state142.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state575.put("RBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state267.put("CHAR", new SymbolState(CLASSBODYDECLARATION,  1));
        state41.put("BASICTYPE", new SymbolState(141));
        state191.put("INT", new SymbolState(BOOLEANLITERAL,  1));
        state201.put("DOUBLE", new SymbolState(TYPE,  3));
        state499.put("LITERAL", new SymbolState(204));
        state547.put("LBRACKET", new SymbolState(ARGUMENTS,  2));
        state311.put("CHAR", new SymbolState(81));
        state538.put("COMMA", new SymbolState(BASICTYPE,  1));
        state223.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state367.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state14.put("EXPRESSION", new SymbolState(628));
        state213.put("PRIMARY", new SymbolState(3));
        state248.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state27.put("ID", new SymbolState(51));
        state124.put("DOUBLE", new SymbolState(17));
        state334.put("TYPE", new SymbolState(597));
        state445.put("PLUS", new SymbolState(57));
        state337.put("INTERFACE", new SymbolState(CLASSDECLARATION,  3));
        state204.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state120.put("BASICTYPE", new SymbolState(141));
        state43.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state484.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state439.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state183.put("BECOMES", new SymbolState(LITERAL,  1));
        state415.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state390.put("RBRACE", new SymbolState(EXPRESSION,  1));
        state8.put("INT", new SymbolState(BASICTYPE,  1));
        state51.put("NULL", new SymbolState(IDENTIFIER,  1));
        state248.put("CLASS", new SymbolState(MODIFIER,  1));
        state208.put("SHORT", new SymbolState(629));
        state189.put("COMMA", new SymbolState(INTEGERLITERAL,  1));
        state49.put("FLOAT", new SymbolState(8));
        state523.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  0));
        state208.put("TYPE", new SymbolState(630));
        state295.put("DOT", new SymbolState(N_DOT_IDENTIFIER_0,  0));
        state79.put("DOT", new SymbolState(INTEGERLITERAL,  1));
        state180.put("LBRACKET", new SymbolState(LITERAL,  1));
        state102.put("LBRACKET", new SymbolState(SELECTOR,  2));
        state213.put("SHORT", new SymbolState(20));
        state172.put("DOUBLE", new SymbolState(LITERAL,  1));
        state184.put("PRIMARY", new SymbolState(304));
        state387.put("BYTE", new SymbolState(EXPRESSION3,  2));
        state184.put("BOOLEANLITERAL", new SymbolState(219));
        state553.put("FLOAT", new SymbolState(INTEGERLITERAL,  1));
        state514.put("PRIVATE", new SymbolState(MODIFIERS,  2));
        state514.put("DOUBLE", new SymbolState(MODIFIERS,  2));
        state257.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state553.put("INSTANCEOF", new SymbolState(INTEGERLITERAL,  1));
        state520.put("ID", new SymbolState(BASICTYPE,  1));
        state177.put("RBRACKET", new SymbolState(SELECTOR,  3));
        state59.put("LITERAL", new SymbolState(289));
        state309.put("BECOMES", new SymbolState(LITERAL,  1));
        state151.put("EXTENDS", new SymbolState(631));
        state416.put("RBRACE", new SymbolState(IDENTIFIER,  1));
        state139.put("MINUS", new SymbolState(10));
        state347.put("SHORT", new SymbolState(20));
        state253.put("DOT", new SymbolState(INTEGERLITERAL,  1));
        state547.put("BECOMES", new SymbolState(ARGUMENTS,  2));
        state432.put("COMMA", new SymbolState(280));
        state126.put("LONG", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state93.put("FINAL", new SymbolState(MODIFIER,  1));
        state95.put("EXCLAMATION", new SymbolState(44));
        state44.put("INT", new SymbolState(PREFIXOP,  1));
        return rules;
    }
}
