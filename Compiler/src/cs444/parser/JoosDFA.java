//This file is automatically generated do not modify by hand.
package cs444.parser;

import java.util.HashMap;
import java.util.Map;

import cs444.parser.IParserRule;
import cs444.parser.symbols.SymbolState;
import cs444.parser.symbols.factories.NonTerminalFactory;
public class JoosDFA implements IParserRule{
    public Map<Integer, Map<String, SymbolState>> getRules() {
        
        Map<Integer, Map<String, SymbolState>> rules = new HashMap<Integer, Map<String, SymbolState>>();
        NonTerminalFactory MORESTATEMENTEXPRESSIONS = new NonTerminalFactory("MORESTATEMENTEXPRESSIONS");
        NonTerminalFactory N_DOT_ID_0 = new NonTerminalFactory("N_DOT_ID_0");
        NonTerminalFactory N_CLASSBODYDECLARATION_0 = new NonTerminalFactory("N_CLASSBODYDECLARATION_0");
        NonTerminalFactory INFIXOP = new NonTerminalFactory("INFIXOP");
        NonTerminalFactory INTEGERLITERAL = new NonTerminalFactory("INTEGERLITERAL");
        NonTerminalFactory N_COMMA_CONSTANTDECLARATOR_0 = new NonTerminalFactory("N_COMMA_CONSTANTDECLARATOR_0");
        NonTerminalFactory QUALIFIEDIDENTIFIERLIST = new NonTerminalFactory("QUALIFIEDIDENTIFIERLIST");
        NonTerminalFactory FIELDDECL = new NonTerminalFactory("FIELDDECL");
        NonTerminalFactory CREATOR = new NonTerminalFactory("CREATOR");
        NonTerminalFactory N_COMMA_VARIABLEDECLARATOR_0 = new NonTerminalFactory("N_COMMA_VARIABLEDECLARATOR_0");
        NonTerminalFactory CLASSBODY = new NonTerminalFactory("CLASSBODY");
        NonTerminalFactory BOOLEANLITERAL = new NonTerminalFactory("BOOLEANLITERAL");
        NonTerminalFactory FORMALPARAMETERS = new NonTerminalFactory("FORMALPARAMETERS");
        NonTerminalFactory N_COMMA_TYPE_0 = new NonTerminalFactory("N_COMMA_TYPE_0");
        NonTerminalFactory CONSTANTDECLARATORREST = new NonTerminalFactory("CONSTANTDECLARATORREST");
        NonTerminalFactory N_COMMA_QUALIFIEDIDENTIFIER_0 = new NonTerminalFactory("N_COMMA_QUALIFIEDIDENTIFIER_0");
        NonTerminalFactory METHODDECLARATORREST = new NonTerminalFactory("METHODDECLARATORREST");
        NonTerminalFactory INTERFACEMETHODORFIELDDECL = new NonTerminalFactory("INTERFACEMETHODORFIELDDECL");
        NonTerminalFactory BRACKETSOPT = new NonTerminalFactory("BRACKETSOPT");
        NonTerminalFactory STATEMENT = new NonTerminalFactory("STATEMENT");
        NonTerminalFactory MODIFIER = new NonTerminalFactory("MODIFIER");
        NonTerminalFactory ARRAYCREATORREST = new NonTerminalFactory("ARRAYCREATORREST");
        NonTerminalFactory FORMALPARAMETER = new NonTerminalFactory("FORMALPARAMETER");
        NonTerminalFactory N_COMMA_FORMALPARAMETER_0 = new NonTerminalFactory("N_COMMA_FORMALPARAMETER_0");
        NonTerminalFactory TYPE = new NonTerminalFactory("TYPE");
        NonTerminalFactory N_COMMA_EXPRESSION_0 = new NonTerminalFactory("N_COMMA_EXPRESSION_0");
        NonTerminalFactory MEMBERDECL = new NonTerminalFactory("MEMBERDECL");
        NonTerminalFactory SELECTOR = new NonTerminalFactory("SELECTOR");
        NonTerminalFactory VARIABLEINITIALIZER = new NonTerminalFactory("VARIABLEINITIALIZER");
        NonTerminalFactory N_COMMA_STATEMENTEXPRESSION_0 = new NonTerminalFactory("N_COMMA_STATEMENTEXPRESSION_0");
        NonTerminalFactory ASSIGNMENTOPERATOR = new NonTerminalFactory("ASSIGNMENTOPERATOR");
        NonTerminalFactory CONSTANTDECLARATOR = new NonTerminalFactory("CONSTANTDECLARATOR");
        NonTerminalFactory N_SELECTOR_0 = new NonTerminalFactory("N_SELECTOR_0");
        NonTerminalFactory CONSTRUCTORDECLARATORREST = new NonTerminalFactory("CONSTRUCTORDECLARATORREST");
        NonTerminalFactory VARIABLEDECLARATORSREST = new NonTerminalFactory("VARIABLEDECLARATORSREST");
        NonTerminalFactory TYPELIST = new NonTerminalFactory("TYPELIST");
        NonTerminalFactory VARIABLEDECLARATORS = new NonTerminalFactory("VARIABLEDECLARATORS");
        NonTerminalFactory BASICTYPE = new NonTerminalFactory("BASICTYPE");
        NonTerminalFactory INTERFACEMETHODORFIELDREST = new NonTerminalFactory("INTERFACEMETHODORFIELDREST");
        NonTerminalFactory STATEMENTEXPRESSION = new NonTerminalFactory("STATEMENTEXPRESSION");
        NonTerminalFactory N_INTERFACEBODYDECLARATION_0 = new NonTerminalFactory("N_INTERFACEBODYDECLARATION_0");
        NonTerminalFactory EXPRESSION = new NonTerminalFactory("EXPRESSION");
        NonTerminalFactory COMPILATIONUNIT = new NonTerminalFactory("COMPILATIONUNIT");
        NonTerminalFactory VOIDMETHODDECLARATORREST = new NonTerminalFactory("VOIDMETHODDECLARATORREST");
        NonTerminalFactory INTERFACEDECLARATION = new NonTerminalFactory("INTERFACEDECLARATION");
        NonTerminalFactory CLASSBODYDECLARATION = new NonTerminalFactory("CLASSBODYDECLARATION");
        NonTerminalFactory CONSTANTEXPRESSION = new NonTerminalFactory("CONSTANTEXPRESSION");
        NonTerminalFactory FORUPDATE = new NonTerminalFactory("FORUPDATE");
        NonTerminalFactory CLASSDECLARATION = new NonTerminalFactory("CLASSDECLARATION");
        NonTerminalFactory VARIABLEDECLARATORID = new NonTerminalFactory("VARIABLEDECLARATORID");
        NonTerminalFactory ARGUMENTS = new NonTerminalFactory("ARGUMENTS");
        NonTerminalFactory FORINIT = new NonTerminalFactory("FORINIT");
        NonTerminalFactory METHODBODY = new NonTerminalFactory("METHODBODY");
        NonTerminalFactory QUALIFIEDIDENTIFIER = new NonTerminalFactory("QUALIFIEDIDENTIFIER");
        NonTerminalFactory N_TYPEDECLARATION_0 = new NonTerminalFactory("N_TYPEDECLARATION_0");
        NonTerminalFactory IDENTIFIERSUFFIX = new NonTerminalFactory("IDENTIFIERSUFFIX");
        NonTerminalFactory N_BLOCKSTATEMENT_0 = new NonTerminalFactory("N_BLOCKSTATEMENT_0");
        NonTerminalFactory LOCALVARIABLEDECLARATIONSTATEMENT = new NonTerminalFactory("LOCALVARIABLEDECLARATIONSTATEMENT");
        NonTerminalFactory INTERFACEMETHODDECLARATORREST = new NonTerminalFactory("INTERFACEMETHODDECLARATORREST");
        NonTerminalFactory TYPEDECLARATION = new NonTerminalFactory("TYPEDECLARATION");
        NonTerminalFactory LITERAL = new NonTerminalFactory("LITERAL");
        NonTerminalFactory PRIMARY = new NonTerminalFactory("PRIMARY");
        NonTerminalFactory S = new NonTerminalFactory("S");
        NonTerminalFactory INTERFACEBODY = new NonTerminalFactory("INTERFACEBODY");
        NonTerminalFactory ARGUMENTSOPT = new NonTerminalFactory("ARGUMENTSOPT");
        NonTerminalFactory INTERFACEBODYDECLARATION = new NonTerminalFactory("INTERFACEBODYDECLARATION");
        NonTerminalFactory N_MODIFIER_0 = new NonTerminalFactory("N_MODIFIER_0");
        NonTerminalFactory METHODDECL = new NonTerminalFactory("METHODDECL");
        NonTerminalFactory BLOCKSTATEMENTS = new NonTerminalFactory("BLOCKSTATEMENTS");
        NonTerminalFactory CONSTANTDECLARATORSREST = new NonTerminalFactory("CONSTANTDECLARATORSREST");
        NonTerminalFactory PREFIXOP = new NonTerminalFactory("PREFIXOP");
        NonTerminalFactory EXPRESSION2REST = new NonTerminalFactory("EXPRESSION2REST");
        NonTerminalFactory BLOCK = new NonTerminalFactory("BLOCK");
        NonTerminalFactory BLOCKSTATEMENT = new NonTerminalFactory("BLOCKSTATEMENT");
        NonTerminalFactory VARIABLEDECLARATORREST = new NonTerminalFactory("VARIABLEDECLARATORREST");
        NonTerminalFactory N_IMPORTDECLARATION_0 = new NonTerminalFactory("N_IMPORTDECLARATION_0");
        NonTerminalFactory VOIDINTERFACEMETHODDECLARATORREST = new NonTerminalFactory("VOIDINTERFACEMETHODDECLARATORREST");
        NonTerminalFactory EXPRESSION1 = new NonTerminalFactory("EXPRESSION1");
        NonTerminalFactory INTERFACEMEMBERDECL = new NonTerminalFactory("INTERFACEMEMBERDECL");
        NonTerminalFactory IMPORTDECLARATION = new NonTerminalFactory("IMPORTDECLARATION");
        NonTerminalFactory PAREXPRESSION = new NonTerminalFactory("PAREXPRESSION");
        NonTerminalFactory EXPRESSION3 = new NonTerminalFactory("EXPRESSION3");
        NonTerminalFactory CLASSCREATORREST = new NonTerminalFactory("CLASSCREATORREST");
        NonTerminalFactory EXPRESSION2 = new NonTerminalFactory("EXPRESSION2");
        NonTerminalFactory VARIABLEDECLARATOR = new NonTerminalFactory("VARIABLEDECLARATOR");
        
        Map<String, SymbolState> state99 = new HashMap<String, SymbolState>();
        rules.put(99, state99);
        state99.put("RPAREN", new SymbolState(BRACKETSOPT,  2));
        Map<String, SymbolState> state185 = new HashMap<String, SymbolState>();
        rules.put(185, state185);
        state185.put("STRICTFP", new SymbolState(INTERFACEBODYDECLARATION,  1));
        Map<String, SymbolState> state78 = new HashMap<String, SymbolState>();
        rules.put(78, state78);
        state78.put("FOR", new SymbolState(STATEMENT,  3));
        Map<String, SymbolState> state91 = new HashMap<String, SymbolState>();
        rules.put(91, state91);
        state91.put("VOID", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state113 = new HashMap<String, SymbolState>();
        rules.put(113, state113);
        state113.put("COMMA", new SymbolState(1));
        Map<String, SymbolState> state45 = new HashMap<String, SymbolState>();
        rules.put(45, state45);
        state45.put("BYTE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state33 = new HashMap<String, SymbolState>();
        rules.put(33, state33);
        state33.put("STRICTFP", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state186 = new HashMap<String, SymbolState>();
        rules.put(186, state186);
        state186.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        state33.put("SHORT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state199 = new HashMap<String, SymbolState>();
        rules.put(199, state199);
        state199.put("STATEMENTEXPRESSION", new SymbolState(2));
        state91.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state24 = new HashMap<String, SymbolState>();
        rules.put(24, state24);
        state24.put("LBRACE", new SymbolState(EXPRESSION,  1));
        Map<String, SymbolState> state16 = new HashMap<String, SymbolState>();
        rules.put(16, state16);
        state16.put("STATIC", new SymbolState(TYPEDECLARATION,  1));
        Map<String, SymbolState> state70 = new HashMap<String, SymbolState>();
        rules.put(70, state70);
        state70.put("SHORT", new SymbolState(STATEMENT,  1));
        Map<String, SymbolState> state10 = new HashMap<String, SymbolState>();
        rules.put(10, state10);
        state10.put("FINAL", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state101 = new HashMap<String, SymbolState>();
        rules.put(101, state101);
        state101.put("ID", new SymbolState(3));
        Map<String, SymbolState> state42 = new HashMap<String, SymbolState>();
        rules.put(42, state42);
        state42.put("LBRACE", new SymbolState(FORMALPARAMETERS,  4));
        Map<String, SymbolState> state222 = new HashMap<String, SymbolState>();
        rules.put(222, state222);
        state222.put("DOUBLE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        Map<String, SymbolState> state125 = new HashMap<String, SymbolState>();
        rules.put(125, state125);
        state125.put("ID", new SymbolState(N_DOT_ID_0,  3));
        Map<String, SymbolState> state56 = new HashMap<String, SymbolState>();
        rules.put(56, state56);
        state56.put("FLOAT", new SymbolState(STATEMENTEXPRESSION,  1));
        Map<String, SymbolState> state21 = new HashMap<String, SymbolState>();
        rules.put(21, state21);
        state21.put("PUBLIC", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        Map<String, SymbolState> state13 = new HashMap<String, SymbolState>();
        rules.put(13, state13);
        state13.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state69 = new HashMap<String, SymbolState>();
        rules.put(69, state69);
        state69.put("CHAR", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        Map<String, SymbolState> state196 = new HashMap<String, SymbolState>();
        rules.put(196, state196);
        state196.put("BOOLEAN", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        Map<String, SymbolState> state203 = new HashMap<String, SymbolState>();
        rules.put(203, state203);
        state203.put("PRIVATE", new SymbolState(IMPORTDECLARATION,  4));
        Map<String, SymbolState> state218 = new HashMap<String, SymbolState>();
        rules.put(218, state218);
        state218.put("DO", new SymbolState(4));
        Map<String, SymbolState> state66 = new HashMap<String, SymbolState>();
        rules.put(66, state66);
        state66.put("N_COMMA_STATEMENTEXPRESSION_0", new SymbolState(5));
        state203.put("PUBLIC", new SymbolState(IMPORTDECLARATION,  4));
        Map<String, SymbolState> state124 = new HashMap<String, SymbolState>();
        rules.put(124, state124);
        state124.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state28 = new HashMap<String, SymbolState>();
        rules.put(28, state28);
        state28.put("FINAL", new SymbolState(6));
        Map<String, SymbolState> state153 = new HashMap<String, SymbolState>();
        rules.put(153, state153);
        state153.put("BOOLEAN", new SymbolState(INTERFACEMEMBERDECL,  3));
        Map<String, SymbolState> state204 = new HashMap<String, SymbolState>();
        rules.put(204, state204);
        state204.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state106 = new HashMap<String, SymbolState>();
        rules.put(106, state106);
        state106.put("FLOAT", new SymbolState(METHODDECL,  4));
        Map<String, SymbolState> state221 = new HashMap<String, SymbolState>();
        rules.put(221, state221);
        state221.put("CHAR", new SymbolState(FIELDDECL,  5));
        Map<String, SymbolState> state49 = new HashMap<String, SymbolState>();
        rules.put(49, state49);
        state49.put("FLOAT", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state79 = new HashMap<String, SymbolState>();
        rules.put(79, state79);
        state79.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state127 = new HashMap<String, SymbolState>();
        rules.put(127, state127);
        state127.put("FINAL", new SymbolState(BLOCKSTATEMENT,  1));
        Map<String, SymbolState> state139 = new HashMap<String, SymbolState>();
        rules.put(139, state139);
        state139.put("BECOMES", new SymbolState(7));
        Map<String, SymbolState> state52 = new HashMap<String, SymbolState>();
        rules.put(52, state52);
        state52.put("FLOAT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        Map<String, SymbolState> state200 = new HashMap<String, SymbolState>();
        rules.put(200, state200);
        state200.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        Map<String, SymbolState> state23 = new HashMap<String, SymbolState>();
        rules.put(23, state23);
        state23.put("PROTECTED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state160 = new HashMap<String, SymbolState>();
        rules.put(160, state160);
        state160.put("CLASS", new SymbolState(8));
        Map<String, SymbolState> state41 = new HashMap<String, SymbolState>();
        rules.put(41, state41);
        state41.put("STATIC", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state69.put("ID", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state21.put("STATIC", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        Map<String, SymbolState> state97 = new HashMap<String, SymbolState>();
        rules.put(97, state97);
        state97.put("SYNCHRONIZED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state51 = new HashMap<String, SymbolState>();
        rules.put(51, state51);
        state51.put("LONG", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state21.put("BOOLEAN", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        Map<String, SymbolState> state193 = new HashMap<String, SymbolState>();
        rules.put(193, state193);
        state193.put("LBRACE", new SymbolState(BLOCK,  3));
        state106.put("VOID", new SymbolState(METHODDECL,  4));
        state221.put("DOUBLE", new SymbolState(FIELDDECL,  5));
        state106.put("PUBLIC", new SymbolState(METHODDECL,  4));
        state186.put("VOID", new SymbolState(MEMBERDECL,  1));
        state56.put("INT", new SymbolState(STATEMENTEXPRESSION,  1));
        Map<String, SymbolState> state5 = new HashMap<String, SymbolState>();
        rules.put(5, state5);
        state5.put("COMMA", new SymbolState(9));
        Map<String, SymbolState> state167 = new HashMap<String, SymbolState>();
        rules.put(167, state167);
        state167.put("BLOCK", new SymbolState(10));
        Map<String, SymbolState> state98 = new HashMap<String, SymbolState>();
        rules.put(98, state98);
        state98.put("BOOLEAN", new SymbolState(11));
        Map<String, SymbolState> state133 = new HashMap<String, SymbolState>();
        rules.put(133, state133);
        state133.put("VOID", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        Map<String, SymbolState> state155 = new HashMap<String, SymbolState>();
        rules.put(155, state155);
        state155.put("BYTE", new SymbolState(N_MODIFIER_0,  0));
        state45.put("STATIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state190 = new HashMap<String, SymbolState>();
        rules.put(190, state190);
        state190.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state27 = new HashMap<String, SymbolState>();
        rules.put(27, state27);
        state27.put("INTERFACE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state92 = new HashMap<String, SymbolState>();
        rules.put(92, state92);
        state92.put("LPAREN", new SymbolState(12));
        state133.put("SYNCHRONIZED", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        Map<String, SymbolState> state214 = new HashMap<String, SymbolState>();
        rules.put(214, state214);
        state214.put("VOLATILE", new SymbolState(13));
        Map<String, SymbolState> state109 = new HashMap<String, SymbolState>();
        rules.put(109, state109);
        state109.put("FLOAT", new SymbolState(14));
        state186.put("SEMI", new SymbolState(MEMBERDECL,  1));
        state155.put("INT", new SymbolState(N_MODIFIER_0,  0));
        state133.put("FINAL", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state124.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        state97.put("STRICTFP", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state13.put("VOID", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state105 = new HashMap<String, SymbolState>();
        rules.put(105, state105);
        state105.put("N_COMMA_STATEMENTEXPRESSION_0", new SymbolState(5));
        Map<String, SymbolState> state183 = new HashMap<String, SymbolState>();
        rules.put(183, state183);
        state183.put("SYNCHRONIZED", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state75 = new HashMap<String, SymbolState>();
        rules.put(75, state75);
        state75.put("TRANSIENT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        Map<String, SymbolState> state29 = new HashMap<String, SymbolState>();
        rules.put(29, state29);
        state29.put("BYTE", new SymbolState(STATEMENT,  1));
        state98.put("INT", new SymbolState(15));
        Map<String, SymbolState> state87 = new HashMap<String, SymbolState>();
        rules.put(87, state87);
        state87.put("BOOLEAN", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state190.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state55 = new HashMap<String, SymbolState>();
        rules.put(55, state55);
        state55.put("PRIVATE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state19 = new HashMap<String, SymbolState>();
        rules.put(19, state19);
        state19.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state124.put("DOUBLE", new SymbolState(N_MODIFIER_0,  0));
        state55.put("FINAL", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state67 = new HashMap<String, SymbolState>();
        rules.put(67, state67);
        state67.put("PUBLIC", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state204.put("SEMI", new SymbolState(16));
        Map<String, SymbolState> state216 = new HashMap<String, SymbolState>();
        rules.put(216, state216);
        state216.put("ID", new SymbolState(17));
        Map<String, SymbolState> state148 = new HashMap<String, SymbolState>();
        rules.put(148, state148);
        state148.put("SYNCHRONIZED", new SymbolState(INTERFACEBODY,  3));
        Map<String, SymbolState> state64 = new HashMap<String, SymbolState>();
        rules.put(64, state64);
        state64.put("DOUBLE", new SymbolState(STATEMENT,  9));
        state19.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state45.put("LONG", new SymbolState(MODIFIER,  1));
        state91.put("SYNCHRONIZED", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state129 = new HashMap<String, SymbolState>();
        rules.put(129, state129);
        state129.put("INTERFACE", new SymbolState(CLASSBODY,  3));
        Map<String, SymbolState> state137 = new HashMap<String, SymbolState>();
        rules.put(137, state137);
        state137.put("SYNCHRONIZED", new SymbolState(CLASSBODYDECLARATION,  2));
        Map<String, SymbolState> state144 = new HashMap<String, SymbolState>();
        rules.put(144, state144);
        state144.put("SEMI", new SymbolState(METHODDECL,  2));
        Map<String, SymbolState> state82 = new HashMap<String, SymbolState>();
        rules.put(82, state82);
        state82.put("SHORT", new SymbolState(18));
        state193.put("TRANSIENT", new SymbolState(BLOCK,  3));
        Map<String, SymbolState> state174 = new HashMap<String, SymbolState>();
        rules.put(174, state174);
        state174.put("TRANSIENT", new SymbolState(INTERFACEDECLARATION,  3));
        Map<String, SymbolState> state63 = new HashMap<String, SymbolState>();
        rules.put(63, state63);
        state63.put("PROTECTED", new SymbolState(METHODDECLARATORREST,  4));
        state193.put("BOOLEAN", new SymbolState(BLOCK,  3));
        state56.put("COMMA", new SymbolState(STATEMENTEXPRESSION,  1));
        state55.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state28.put("BYTE", new SymbolState(19));
        state214.put("TYPE", new SymbolState(20));
        state5.put("RPAREN", new SymbolState(MORESTATEMENTEXPRESSIONS,  1));
        state203.put("EOF", new SymbolState(IMPORTDECLARATION,  4));
        Map<String, SymbolState> state181 = new HashMap<String, SymbolState>();
        rules.put(181, state181);
        state181.put("LBRACE", new SymbolState(21));
        state203.put("INTERFACE", new SymbolState(IMPORTDECLARATION,  4));
        state49.put("DOUBLE", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state30 = new HashMap<String, SymbolState>();
        rules.put(30, state30);
        state30.put("INT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state183.put("TRANSIENT", new SymbolState(MEMBERDECL,  1));
        state185.put("PROTECTED", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state97.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state200.put("N_DOT_ID_0", new SymbolState(22));
        Map<String, SymbolState> state184 = new HashMap<String, SymbolState>();
        rules.put(184, state184);
        state184.put("FLOAT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state78.put("RBRACE", new SymbolState(STATEMENT,  3));
        state10.put("DOUBLE", new SymbolState(METHODBODY,  1));
        state82.put("STATIC", new SymbolState(23));
        Map<String, SymbolState> state131 = new HashMap<String, SymbolState>();
        rules.put(131, state131);
        state131.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state114 = new HashMap<String, SymbolState>();
        rules.put(114, state114);
        state114.put("PIPE", new SymbolState(24));
        state199.put("RETURN", new SymbolState(25));
        state19.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state72 = new HashMap<String, SymbolState>();
        rules.put(72, state72);
        state72.put("PUBLIC", new SymbolState(N_TYPEDECLARATION_0,  2));
        Map<String, SymbolState> state128 = new HashMap<String, SymbolState>();
        rules.put(128, state128);
        state128.put("FOR", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state79.put("LBRACE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state74 = new HashMap<String, SymbolState>();
        rules.put(74, state74);
        state74.put("INT", new SymbolState(15));
        state183.put("CHAR", new SymbolState(MEMBERDECL,  1));
        state51.put("BYTE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state28.put("LBRACE", new SymbolState(26));
        state144.put("PRIVATE", new SymbolState(METHODDECL,  2));
        state52.put("SEMI", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        Map<String, SymbolState> state171 = new HashMap<String, SymbolState>();
        rules.put(171, state171);
        state171.put("FLOAT", new SymbolState(FIELDDECL,  5));
        state185.put("SEMI", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state106.put("INT", new SymbolState(METHODDECL,  4));
        state196.put("RETURN", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state98.put("BYTE", new SymbolState(19));
        Map<String, SymbolState> state169 = new HashMap<String, SymbolState>();
        rules.put(169, state169);
        state169.put("TRANSIENT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state33.put("FINAL", new SymbolState(MODIFIER,  1));
        state214.put("PRIVATE", new SymbolState(27));
        state148.put("CLASS", new SymbolState(INTERFACEBODY,  3));
        Map<String, SymbolState> state26 = new HashMap<String, SymbolState>();
        rules.put(26, state26);
        state26.put("N_BLOCKSTATEMENT_0", new SymbolState(28));
        state199.put("SEMI", new SymbolState(29));
        Map<String, SymbolState> state195 = new HashMap<String, SymbolState>();
        rules.put(195, state195);
        state195.put("LBRACE", new SymbolState(30));
        state55.put("STATIC", new SymbolState(MODIFIER,  1));
        state10.put("SHORT", new SymbolState(METHODBODY,  1));
        state128.put("LBRACE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        Map<String, SymbolState> state0 = new HashMap<String, SymbolState>();
        rules.put(0, state0);
        state0.put("N_IMPORTDECLARATION_0", new SymbolState(31));
        Map<String, SymbolState> state34 = new HashMap<String, SymbolState>();
        rules.put(34, state34);
        state34.put("CHAR", new SymbolState(METHODDECL,  2));
        state148.put("EOF", new SymbolState(INTERFACEBODY,  3));
        state21.put("VOLATILE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state82.put("PRIVATE", new SymbolState(27));
        state222.put("SEMI", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state133.put("RBRACE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state106.put("SHORT", new SymbolState(METHODDECL,  4));
        state56.put("CHAR", new SymbolState(STATEMENTEXPRESSION,  1));
        Map<String, SymbolState> state192 = new HashMap<String, SymbolState>();
        rules.put(192, state192);
        state192.put("CHAR", new SymbolState(STATEMENT,  8));
        state30.put("NATIVE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state16.put("FINAL", new SymbolState(TYPEDECLARATION,  1));
        Map<String, SymbolState> state170 = new HashMap<String, SymbolState>();
        rules.put(170, state170);
        state170.put("CLASS", new SymbolState(IMPORTDECLARATION,  6));
        state69.put("ABSTRACT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state171.put("BYTE", new SymbolState(FIELDDECL,  5));
        state82.put("TRANSIENT", new SymbolState(32));
        state87.put("SEMI", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state33.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state183.put("BYTE", new SymbolState(MEMBERDECL,  1));
        state148.put("VOLATILE", new SymbolState(INTERFACEBODY,  3));
        Map<String, SymbolState> state164 = new HashMap<String, SymbolState>();
        rules.put(164, state164);
        state164.put("SEMI", new SymbolState(N_COMMA_VARIABLEDECLARATOR_0,  3));
        state82.put("PUBLIC", new SymbolState(33));
        state24.put("RPAREN", new SymbolState(EXPRESSION,  1));
        state200.put("CONSTRUCTORDECLARATORREST", new SymbolState(34));
        state137.put("SEMI", new SymbolState(CLASSBODYDECLARATION,  2));
        Map<String, SymbolState> state20 = new HashMap<String, SymbolState>();
        rules.put(20, state20);
        state20.put("ID", new SymbolState(35));
        state70.put("FINAL", new SymbolState(STATEMENT,  1));
        state0.put("TRANSIENT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state161 = new HashMap<String, SymbolState>();
        rules.put(161, state161);
        state161.put("SEMI", new SymbolState(CONSTANTDECLARATORREST,  3));
        state74.put("BASICTYPE", new SymbolState(36));
        state169.put("ABSTRACT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state78.put("WHILE", new SymbolState(STATEMENT,  3));
        state128.put("CHAR", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        Map<String, SymbolState> state111 = new HashMap<String, SymbolState>();
        rules.put(111, state111);
        state111.put("METHODBODY", new SymbolState(37));
        state222.put("FINAL", new SymbolState(INTERFACEBODYDECLARATION,  2));
        Map<String, SymbolState> state177 = new HashMap<String, SymbolState>();
        rules.put(177, state177);
        state177.put("RETURN", new SymbolState(STATEMENT,  2));
        state82.put("BASICTYPE", new SymbolState(38));
        state30.put("SHORT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        Map<String, SymbolState> state47 = new HashMap<String, SymbolState>();
        rules.put(47, state47);
        state47.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state45.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state187 = new HashMap<String, SymbolState>();
        rules.put(187, state187);
        state187.put("CLASSBODY", new SymbolState(39));
        state155.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state192.put("INT", new SymbolState(STATEMENT,  8));
        state131.put("PRIVATE", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state165 = new HashMap<String, SymbolState>();
        rules.put(165, state165);
        state165.put("FORINIT", new SymbolState(40));
        Map<String, SymbolState> state202 = new HashMap<String, SymbolState>();
        rules.put(202, state202);
        state202.put("FINAL", new SymbolState(STATEMENT,  5));
        state26.put("PIPE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state148.put("SEMI", new SymbolState(INTERFACEBODY,  3));
        state186.put("BYTE", new SymbolState(MEMBERDECL,  1));
        state101.put("BASICTYPE", new SymbolState(36));
        state144.put("RBRACE", new SymbolState(METHODDECL,  2));
        state72.put("STATIC", new SymbolState(N_TYPEDECLARATION_0,  2));
        state186.put("FINAL", new SymbolState(MEMBERDECL,  1));
        state127.put("RBRACE", new SymbolState(BLOCKSTATEMENT,  1));
        state153.put("SEMI", new SymbolState(INTERFACEMEMBERDECL,  3));
        state124.put("INTERFACEBODYDECLARATION", new SymbolState(41));
        Map<String, SymbolState> state191 = new HashMap<String, SymbolState>();
        rules.put(191, state191);
        state191.put("RPAREN", new SymbolState(42));
        Map<String, SymbolState> state71 = new HashMap<String, SymbolState>();
        rules.put(71, state71);
        state71.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state67.put("STATIC", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state13.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state75.put("FINAL", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state192.put("DO", new SymbolState(STATEMENT,  8));
        state78.put("DOUBLE", new SymbolState(STATEMENT,  3));
        Map<String, SymbolState> state36 = new HashMap<String, SymbolState>();
        rules.put(36, state36);
        state36.put("ID", new SymbolState(TYPE,  1));
        Map<String, SymbolState> state12 = new HashMap<String, SymbolState>();
        rules.put(12, state12);
        state12.put("EXPRESSION", new SymbolState(43));
        state34.put("PUBLIC", new SymbolState(METHODDECL,  2));
        Map<String, SymbolState> state11 = new HashMap<String, SymbolState>();
        rules.put(11, state11);
        state11.put("COMMA", new SymbolState(BASICTYPE,  1));
        state51.put("SHORT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        Map<String, SymbolState> state126 = new HashMap<String, SymbolState>();
        rules.put(126, state126);
        state126.put("CHAR", new SymbolState(N_MODIFIER_0,  2));
        state52.put("FINAL", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state41.put("ABSTRACT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        Map<String, SymbolState> state116 = new HashMap<String, SymbolState>();
        rules.put(116, state116);
        state116.put("ID", new SymbolState(MODIFIER,  1));
        state187.put("LBRACE", new SymbolState(21));
        state64.put("RETURN", new SymbolState(STATEMENT,  9));
        state71.put("STATIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state154 = new HashMap<String, SymbolState>();
        rules.put(154, state154);
        state154.put("VOLATILE", new SymbolState(N_TYPEDECLARATION_0,  0));
        Map<String, SymbolState> state93 = new HashMap<String, SymbolState>();
        rules.put(93, state93);
        state93.put("RPAREN", new SymbolState(44));
        Map<String, SymbolState> state135 = new HashMap<String, SymbolState>();
        rules.put(135, state135);
        state135.put("INTERFACE", new SymbolState(INTERFACEDECLARATION,  5));
        Map<String, SymbolState> state206 = new HashMap<String, SymbolState>();
        rules.put(206, state206);
        state206.put("COMMA", new SymbolState(N_COMMA_CONSTANTDECLARATOR_0,  0));
        state75.put("NATIVE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state170.put("STRICTFP", new SymbolState(IMPORTDECLARATION,  6));
        state28.put("RBRACE", new SymbolState(BLOCKSTATEMENTS,  1));
        state135.put("SYNCHRONIZED", new SymbolState(INTERFACEDECLARATION,  5));
        state116.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state82.put("NATIVE", new SymbolState(45));
        Map<String, SymbolState> state220 = new HashMap<String, SymbolState>();
        rules.put(220, state220);
        state220.put("FINAL", new SymbolState(CLASSDECLARATION,  3));
        state97.put("VOLATILE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state166 = new HashMap<String, SymbolState>();
        rules.put(166, state166);
        state166.put("DOUBLE", new SymbolState(INTERFACEMEMBERDECL,  1));
        Map<String, SymbolState> state50 = new HashMap<String, SymbolState>();
        rules.put(50, state50);
        state50.put("NATIVE", new SymbolState(MODIFIER,  1));
        state148.put("STRICTFP", new SymbolState(INTERFACEBODY,  3));
        Map<String, SymbolState> state134 = new HashMap<String, SymbolState>();
        rules.put(134, state134);
        state134.put("BYTE", new SymbolState(19));
        Map<String, SymbolState> state150 = new HashMap<String, SymbolState>();
        rules.put(150, state150);
        state150.put("COMMA", new SymbolState(N_COMMA_TYPE_0,  3));
        state28.put("RETURN", new SymbolState(25));
        state74.put("CHAR", new SymbolState(46));
        state56.put("BOOLEAN", new SymbolState(STATEMENTEXPRESSION,  1));
        state101.put("FLOAT", new SymbolState(14));
        state124.put("FLOAT", new SymbolState(N_MODIFIER_0,  0));
        state171.put("VOLATILE", new SymbolState(FIELDDECL,  5));
        Map<String, SymbolState> state219 = new HashMap<String, SymbolState>();
        rules.put(219, state219);
        state219.put("ID", new SymbolState(3));
        state214.put("STRICTFP", new SymbolState(47));
        Map<String, SymbolState> state3 = new HashMap<String, SymbolState>();
        rules.put(3, state3);
        state3.put("LBRACE", new SymbolState(N_DOT_ID_0,  0));
        Map<String, SymbolState> state123 = new HashMap<String, SymbolState>();
        rules.put(123, state123);
        state123.put("PROTECTED", new SymbolState(CLASSDECLARATION,  5));
        state3.put("LBRACKET", new SymbolState(N_DOT_ID_0,  0));
        Map<String, SymbolState> state37 = new HashMap<String, SymbolState>();
        rules.put(37, state37);
        state37.put("FINAL", new SymbolState(METHODDECL,  4));
        state33.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state6 = new HashMap<String, SymbolState>();
        rules.put(6, state6);
        state6.put("DOUBLE", new SymbolState(48));
        state171.put("CHAR", new SymbolState(FIELDDECL,  5));
        state13.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state185.put("BOOLEAN", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state221.put("TRANSIENT", new SymbolState(FIELDDECL,  5));
        Map<String, SymbolState> state159 = new HashMap<String, SymbolState>();
        rules.put(159, state159);
        state159.put("STRICTFP", new SymbolState(TYPEDECLARATION,  2));
        state13.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state24.put("FINAL", new SymbolState(EXPRESSION,  1));
        state21.put("RBRACE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state183.put("VOID", new SymbolState(MEMBERDECL,  1));
        state193.put("STATIC", new SymbolState(BLOCK,  3));
        Map<String, SymbolState> state172 = new HashMap<String, SymbolState>();
        rules.put(172, state172);
        state172.put("SEMI", new SymbolState(49));
        state126.put("PUBLIC", new SymbolState(N_MODIFIER_0,  2));
        state214.put("ABSTRACT", new SymbolState(50));
        Map<String, SymbolState> state35 = new HashMap<String, SymbolState>();
        rules.put(35, state35);
        state35.put("INTERFACEMETHODDECLARATORREST", new SymbolState(51));
        state165.put("BYTE", new SymbolState(19));
        state167.put("METHODBODY", new SymbolState(52));
        state181.put("EXTENDS", new SymbolState(53));
        state78.put("BOOLEAN", new SymbolState(STATEMENT,  3));
        state50.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state116.put("FLOAT", new SymbolState(MODIFIER,  1));
        state166.put("LONG", new SymbolState(INTERFACEMEMBERDECL,  1));
        state153.put("FLOAT", new SymbolState(INTERFACEMEMBERDECL,  3));
        Map<String, SymbolState> state32 = new HashMap<String, SymbolState>();
        rules.put(32, state32);
        state32.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state44 = new HashMap<String, SymbolState>();
        rules.put(44, state44);
        state44.put("FOR", new SymbolState(54));
        state204.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state192.put("ID", new SymbolState(STATEMENT,  8));
        Map<String, SymbolState> state68 = new HashMap<String, SymbolState>();
        rules.put(68, state68);
        state68.put("WHILE", new SymbolState(PAREXPRESSION,  3));
        state49.put("ID", new SymbolState(METHODBODY,  1));
        state214.put("PROTECTED", new SymbolState(55));
        state82.put("PROTECTED", new SymbolState(55));
        Map<String, SymbolState> state2 = new HashMap<String, SymbolState>();
        rules.put(2, state2);
        state2.put("CHAR", new SymbolState(STATEMENT,  1));
        state37.put("SEMI", new SymbolState(METHODDECL,  4));
        state185.put("ID", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state55.put("NATIVE", new SymbolState(MODIFIER,  1));
        state87.put("RBRACE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        Map<String, SymbolState> state215 = new HashMap<String, SymbolState>();
        rules.put(215, state215);
        state215.put("EXPRESSION", new SymbolState(56));
        state153.put("BYTE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state116.put("BYTE", new SymbolState(MODIFIER,  1));
        state0.put("NATIVE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state183.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state155.put("CHAR", new SymbolState(N_MODIFIER_0,  0));
        state2.put("FINAL", new SymbolState(STATEMENT,  1));
        Map<String, SymbolState> state142 = new HashMap<String, SymbolState>();
        rules.put(142, state142);
        state142.put("COMMA", new SymbolState(FORMALPARAMETER,  2));
        state72.put("FINAL", new SymbolState(N_TYPEDECLARATION_0,  2));
        state116.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state51.put("NATIVE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state125.put("DOT", new SymbolState(N_DOT_ID_0,  3));
        state144.put("ABSTRACT", new SymbolState(METHODDECL,  2));
        Map<String, SymbolState> state146 = new HashMap<String, SymbolState>();
        rules.put(146, state146);
        state146.put("STAR", new SymbolState(57));
        state71.put("SEMI", new SymbolState(MODIFIER,  1));
        state36.put("IMPLEMENTS", new SymbolState(TYPE,  1));
        state199.put("WHILE", new SymbolState(58));
        state170.put("PRIVATE", new SymbolState(IMPORTDECLARATION,  6));
        state63.put("CHAR", new SymbolState(METHODDECLARATORREST,  4));
        state41.put("ID", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state55.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state123.put("EOF", new SymbolState(CLASSDECLARATION,  5));
        state128.put("WHILE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state186.put("STATIC", new SymbolState(MEMBERDECL,  1));
        state10.put("BOOLEAN", new SymbolState(METHODBODY,  1));
        state153.put("SYNCHRONIZED", new SymbolState(INTERFACEMEMBERDECL,  3));
        state174.put("NATIVE", new SymbolState(INTERFACEDECLARATION,  3));
        state51.put("PRIVATE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state24.put("SHORT", new SymbolState(EXPRESSION,  1));
        Map<String, SymbolState> state103 = new HashMap<String, SymbolState>();
        rules.put(103, state103);
        state103.put("BRACKETSOPT", new SymbolState(59));
        state174.put("STATIC", new SymbolState(INTERFACEDECLARATION,  3));
        state204.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        state193.put("SHORT", new SymbolState(BLOCK,  3));
        state221.put("ID", new SymbolState(FIELDDECL,  5));
        state200.put("ID", new SymbolState(N_DOT_ID_0,  0));
        state116.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state159.put("FINAL", new SymbolState(TYPEDECLARATION,  2));
        state214.put("NATIVE", new SymbolState(45));
        state219.put("CHAR", new SymbolState(46));
        state28.put("FOR", new SymbolState(54));
        Map<String, SymbolState> state211 = new HashMap<String, SymbolState>();
        rules.put(211, state211);
        state211.put("EXPRESSION", new SymbolState(60));
        state101.put("BOOLEAN", new SymbolState(11));
        state56.put("WHILE", new SymbolState(STATEMENTEXPRESSION,  1));
        state21.put("PROTECTED", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state36.put("LBRACE", new SymbolState(TYPE,  1));
        state159.put("SEMI", new SymbolState(TYPEDECLARATION,  2));
        state202.put("FOR", new SymbolState(STATEMENT,  5));
        state72.put("NATIVE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state0.put("STATIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state82.put("QUALIFIEDIDENTIFIER", new SymbolState(61));
        state183.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        state13.put("SEMI", new SymbolState(MODIFIER,  1));
        state131.put("PROTECTED", new SymbolState(CLASSDECLARATION,  5));
        state97.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state144.put("VOID", new SymbolState(METHODDECL,  2));
        state50.put("CLASS", new SymbolState(MODIFIER,  1));
        state23.put("CLASS", new SymbolState(MODIFIER,  1));
        state47.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state24.put("BYTE", new SymbolState(EXPRESSION,  1));
        state137.put("PUBLIC", new SymbolState(CLASSBODYDECLARATION,  2));
        state214.put("STATIC", new SymbolState(23));
        state125.put("LBRACE", new SymbolState(N_DOT_ID_0,  3));
        state169.put("VOLATILE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state153.put("LONG", new SymbolState(INTERFACEMEMBERDECL,  3));
        state183.put("LONG", new SymbolState(MEMBERDECL,  1));
        state0.put("FINAL", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state116.put("VOID", new SymbolState(MODIFIER,  1));
        state131.put("VOLATILE", new SymbolState(CLASSDECLARATION,  5));
        state35.put("BRACKETSOPT", new SymbolState(62));
        state16.put("NATIVE", new SymbolState(TYPEDECLARATION,  1));
        state3.put("ID", new SymbolState(N_DOT_ID_0,  0));
        state170.put("PROTECTED", new SymbolState(IMPORTDECLARATION,  6));
        state30.put("TRANSIENT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        Map<String, SymbolState> state84 = new HashMap<String, SymbolState>();
        rules.put(84, state84);
        state84.put("SHORT", new SymbolState(18));
        state32.put("SEMI", new SymbolState(MODIFIER,  1));
        state63.put("SYNCHRONIZED", new SymbolState(METHODDECLARATORREST,  4));
        state52.put("NATIVE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state219.put("BASICTYPE", new SymbolState(36));
        state82.put("STRICTFP", new SymbolState(47));
        Map<String, SymbolState> state31 = new HashMap<String, SymbolState>();
        rules.put(31, state31);
        state31.put("FINAL", new SymbolState(N_TYPEDECLARATION_0,  0));
        state192.put("BYTE", new SymbolState(STATEMENT,  8));
        Map<String, SymbolState> state151 = new HashMap<String, SymbolState>();
        rules.put(151, state151);
        state151.put("RPAREN", new SymbolState(63));
        state44.put("STATEMENT", new SymbolState(64));
        state116.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state55.put("SHORT", new SymbolState(MODIFIER,  1));
        state183.put("SEMI", new SymbolState(MEMBERDECL,  1));
        state129.put("CLASS", new SymbolState(CLASSBODY,  3));
        state106.put("STATIC", new SymbolState(METHODDECL,  4));
        state222.put("PROTECTED", new SymbolState(INTERFACEBODYDECLARATION,  2));
        Map<String, SymbolState> state83 = new HashMap<String, SymbolState>();
        rules.put(83, state83);
        state83.put("VARIABLEDECLARATOR", new SymbolState(65));
        state165.put("STATEMENTEXPRESSION", new SymbolState(66));
        state184.put("INT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        Map<String, SymbolState> state176 = new HashMap<String, SymbolState>();
        rules.put(176, state176);
        state176.put("BRACKETSOPT", new SymbolState(62));
        state154.put("IMPORTDECLARATION", new SymbolState(67));
        state37.put("TRANSIENT", new SymbolState(METHODDECL,  4));
        state127.put("SHORT", new SymbolState(BLOCKSTATEMENT,  1));
        state177.put("INT", new SymbolState(STATEMENT,  2));
        Map<String, SymbolState> state43 = new HashMap<String, SymbolState>();
        rules.put(43, state43);
        state43.put("RPAREN", new SymbolState(68));
        state127.put("FOR", new SymbolState(BLOCKSTATEMENT,  1));
        state26.put("RETURN", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        Map<String, SymbolState> state194 = new HashMap<String, SymbolState>();
        rules.put(194, state194);
        state194.put("LBRACE", new SymbolState(STATEMENT,  3));
        state49.put("PROTECTED", new SymbolState(METHODBODY,  1));
        state78.put("LBRACE", new SymbolState(STATEMENT,  3));
        state126.put("SEMI", new SymbolState(N_MODIFIER_0,  2));
        state21.put("CHAR", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state33.put("PUBLIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state100 = new HashMap<String, SymbolState>();
        rules.put(100, state100);
        state100.put("SEMI", new SymbolState(69));
        state109.put("BASICTYPE", new SymbolState(36));
        state153.put("PRIVATE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state72.put("TRANSIENT", new SymbolState(N_TYPEDECLARATION_0,  2));
        state67.put("PROTECTED", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state116.put("FINAL", new SymbolState(MODIFIER,  1));
        state199.put("BLOCK", new SymbolState(70));
        state192.put("DOUBLE", new SymbolState(STATEMENT,  8));
        state16.put("PRIVATE", new SymbolState(TYPEDECLARATION,  1));
        state150.put("LBRACE", new SymbolState(N_COMMA_TYPE_0,  3));
        state32.put("STATIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state175 = new HashMap<String, SymbolState>();
        rules.put(175, state175);
        state175.put("COMMA", new SymbolState(FORMALPARAMETER,  3));
        state47.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state196.put("SHORT", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state196.put("FINAL", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state42.put("RPAREN", new SymbolState(FORMALPARAMETERS,  4));
        state169.put("PRIVATE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state75.put("SHORT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state31.put("STATIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state10.put("CHAR", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state217 = new HashMap<String, SymbolState>();
        rules.put(217, state217);
        state217.put("SEMI", new SymbolState(FORINIT,  3));
        state82.put("FINAL", new SymbolState(71));
        state193.put("RBRACE", new SymbolState(BLOCK,  3));
        Map<String, SymbolState> state201 = new HashMap<String, SymbolState>();
        rules.put(201, state201);
        state201.put("COMMA", new SymbolState(VARIABLEDECLARATOR,  2));
        Map<String, SymbolState> state178 = new HashMap<String, SymbolState>();
        rules.put(178, state178);
        state178.put("COMMA", new SymbolState(VARIABLEDECLARATORREST,  2));
        state27.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state63.put("VOID", new SymbolState(METHODDECLARATORREST,  4));
        state214.put("INT", new SymbolState(15));
        state75.put("STRICTFP", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        Map<String, SymbolState> state120 = new HashMap<String, SymbolState>();
        rules.put(120, state120);
        state120.put("EXPRESSION", new SymbolState(56));
        Map<String, SymbolState> state89 = new HashMap<String, SymbolState>();
        rules.put(89, state89);
        state89.put("FINAL", new SymbolState(BLOCKSTATEMENT,  1));
        state71.put("CHAR", new SymbolState(MODIFIER,  1));
        state183.put("STRICTFP", new SymbolState(MEMBERDECL,  1));
        state124.put("LONG", new SymbolState(N_MODIFIER_0,  0));
        state153.put("CHAR", new SymbolState(INTERFACEMEMBERDECL,  3));
        state172.put("LBRACE", new SymbolState(26));
        state204.put("TYPEDECLARATION", new SymbolState(72));
        Map<String, SymbolState> state88 = new HashMap<String, SymbolState>();
        rules.put(88, state88);
        state88.put("BECOMES", new SymbolState(7));
        state154.put("TRANSIENT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state98.put("DOUBLE", new SymbolState(48));
        state144.put("FLOAT", new SymbolState(METHODDECL,  2));
        state47.put("STATIC", new SymbolState(MODIFIER,  1));
        state75.put("VOLATILE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state52.put("STRICTFP", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state124.put("ID", new SymbolState(N_MODIFIER_0,  0));
        state169.put("VOID", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state128.put("BYTE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state220.put("INTERFACE", new SymbolState(CLASSDECLARATION,  3));
        state69.put("VOID", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        Map<String, SymbolState> state212 = new HashMap<String, SymbolState>();
        rules.put(212, state212);
        state212.put("BYTE", new SymbolState(19));
        Map<String, SymbolState> state168 = new HashMap<String, SymbolState>();
        rules.put(168, state168);
        state168.put("N_DOT_ID_0", new SymbolState(22));
        state97.put("ABSTRACT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state69.put("SYNCHRONIZED", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state31.put("IMPORTDECLARATION", new SymbolState(67));
        state37.put("CHAR", new SymbolState(METHODDECL,  4));
        state126.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  2));
        state144.put("STRICTFP", new SymbolState(METHODDECL,  2));
        state123.put("CLASS", new SymbolState(CLASSDECLARATION,  5));
        state69.put("BYTE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state160.put("NATIVE", new SymbolState(45));
        state0.put("COMPILATIONUNIT", new SymbolState(73));
        state41.put("VOLATILE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state184.put("SYNCHRONIZED", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state222.put("PRIVATE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state41.put("BOOLEAN", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state185.put("LONG", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state203.put("SYNCHRONIZED", new SymbolState(IMPORTDECLARATION,  4));
        Map<String, SymbolState> state39 = new HashMap<String, SymbolState>();
        rules.put(39, state39);
        state39.put("PRIVATE", new SymbolState(CLASSDECLARATION,  7));
        state84.put("FINAL", new SymbolState(74));
        Map<String, SymbolState> state18 = new HashMap<String, SymbolState>();
        rules.put(18, state18);
        state18.put("ID", new SymbolState(BASICTYPE,  1));
        state10.put("RBRACE", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state58 = new HashMap<String, SymbolState>();
        rules.put(58, state58);
        state58.put("LPAREN", new SymbolState(12));
        state21.put("LONG", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state24.put("INT", new SymbolState(EXPRESSION,  1));
        state203.put("STRICTFP", new SymbolState(IMPORTDECLARATION,  4));
        state193.put("PRIVATE", new SymbolState(BLOCK,  3));
        state222.put("VOLATILE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state67.put("SYNCHRONIZED", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state2.put("FOR", new SymbolState(STATEMENT,  1));
        Map<String, SymbolState> state102 = new HashMap<String, SymbolState>();
        rules.put(102, state102);
        state102.put("SEMI", new SymbolState(75));
        state92.put("PAREXPRESSION", new SymbolState(76));
        Map<String, SymbolState> state107 = new HashMap<String, SymbolState>();
        rules.put(107, state107);
        state107.put("LBRACE", new SymbolState(30));
        Map<String, SymbolState> state61 = new HashMap<String, SymbolState>();
        rules.put(61, state61);
        state61.put("LBRACKET", new SymbolState(77));
        state89.put("SHORT", new SymbolState(BLOCKSTATEMENT,  1));
        state199.put("EXPRESSION", new SymbolState(56));
        state63.put("BYTE", new SymbolState(METHODDECLARATORREST,  4));
        state153.put("STRICTFP", new SymbolState(INTERFACEMEMBERDECL,  3));
        state135.put("PROTECTED", new SymbolState(INTERFACEDECLARATION,  5));
        state222.put("ID", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state34.put("PROTECTED", new SymbolState(METHODDECL,  2));
        Map<String, SymbolState> state180 = new HashMap<String, SymbolState>();
        rules.put(180, state180);
        state180.put("CLASS", new SymbolState(TYPEDECLARATION,  2));
        state133.put("NATIVE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        Map<String, SymbolState> state53 = new HashMap<String, SymbolState>();
        rules.put(53, state53);
        state53.put("CHAR", new SymbolState(46));
        state170.put("ABSTRACT", new SymbolState(IMPORTDECLARATION,  6));
        state75.put("PROTECTED", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state186.put("STRICTFP", new SymbolState(MEMBERDECL,  1));
        state31.put("TRANSIENT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state13.put("CHAR", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state136 = new HashMap<String, SymbolState>();
        rules.put(136, state136);
        state136.put("COMMA", new SymbolState(N_COMMA_TYPE_0,  0));
        state75.put("PRIVATE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state137.put("SHORT", new SymbolState(CLASSBODYDECLARATION,  2));
        state30.put("PRIVATE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state39.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  7));
        state66.put("COMMA", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  0));
        state10.put("PROTECTED", new SymbolState(METHODBODY,  1));
        state155.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state119 = new HashMap<String, SymbolState>();
        rules.put(119, state119);
        state119.put("SEMI", new SymbolState(78));
        state219.put("SHORT", new SymbolState(18));
        state133.put("VOLATILE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state56.put("FOR", new SymbolState(STATEMENTEXPRESSION,  1));
        state16.put("PUBLIC", new SymbolState(TYPEDECLARATION,  1));
        state0.put("ABSTRACT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state2.put("SHORT", new SymbolState(STATEMENT,  1));
        state70.put("INT", new SymbolState(STATEMENT,  1));
        state204.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state16.put("PROTECTED", new SymbolState(TYPEDECLARATION,  1));
        state131.put("STATIC", new SymbolState(CLASSDECLARATION,  5));
        state52.put("BOOLEAN", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state13.put("NATIVE", new SymbolState(MODIFIER,  1));
        state53.put("INT", new SymbolState(15));
        state166.put("STRICTFP", new SymbolState(INTERFACEMEMBERDECL,  1));
        state184.put("CHAR", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state41.put("FINAL", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state134.put("LONG", new SymbolState(79));
        state148.put("PRIVATE", new SymbolState(INTERFACEBODY,  3));
        state134.put("TYPELIST", new SymbolState(80));
        state23.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state23.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state202.put("LBRACE", new SymbolState(STATEMENT,  5));
        state70.put("CHAR", new SymbolState(STATEMENT,  1));
        state165.put("SHORT", new SymbolState(18));
        Map<String, SymbolState> state4 = new HashMap<String, SymbolState>();
        rules.put(4, state4);
        state4.put("RETURN", new SymbolState(25));
        state29.put("RBRACE", new SymbolState(STATEMENT,  1));
        state193.put("DOUBLE", new SymbolState(BLOCK,  3));
        state171.put("RBRACE", new SymbolState(FIELDDECL,  5));
        state44.put("STATEMENTEXPRESSION", new SymbolState(2));
        state78.put("SEMI", new SymbolState(STATEMENT,  3));
        state220.put("EOF", new SymbolState(CLASSDECLARATION,  3));
        state106.put("PROTECTED", new SymbolState(METHODDECL,  4));
        state221.put("PUBLIC", new SymbolState(FIELDDECL,  5));
        Map<String, SymbolState> state143 = new HashMap<String, SymbolState>();
        rules.put(143, state143);
        state143.put("BRACKETSOPT", new SymbolState(81));
        state44.put("EXPRESSION", new SymbolState(56));
        state155.put("N_MODIFIER_0", new SymbolState(82));
        state52.put("LONG", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state165.put("TYPE", new SymbolState(83));
        state51.put("STATIC", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state33.put("LONG", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state117 = new HashMap<String, SymbolState>();
        rules.put(117, state117);
        state117.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state24.put("CHAR", new SymbolState(EXPRESSION,  1));
        state26.put("SEMI", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state89.put("INT", new SymbolState(BLOCKSTATEMENT,  1));
        state127.put("FLOAT", new SymbolState(BLOCKSTATEMENT,  1));
        state160.put("ABSTRACT", new SymbolState(50));
        state144.put("NATIVE", new SymbolState(METHODDECL,  2));
        state82.put("FLOAT", new SymbolState(14));
        state75.put("RBRACE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state153.put("VOLATILE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state75.put("VOID", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state10.put("ABSTRACT", new SymbolState(METHODBODY,  1));
        state159.put("INTERFACE", new SymbolState(TYPEDECLARATION,  2));
        state153.put("RBRACE", new SymbolState(INTERFACEMEMBERDECL,  3));
        Map<String, SymbolState> state94 = new HashMap<String, SymbolState>();
        rules.put(94, state94);
        state94.put("SEMI", new SymbolState(N_COMMA_CONSTANTDECLARATOR_0,  3));
        Map<String, SymbolState> state210 = new HashMap<String, SymbolState>();
        rules.put(210, state210);
        state210.put("COMMA", new SymbolState(N_COMMA_FORMALPARAMETER_0,  3));
        state174.put("CLASS", new SymbolState(INTERFACEDECLARATION,  3));
        state180.put("STATIC", new SymbolState(TYPEDECLARATION,  2));
        state72.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state191.put("COMMA", new SymbolState(84));
        state0.put("PUBLIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state160.put("STATIC", new SymbolState(23));
        state53.put("SHORT", new SymbolState(18));
        state63.put("SHORT", new SymbolState(METHODDECLARATORREST,  4));
        state16.put("ABSTRACT", new SymbolState(TYPEDECLARATION,  1));
        state21.put("FINAL", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state69.put("SEMI", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state185.put("SHORT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state214.put("ID", new SymbolState(3));
        state160.put("FINAL", new SymbolState(71));
        state91.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state134.put("ID", new SymbolState(3));
        state174.put("ABSTRACT", new SymbolState(INTERFACEDECLARATION,  3));
        state131.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  5));
        state87.put("SHORT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state199.put("LBRACE", new SymbolState(26));
        state31.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  0));
        state30.put("ID", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state160.put("PRIVATE", new SymbolState(27));
        state28.put("SEMI", new SymbolState(29));
        state36.put("COMMA", new SymbolState(TYPE,  1));
        state84.put("FLOAT", new SymbolState(14));
        state64.put("LBRACE", new SymbolState(STATEMENT,  9));
        Map<String, SymbolState> state130 = new HashMap<String, SymbolState>();
        rules.put(130, state130);
        state130.put("VARIABLEDECLARATORREST", new SymbolState(85));
        state192.put("WHILE", new SymbolState(STATEMENT,  8));
        state74.put("ID", new SymbolState(3));
        state202.put("LONG", new SymbolState(STATEMENT,  5));
        state29.put("FINAL", new SymbolState(STATEMENT,  1));
        state169.put("RBRACE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state129.put("ABSTRACT", new SymbolState(CLASSBODY,  3));
        state21.put("PRIVATE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state68.put("SEMI", new SymbolState(PAREXPRESSION,  3));
        state101.put("CHAR", new SymbolState(46));
        state27.put("ID", new SymbolState(MODIFIER,  1));
        state13.put("LONG", new SymbolState(MODIFIER,  1));
        state32.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state21.put("TRANSIENT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state222.put("VOID", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state193.put("VOID", new SymbolState(BLOCK,  3));
        state135.put("PUBLIC", new SymbolState(INTERFACEDECLARATION,  5));
        state37.put("DOUBLE", new SymbolState(METHODDECL,  4));
        state183.put("SHORT", new SymbolState(MEMBERDECL,  1));
        state184.put("PRIVATE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state74.put("TYPE", new SymbolState(86));
        state177.put("DO", new SymbolState(STATEMENT,  2));
        Map<String, SymbolState> state132 = new HashMap<String, SymbolState>();
        rules.put(132, state132);
        state132.put("SEMI", new SymbolState(87));
        Map<String, SymbolState> state138 = new HashMap<String, SymbolState>();
        rules.put(138, state138);
        state138.put("ID", new SymbolState(88));
        state28.put("STATEMENT", new SymbolState(89));
        state33.put("STATIC", new SymbolState(MODIFIER,  1));
        state185.put("BYTE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state69.put("INT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state6.put("INT", new SymbolState(15));
        state75.put("CHAR", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state89.put("BYTE", new SymbolState(BLOCKSTATEMENT,  1));
        state63.put("STRICTFP", new SymbolState(METHODDECLARATORREST,  4));
        state221.put("INT", new SymbolState(FIELDDECL,  5));
        state82.put("VOID", new SymbolState(90));
        state3.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state49.put("INT", new SymbolState(METHODBODY,  1));
        state4.put("FOR", new SymbolState(54));
        state82.put("FIELDDECL", new SymbolState(91));
        state155.put("ID", new SymbolState(N_MODIFIER_0,  0));
        state155.put("DOUBLE", new SymbolState(N_MODIFIER_0,  0));
        state194.put("BOOLEAN", new SymbolState(STATEMENT,  3));
        state116.put("STATIC", new SymbolState(MODIFIER,  1));
        state143.put("RPAREN", new SymbolState(BRACKETSOPT,  0));
        state33.put("CHAR", new SymbolState(MODIFIER,  1));
        state160.put("PUBLIC", new SymbolState(33));
        state165.put("PIPE", new SymbolState(24));
        state194.put("RETURN", new SymbolState(STATEMENT,  3));
        state33.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state33.put("INTERFACE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state179 = new HashMap<String, SymbolState>();
        rules.put(179, state179);
        state179.put("WHILE", new SymbolState(92));
        state144.put("PUBLIC", new SymbolState(METHODDECL,  2));
        state215.put("FORUPDATE", new SymbolState(93));
        state21.put("SEMI", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state155.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state202.put("RBRACE", new SymbolState(STATEMENT,  5));
        state75.put("LONG", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state55.put("CHAR", new SymbolState(MODIFIER,  1));
        state45.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state124.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        state171.put("INT", new SymbolState(FIELDDECL,  5));
        state50.put("BYTE", new SymbolState(MODIFIER,  1));
        state166.put("VOLATILE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state171.put("PROTECTED", new SymbolState(FIELDDECL,  5));
        state41.put("VOID", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        Map<String, SymbolState> state1 = new HashMap<String, SymbolState>();
        rules.put(1, state1);
        state1.put("CONSTANTDECLARATOR", new SymbolState(94));
        state28.put("BLOCK", new SymbolState(70));
        state31.put("IMPORT", new SymbolState(95));
        state106.put("BYTE", new SymbolState(METHODDECL,  4));
        state52.put("ID", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state133.put("SHORT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state165.put("ID", new SymbolState(3));
        state10.put("PRIVATE", new SymbolState(METHODBODY,  1));
        state131.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  5));
        state114.put("EXPRESSION", new SymbolState(96));
        state82.put("CHAR", new SymbolState(46));
        state67.put("TRANSIENT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state186.put("VOLATILE", new SymbolState(MEMBERDECL,  1));
        state196.put("PIPE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        Map<String, SymbolState> state15 = new HashMap<String, SymbolState>();
        rules.put(15, state15);
        state15.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state185.put("FLOAT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state144.put("ID", new SymbolState(METHODDECL,  2));
        state34.put("DOUBLE", new SymbolState(METHODDECL,  2));
        state63.put("TRANSIENT", new SymbolState(METHODDECLARATORREST,  4));
        state222.put("SYNCHRONIZED", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state180.put("SYNCHRONIZED", new SymbolState(TYPEDECLARATION,  2));
        state51.put("FINAL", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        Map<String, SymbolState> state207 = new HashMap<String, SymbolState>();
        rules.put(207, state207);
        state207.put("IMPLEMENTS", new SymbolState(BRACKETSOPT,  0));
        state37.put("LONG", new SymbolState(METHODDECL,  4));
        state27.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state53.put("BASICTYPE", new SymbolState(36));
        state124.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state16.put("EOF", new SymbolState(TYPEDECLARATION,  1));
        state26.put("FINAL", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        Map<String, SymbolState> state147 = new HashMap<String, SymbolState>();
        rules.put(147, state147);
        state147.put("SEMI", new SymbolState(97));
        Map<String, SymbolState> state162 = new HashMap<String, SymbolState>();
        rules.put(162, state162);
        state162.put("COMMA", new SymbolState(98));
        state144.put("VOLATILE", new SymbolState(METHODDECL,  2));
        state10.put("SEMI", new SymbolState(METHODBODY,  1));
        state133.put("PRIVATE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state177.put("ID", new SymbolState(STATEMENT,  2));
        state196.put("DO", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        Map<String, SymbolState> state205 = new HashMap<String, SymbolState>();
        rules.put(205, state205);
        state205.put("LBRACE", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state77 = new HashMap<String, SymbolState>();
        rules.put(77, state77);
        state77.put("RBRACKET", new SymbolState(99));
        state221.put("VOID", new SymbolState(FIELDDECL,  5));
        state203.put("FINAL", new SymbolState(IMPORTDECLARATION,  4));
        state21.put("INT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state180.put("PUBLIC", new SymbolState(TYPEDECLARATION,  2));
        state35.put("CONSTANTDECLARATORSREST", new SymbolState(100));
        state155.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        state202.put("FLOAT", new SymbolState(STATEMENT,  5));
        state23.put("SHORT", new SymbolState(MODIFIER,  1));
        state105.put("COMMA", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  0));
        state10.put("BYTE", new SymbolState(METHODBODY,  1));
        state89.put("LBRACE", new SymbolState(BLOCKSTATEMENT,  1));
        state106.put("ABSTRACT", new SymbolState(METHODDECL,  4));
        state21.put("FLOAT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state180.put("NATIVE", new SymbolState(TYPEDECLARATION,  2));
        state220.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  3));
        state106.put("VOLATILE", new SymbolState(METHODDECL,  4));
        state29.put("LBRACE", new SymbolState(STATEMENT,  1));
        state126.put("INTERFACE", new SymbolState(N_MODIFIER_0,  2));
        state193.put("FINAL", new SymbolState(BLOCK,  3));
        state67.put("VOLATILE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state37.put("NATIVE", new SymbolState(METHODDECL,  4));
        state30.put("SEMI", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state50.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state165.put("FINAL", new SymbolState(101));
        state144.put("FINAL", new SymbolState(METHODDECL,  2));
        state45.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state51.put("FLOAT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state45.put("FINAL", new SymbolState(MODIFIER,  1));
        state155.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state106.put("CHAR", new SymbolState(METHODDECL,  4));
        state37.put("PRIVATE", new SymbolState(METHODDECL,  4));
        Map<String, SymbolState> state17 = new HashMap<String, SymbolState>();
        rules.put(17, state17);
        state17.put("FORMALPARAMETERS", new SymbolState(102));
        state169.put("STATIC", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state35.put("FORMALPARAMETERS", new SymbolState(103));
        state148.put("NATIVE", new SymbolState(INTERFACEBODY,  3));
        state123.put("VOLATILE", new SymbolState(CLASSDECLARATION,  5));
        state111.put("LBRACE", new SymbolState(26));
        state37.put("STRICTFP", new SymbolState(METHODDECL,  4));
        state207.put("DOT", new SymbolState(104));
        state184.put("VOLATILE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state89.put("WHILE", new SymbolState(BLOCKSTATEMENT,  1));
        state203.put("CLASS", new SymbolState(IMPORTDECLARATION,  4));
        state19.put("ID", new SymbolState(BASICTYPE,  1));
        state166.put("FLOAT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state215.put("STATEMENTEXPRESSION", new SymbolState(105));
        state47.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state79.put("COMMA", new SymbolState(BASICTYPE,  1));
        state214.put("LONG", new SymbolState(79));
        state168.put("SEMI", new SymbolState(N_DOT_ID_0,  0));
        state67.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state186.put("SYNCHRONIZED", new SymbolState(MEMBERDECL,  1));
        state74.put("BOOLEAN", new SymbolState(11));
        state185.put("TRANSIENT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state202.put("SEMI", new SymbolState(STATEMENT,  5));
        state172.put("METHODBODY", new SymbolState(106));
        state75.put("FLOAT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state21.put("ID", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state51.put("TRANSIENT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state34.put("VOLATILE", new SymbolState(METHODDECL,  2));
        state159.put("PROTECTED", new SymbolState(TYPEDECLARATION,  2));
        state69.put("VOLATILE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state155.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        state159.put("ABSTRACT", new SymbolState(TYPEDECLARATION,  2));
        state144.put("BOOLEAN", new SymbolState(METHODDECL,  2));
        state137.put("PROTECTED", new SymbolState(CLASSBODYDECLARATION,  2));
        state193.put("SEMI", new SymbolState(BLOCK,  3));
        state69.put("DOUBLE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state219.put("TYPELIST", new SymbolState(107));
        state171.put("TRANSIENT", new SymbolState(FIELDDECL,  5));
        Map<String, SymbolState> state46 = new HashMap<String, SymbolState>();
        rules.put(46, state46);
        state46.put("COMMA", new SymbolState(BASICTYPE,  1));
        state27.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state29.put("ID", new SymbolState(STATEMENT,  1));
        state144.put("LONG", new SymbolState(METHODDECL,  2));
        state41.put("FLOAT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state51.put("CHAR", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state101.put("TYPE", new SymbolState(108));
        state159.put("NATIVE", new SymbolState(TYPEDECLARATION,  2));
        state51.put("BOOLEAN", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state33.put("FLOAT", new SymbolState(MODIFIER,  1));
        state194.put("INT", new SymbolState(STATEMENT,  3));
        state221.put("STRICTFP", new SymbolState(FIELDDECL,  5));
        state17.put("LPAREN", new SymbolState(109));
        Map<String, SymbolState> state110 = new HashMap<String, SymbolState>();
        rules.put(110, state110);
        state110.put("LPAREN", new SymbolState(109));
        state70.put("RBRACE", new SymbolState(STATEMENT,  1));
        state27.put("LONG", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state38 = new HashMap<String, SymbolState>();
        rules.put(38, state38);
        state38.put("LBRACKET", new SymbolState(77));
        state41.put("STRICTFP", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state68.put("FOR", new SymbolState(PAREXPRESSION,  3));
        state45.put("CHAR", new SymbolState(MODIFIER,  1));
        state87.put("LONG", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state35.put("LPAREN", new SymbolState(109));
        state196.put("ID", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state4.put("STATEMENTEXPRESSION", new SymbolState(2));
        state91.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        state144.put("PROTECTED", new SymbolState(METHODDECL,  2));
        state180.put("PROTECTED", new SymbolState(TYPEDECLARATION,  2));
        state87.put("DOUBLE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state139.put("LPAREN", new SymbolState(110));
        state126.put("SHORT", new SymbolState(N_MODIFIER_0,  2));
        state201.put("SEMI", new SymbolState(VARIABLEDECLARATOR,  2));
        state116.put("SHORT", new SymbolState(MODIFIER,  1));
        state67.put("PRIVATE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        Map<String, SymbolState> state48 = new HashMap<String, SymbolState>();
        rules.put(48, state48);
        state48.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state34.put("SHORT", new SymbolState(METHODDECL,  2));
        state193.put("PUBLIC", new SymbolState(BLOCK,  3));
        state126.put("VOLATILE", new SymbolState(N_MODIFIER_0,  2));
        state63.put("INT", new SymbolState(METHODDECLARATORREST,  4));
        state123.put("PRIVATE", new SymbolState(CLASSDECLARATION,  5));
        state16.put("INTERFACE", new SymbolState(TYPEDECLARATION,  1));
        state34.put("SYNCHRONIZED", new SymbolState(METHODDECL,  2));
        Map<String, SymbolState> state208 = new HashMap<String, SymbolState>();
        rules.put(208, state208);
        state208.put("METHODDECLARATORREST", new SymbolState(111));
        state55.put("INT", new SymbolState(MODIFIER,  1));
        state105.put("RPAREN", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  0));
        state32.put("FINAL", new SymbolState(MODIFIER,  1));
        state69.put("RBRACE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state190.put("EOF", new SymbolState(COMPILATIONUNIT,  2));
        state51.put("VOLATILE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state71.put("LONG", new SymbolState(MODIFIER,  1));
        state125.put("LBRACKET", new SymbolState(N_DOT_ID_0,  3));
        state18.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state126.put("VOID", new SymbolState(N_MODIFIER_0,  2));
        state51.put("DOUBLE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state129.put("EOF", new SymbolState(CLASSBODY,  3));
        state78.put("ID", new SymbolState(STATEMENT,  3));
        state91.put("VOLATILE", new SymbolState(MEMBERDECL,  1));
        state32.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state221.put("SHORT", new SymbolState(FIELDDECL,  5));
        state15.put("ID", new SymbolState(BASICTYPE,  1));
        state28.put("WHILE", new SymbolState(58));
        Map<String, SymbolState> state73 = new HashMap<String, SymbolState>();
        rules.put(73, state73);
        state73.put("EOF", new SymbolState(112));
        state166.put("BYTE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state169.put("PUBLIC", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state180.put("VOLATILE", new SymbolState(TYPEDECLARATION,  2));
        state24.put("RETURN", new SymbolState(EXPRESSION,  1));
        state64.put("WHILE", new SymbolState(STATEMENT,  9));
        state30.put("PROTECTED", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state116.put("NATIVE", new SymbolState(MODIFIER,  1));
        state169.put("FINAL", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state2.put("FLOAT", new SymbolState(STATEMENT,  1));
        state12.put("PIPE", new SymbolState(24));
        Map<String, SymbolState> state122 = new HashMap<String, SymbolState>();
        rules.put(122, state122);
        state122.put("RPAREN", new SymbolState(N_COMMA_FORMALPARAMETER_0,  0));
        Map<String, SymbolState> state60 = new HashMap<String, SymbolState>();
        rules.put(60, state60);
        state60.put("COMMA", new SymbolState(VARIABLEINITIALIZER,  1));
        state154.put("FINAL", new SymbolState(N_TYPEDECLARATION_0,  0));
        state184.put("SHORT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state206.put("N_COMMA_CONSTANTDECLARATOR_0", new SymbolState(113));
        state37.put("BOOLEAN", new SymbolState(METHODDECL,  4));
        state33.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state29.put("CHAR", new SymbolState(STATEMENT,  1));
        state50.put("VOLATILE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state40 = new HashMap<String, SymbolState>();
        rules.put(40, state40);
        state40.put("SEMI", new SymbolState(114));
        state153.put("ABSTRACT", new SymbolState(INTERFACEMEMBERDECL,  3));
        state177.put("SEMI", new SymbolState(STATEMENT,  2));
        Map<String, SymbolState> state14 = new HashMap<String, SymbolState>();
        rules.put(14, state14);
        state14.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state55.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state64.put("BOOLEAN", new SymbolState(STATEMENT,  9));
        state47.put("ID", new SymbolState(MODIFIER,  1));
        state109.put("BOOLEAN", new SymbolState(11));
        state135.put("CLASS", new SymbolState(INTERFACEDECLARATION,  5));
        state66.put("MORESTATEMENTEXPRESSIONS", new SymbolState(115));
        state91.put("SHORT", new SymbolState(MEMBERDECL,  1));
        state16.put("SEMI", new SymbolState(TYPEDECLARATION,  1));
        state183.put("VOLATILE", new SymbolState(MEMBERDECL,  1));
        state126.put("FLOAT", new SymbolState(N_MODIFIER_0,  2));
        state82.put("SYNCHRONIZED", new SymbolState(116));
        state87.put("INT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state29.put("INT", new SymbolState(STATEMENT,  1));
        state137.put("CHAR", new SymbolState(CLASSBODYDECLARATION,  2));
        state194.put("SEMI", new SymbolState(STATEMENT,  3));
        state29.put("WHILE", new SymbolState(STATEMENT,  1));
        state127.put("BYTE", new SymbolState(BLOCKSTATEMENT,  1));
        state72.put("SYNCHRONIZED", new SymbolState(N_TYPEDECLARATION_0,  2));
        state47.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state39.put("PUBLIC", new SymbolState(CLASSDECLARATION,  7));
        state51.put("SYNCHRONIZED", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        Map<String, SymbolState> state95 = new HashMap<String, SymbolState>();
        rules.put(95, state95);
        state95.put("ID", new SymbolState(117));
        state78.put("BYTE", new SymbolState(STATEMENT,  3));
        state44.put("WHILE", new SymbolState(58));
        state75.put("STATIC", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state52.put("PUBLIC", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state169.put("NATIVE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state170.put("NATIVE", new SymbolState(IMPORTDECLARATION,  6));
        state203.put("VOLATILE", new SymbolState(IMPORTDECLARATION,  4));
        state78.put("FLOAT", new SymbolState(STATEMENT,  3));
        state204.put("EOF", new SymbolState(COMPILATIONUNIT,  5));
        state193.put("DO", new SymbolState(BLOCK,  3));
        state23.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state70.put("ID", new SymbolState(STATEMENT,  1));
        state101.put("SHORT", new SymbolState(18));
        state64.put("FLOAT", new SymbolState(STATEMENT,  9));
        state129.put("SEMI", new SymbolState(CLASSBODY,  3));
        state128.put("RETURN", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state14.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state109.put("DOUBLE", new SymbolState(48));
        state75.put("SYNCHRONIZED", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state55.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state32.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state74.put("DOUBLE", new SymbolState(48));
        state47.put("NATIVE", new SymbolState(MODIFIER,  1));
        state183.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        state176.put("BECOMES", new SymbolState(BRACKETSOPT,  0));
        state26.put("BOOLEAN", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state120.put("FORUPDATE", new SymbolState(118));
        state212.put("DOUBLE", new SymbolState(48));
        state74.put("BYTE", new SymbolState(19));
        state87.put("DO", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        Map<String, SymbolState> state25 = new HashMap<String, SymbolState>();
        rules.put(25, state25);
        state25.put("EXPRESSION", new SymbolState(119));
        state30.put("STATIC", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state153.put("TRANSIENT", new SymbolState(INTERFACEMEMBERDECL,  3));
        state27.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state219.put("DOUBLE", new SymbolState(48));
        state56.put("SHORT", new SymbolState(STATEMENTEXPRESSION,  1));
        Map<String, SymbolState> state163 = new HashMap<String, SymbolState>();
        rules.put(163, state163);
        state163.put("VARIABLEDECLARATOR", new SymbolState(65));
        state170.put("VOLATILE", new SymbolState(IMPORTDECLARATION,  6));
        state133.put("BYTE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state114.put("SEMI", new SymbolState(120));
        state67.put("FINAL", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state32.put("NATIVE", new SymbolState(MODIFIER,  1));
        state128.put("RBRACE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state23.put("CHAR", new SymbolState(MODIFIER,  1));
        state11.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state153.put("ID", new SymbolState(INTERFACEMEMBERDECL,  3));
        state190.put("SEMI", new SymbolState(16));
        state184.put("BYTE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state154.put("STATIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state66.put("SEMI", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  0));
        state15.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state28.put("TYPE", new SymbolState(121));
        state13.put("STATIC", new SymbolState(MODIFIER,  1));
        state84.put("CHAR", new SymbolState(46));
        state52.put("ABSTRACT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state44.put("BLOCK", new SymbolState(70));
        state79.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state155.put("SHORT", new SymbolState(N_MODIFIER_0,  0));
        state192.put("SHORT", new SymbolState(STATEMENT,  8));
        state166.put("FINAL", new SymbolState(INTERFACEMEMBERDECL,  1));
        state61.put("ID", new SymbolState(BRACKETSOPT,  0));
        state91.put("INT", new SymbolState(MEMBERDECL,  1));
        state78.put("LONG", new SymbolState(STATEMENT,  3));
        state212.put("ID", new SymbolState(3));
        state193.put("RETURN", new SymbolState(BLOCK,  3));
        state160.put("STRICTFP", new SymbolState(47));
        state97.put("NATIVE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state2.put("BYTE", new SymbolState(STATEMENT,  1));
        state186.put("CHAR", new SymbolState(MEMBERDECL,  1));
        state109.put("FORMALPARAMETER", new SymbolState(122));
        state32.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state219.put("FLOAT", new SymbolState(14));
        state13.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state44.put("DO", new SymbolState(4));
        Map<String, SymbolState> state209 = new HashMap<String, SymbolState>();
        rules.put(209, state209);
        state209.put("CLASSBODY", new SymbolState(123));
        state30.put("N_INTERFACEBODYDECLARATION_0", new SymbolState(124));
        state143.put("COMMA", new SymbolState(BRACKETSOPT,  0));
        state196.put("DOUBLE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state97.put("PROTECTED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state0.put("PRIVATE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state120.put("STATEMENTEXPRESSION", new SymbolState(105));
        state91.put("NATIVE", new SymbolState(MEMBERDECL,  1));
        state35.put("BECOMES", new SymbolState(BRACKETSOPT,  0));
        state153.put("SHORT", new SymbolState(INTERFACEMEMBERDECL,  3));
        state29.put("DO", new SymbolState(STATEMENT,  1));
        state27.put("INT", new SymbolState(MODIFIER,  1));
        state169.put("ID", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        Map<String, SymbolState> state104 = new HashMap<String, SymbolState>();
        rules.put(104, state104);
        state104.put("ID", new SymbolState(125));
        state89.put("RETURN", new SymbolState(BLOCKSTATEMENT,  1));
        state52.put("BYTE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state45.put("FLOAT", new SymbolState(MODIFIER,  1));
        state154.put("NATIVE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state137.put("LONG", new SymbolState(CLASSBODYDECLARATION,  2));
        state169.put("INT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state24.put("PIPE", new SymbolState(EXPRESSION,  1));
        state193.put("ID", new SymbolState(BLOCK,  3));
        state13.put("BYTE", new SymbolState(MODIFIER,  1));
        state169.put("BOOLEAN", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state31.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state10.put("STRICTFP", new SymbolState(METHODBODY,  1));
        state177.put("LBRACE", new SymbolState(STATEMENT,  2));
        state49.put("RBRACE", new SymbolState(METHODBODY,  1));
        state196.put("BYTE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state50.put("FLOAT", new SymbolState(MODIFIER,  1));
        state53.put("BOOLEAN", new SymbolState(11));
        state30.put("VOLATILE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state3.put("COMMA", new SymbolState(N_DOT_ID_0,  0));
        state41.put("TRANSIENT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state70.put("LBRACE", new SymbolState(STATEMENT,  1));
        state91.put("PRIVATE", new SymbolState(MEMBERDECL,  1));
        state33.put("SEMI", new SymbolState(MODIFIER,  1));
        state218.put("FOR", new SymbolState(54));
        Map<String, SymbolState> state7 = new HashMap<String, SymbolState>();
        rules.put(7, state7);
        state7.put("EXPRESSION", new SymbolState(60));
        state69.put("TRANSIENT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state74.put("SHORT", new SymbolState(18));
        state212.put("INT", new SymbolState(15));
        state190.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state98.put("ID", new SymbolState(3));
        state159.put("CLASS", new SymbolState(TYPEDECLARATION,  2));
        state82.put("BYTE", new SymbolState(19));
        state126.put("PROTECTED", new SymbolState(N_MODIFIER_0,  2));
        state64.put("INT", new SymbolState(STATEMENT,  9));
        state56.put("RBRACE", new SymbolState(STATEMENTEXPRESSION,  1));
        state30.put("FINAL", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state155.put("VOID", new SymbolState(N_MODIFIER_0,  0));
        state82.put("MODIFIER", new SymbolState(126));
        state135.put("SEMI", new SymbolState(INTERFACEDECLARATION,  5));
        state0.put("PROTECTED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state28.put("LOCALVARIABLEDECLARATIONSTATEMENT", new SymbolState(127));
        Map<String, SymbolState> state197 = new HashMap<String, SymbolState>();
        rules.put(197, state197);
        state197.put("SEMI", new SymbolState(128));
        state180.put("STRICTFP", new SymbolState(TYPEDECLARATION,  2));
        state220.put("CLASS", new SymbolState(CLASSDECLARATION,  3));
        state154.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  0));
        Map<String, SymbolState> state65 = new HashMap<String, SymbolState>();
        rules.put(65, state65);
        state65.put("SEMI", new SymbolState(N_COMMA_VARIABLEDECLARATOR_0,  0));
        state155.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state69.put("BOOLEAN", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state55.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state133.put("CHAR", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state214.put("SYNCHRONIZED", new SymbolState(116));
        state103.put("LBRACKET", new SymbolState(77));
        state71.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state127.put("RETURN", new SymbolState(BLOCKSTATEMENT,  1));
        state13.put("FINAL", new SymbolState(MODIFIER,  1));
        state214.put("DOUBLE", new SymbolState(48));
        state165.put("CHAR", new SymbolState(46));
        state47.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state37.put("SHORT", new SymbolState(METHODDECL,  4));
        state196.put("LBRACE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state183.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        state159.put("PUBLIC", new SymbolState(TYPEDECLARATION,  2));
        state212.put("BASICTYPE", new SymbolState(36));
        state39.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  7));
        state21.put("STRICTFP", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state41.put("PRIVATE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state116.put("CLASS", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state158 = new HashMap<String, SymbolState>();
        rules.put(158, state158);
        state158.put("SEMI", new SymbolState(VARIABLEDECLARATORS,  2));
        state164.put("COMMA", new SymbolState(N_COMMA_VARIABLEDECLARATOR_0,  3));
        state27.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state205.put("IMPLEMENTS", new SymbolState(TYPE,  3));
        state37.put("VOID", new SymbolState(METHODDECL,  4));
        state184.put("VOID", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state84.put("LONG", new SymbolState(79));
        state133.put("LONG", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state154.put("IMPORT", new SymbolState(95));
        state21.put("NATIVE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state28.put("DOUBLE", new SymbolState(48));
        state30.put("BOOLEAN", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state202.put("ID", new SymbolState(STATEMENT,  5));
        state5.put("SEMI", new SymbolState(MORESTATEMENTEXPRESSIONS,  1));
        state72.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  2));
        state48.put("COMMA", new SymbolState(BASICTYPE,  1));
        state126.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  2));
        state117.put("SEMI", new SymbolState(N_DOT_ID_0,  0));
        state64.put("ID", new SymbolState(STATEMENT,  9));
        state128.put("SHORT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state127.put("CHAR", new SymbolState(BLOCKSTATEMENT,  1));
        state13.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state133.put("STRICTFP", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state204.put("INTERFACE", new SymbolState(N_MODIFIER_0,  0));
        state78.put("FINAL", new SymbolState(STATEMENT,  3));
        state177.put("FINAL", new SymbolState(STATEMENT,  2));
        state222.put("INT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state69.put("SHORT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state37.put("ID", new SymbolState(METHODDECL,  4));
        state177.put("RBRACE", new SymbolState(STATEMENT,  2));
        state160.put("MODIFIER", new SymbolState(126));
        state124.put("BYTE", new SymbolState(N_MODIFIER_0,  0));
        state169.put("DOUBLE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state41.put("BYTE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state67.put("STRICTFP", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state87.put("ID", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state177.put("PIPE", new SymbolState(STATEMENT,  2));
        state53.put("ID", new SymbolState(3));
        Map<String, SymbolState> state9 = new HashMap<String, SymbolState>();
        rules.put(9, state9);
        state9.put("EXPRESSION", new SymbolState(56));
        state219.put("BOOLEAN", new SymbolState(11));
        state30.put("RBRACE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state55.put("LONG", new SymbolState(MODIFIER,  1));
        state165.put("INT", new SymbolState(15));
        state64.put("FINAL", new SymbolState(STATEMENT,  9));
        state29.put("RETURN", new SymbolState(STATEMENT,  1));
        state169.put("STRICTFP", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state16.put("TRANSIENT", new SymbolState(TYPEDECLARATION,  1));
        state186.put("SHORT", new SymbolState(MEMBERDECL,  1));
        state170.put("FINAL", new SymbolState(IMPORTDECLARATION,  6));
        state41.put("DOUBLE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state69.put("PROTECTED", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state71.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state131.put("FINAL", new SymbolState(CLASSDECLARATION,  5));
        state155.put("RBRACE", new SymbolState(129));
        state208.put("ID", new SymbolState(130));
        state184.put("ABSTRACT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state176.put("LBRACKET", new SymbolState(77));
        state202.put("DOUBLE", new SymbolState(STATEMENT,  5));
        state159.put("EOF", new SymbolState(TYPEDECLARATION,  2));
        state193.put("STRICTFP", new SymbolState(BLOCK,  3));
        state184.put("STRICTFP", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state32.put("VOID", new SymbolState(MODIFIER,  1));
        state169.put("FLOAT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state55.put("ID", new SymbolState(MODIFIER,  1));
        state72.put("PRIVATE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state31.put("PUBLIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state21.put("SYNCHRONIZED", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state203.put("SEMI", new SymbolState(IMPORTDECLARATION,  4));
        state32.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state166.put("CHAR", new SymbolState(INTERFACEMEMBERDECL,  1));
        state91.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state80 = new HashMap<String, SymbolState>();
        rules.put(80, state80);
        state80.put("CLASSBODY", new SymbolState(131));
        Map<String, SymbolState> state115 = new HashMap<String, SymbolState>();
        rules.put(115, state115);
        state115.put("SEMI", new SymbolState(FORINIT,  2));
        state78.put("INT", new SymbolState(STATEMENT,  3));
        state52.put("STATIC", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state212.put("LONG", new SymbolState(79));
        state190.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state75.put("BYTE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state137.put("VOLATILE", new SymbolState(CLASSBODYDECLARATION,  2));
        state47.put("SEMI", new SymbolState(MODIFIER,  1));
        state70.put("RETURN", new SymbolState(STATEMENT,  1));
        state70.put("DO", new SymbolState(STATEMENT,  1));
        state203.put("PROTECTED", new SymbolState(IMPORTDECLARATION,  4));
        state56.put("BYTE", new SymbolState(STATEMENTEXPRESSION,  1));
        state109.put("FINAL", new SymbolState(74));
        state171.put("NATIVE", new SymbolState(FIELDDECL,  5));
        state163.put("VARIABLEDECLARATORS", new SymbolState(132));
        state64.put("DO", new SymbolState(STATEMENT,  9));
        state10.put("VOID", new SymbolState(METHODBODY,  1));
        state166.put("VOID", new SymbolState(INTERFACEMEMBERDECL,  1));
        state26.put("FOR", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state134.put("FLOAT", new SymbolState(14));
        state155.put("CLASSBODYDECLARATION", new SymbolState(133));
        state220.put("PRIVATE", new SymbolState(CLASSDECLARATION,  3));
        state154.put("SYNCHRONIZED", new SymbolState(N_TYPEDECLARATION_0,  0));
        Map<String, SymbolState> state108 = new HashMap<String, SymbolState>();
        rules.put(108, state108);
        state108.put("ID", new SymbolState(88));
        state181.put("IMPLEMENTS", new SymbolState(134));
        state155.put("FLOAT", new SymbolState(N_MODIFIER_0,  0));
        state107.put("INTERFACEBODY", new SymbolState(135));
        state4.put("LBRACE", new SymbolState(26));
        state202.put("DO", new SymbolState(STATEMENT,  5));
        state159.put("STATIC", new SymbolState(TYPEDECLARATION,  2));
        state64.put("SHORT", new SymbolState(STATEMENT,  9));
        state204.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        state32.put("ID", new SymbolState(MODIFIER,  1));
        state97.put("TRANSIENT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state180.put("SEMI", new SymbolState(TYPEDECLARATION,  2));
        state53.put("FLOAT", new SymbolState(14));
        state219.put("TYPE", new SymbolState(136));
        state174.put("VOLATILE", new SymbolState(INTERFACEDECLARATION,  3));
        state50.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state34.put("LONG", new SymbolState(METHODDECL,  2));
        state41.put("SHORT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state144.put("TRANSIENT", new SymbolState(METHODDECL,  2));
        state128.put("SEMI", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state67.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state196.put("RBRACE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state49.put("FINAL", new SymbolState(METHODBODY,  1));
        state126.put("INT", new SymbolState(N_MODIFIER_0,  2));
        state34.put("BYTE", new SymbolState(METHODDECL,  2));
        state196.put("LONG", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state101.put("BYTE", new SymbolState(19));
        state82.put("MEMBERDECL", new SymbolState(137));
        state214.put("PUBLIC", new SymbolState(33));
        state94.put("COMMA", new SymbolState(N_COMMA_CONSTANTDECLARATOR_0,  3));
        state124.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state31.put("ABSTRACT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state165.put("DOUBLE", new SymbolState(48));
        state23.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state72.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  2));
        Map<String, SymbolState> state189 = new HashMap<String, SymbolState>();
        rules.put(189, state189);
        state189.put("SEMI", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  3));
        state75.put("BOOLEAN", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state69.put("STRICTFP", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state174.put("STRICTFP", new SymbolState(INTERFACEDECLARATION,  3));
        state45.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state69.put("PUBLIC", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state2.put("PIPE", new SymbolState(STATEMENT,  1));
        state44.put("PIPE", new SymbolState(24));
        state89.put("FOR", new SymbolState(BLOCKSTATEMENT,  1));
        state185.put("INT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state170.put("STATIC", new SymbolState(IMPORTDECLARATION,  6));
        state220.put("PUBLIC", new SymbolState(CLASSDECLARATION,  3));
        state185.put("NATIVE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state27.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state16.put("STRICTFP", new SymbolState(TYPEDECLARATION,  1));
        state125.put("SEMI", new SymbolState(N_DOT_ID_0,  3));
        state23.put("FLOAT", new SymbolState(MODIFIER,  1));
        state124.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state24.put("SEMI", new SymbolState(EXPRESSION,  1));
        state74.put("LONG", new SymbolState(79));
        state158.put("COMMA", new SymbolState(138));
        Map<String, SymbolState> state213 = new HashMap<String, SymbolState>();
        rules.put(213, state213);
        state213.put("ID", new SymbolState(139));
        state63.put("LONG", new SymbolState(METHODDECLARATORREST,  4));
        state222.put("FLOAT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state180.put("FINAL", new SymbolState(TYPEDECLARATION,  2));
        state44.put("SEMI", new SymbolState(29));
        state106.put("FINAL", new SymbolState(METHODDECL,  4));
        state192.put("PIPE", new SymbolState(STATEMENT,  8));
        state183.put("PUBLIC", new SymbolState(MEMBERDECL,  1));
        state78.put("RETURN", new SymbolState(STATEMENT,  3));
        state194.put("FOR", new SymbolState(STATEMENT,  3));
        state56.put("SEMI", new SymbolState(STATEMENTEXPRESSION,  1));
        state184.put("SEMI", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state137.put("DOUBLE", new SymbolState(CLASSBODYDECLARATION,  2));
        state106.put("STRICTFP", new SymbolState(METHODDECL,  4));
        state126.put("CLASS", new SymbolState(N_MODIFIER_0,  2));
        state202.put("RETURN", new SymbolState(STATEMENT,  5));
        state144.put("SYNCHRONIZED", new SymbolState(METHODDECL,  2));
        state186.put("PRIVATE", new SymbolState(MEMBERDECL,  1));
        state87.put("RETURN", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state154.put("STRICTFP", new SymbolState(N_TYPEDECLARATION_0,  0));
        state47.put("FINAL", new SymbolState(MODIFIER,  1));
        state128.put("FLOAT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state123.put("FINAL", new SymbolState(CLASSDECLARATION,  5));
        state51.put("PROTECTED", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state55.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state176.put("CONSTANTDECLARATORREST", new SymbolState(140));
        state124.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state0.put("PACKAGE", new SymbolState(141));
        state13.put("INT", new SymbolState(MODIFIER,  1));
        state200.put("LPAREN", new SymbolState(109));
        state196.put("CHAR", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state71.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state177.put("LONG", new SymbolState(STATEMENT,  2));
        state70.put("DOUBLE", new SymbolState(STATEMENT,  1));
        Map<String, SymbolState> state157 = new HashMap<String, SymbolState>();
        rules.put(157, state157);
        state157.put("VARIABLEDECLARATORID", new SymbolState(142));
        state41.put("SYNCHRONIZED", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state63.put("FLOAT", new SymbolState(METHODDECLARATORREST,  4));
        state48.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state50.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state49.put("SEMI", new SymbolState(METHODBODY,  1));
        state26.put("BYTE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state135.put("FINAL", new SymbolState(INTERFACEDECLARATION,  5));
        state23.put("STATIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state182 = new HashMap<String, SymbolState>();
        rules.put(182, state182);
        state182.put("RPAREN", new SymbolState(FORMALPARAMETERS,  2));
        state135.put("ABSTRACT", new SymbolState(INTERFACEDECLARATION,  5));
        state50.put("SHORT", new SymbolState(MODIFIER,  1));
        state106.put("DOUBLE", new SymbolState(METHODDECL,  4));
        state190.put("TYPEDECLARATION", new SymbolState(72));
        state63.put("ABSTRACT", new SymbolState(METHODDECLARATORREST,  4));
        state116.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state52.put("PRIVATE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state157.put("ID", new SymbolState(143));
        state89.put("SEMI", new SymbolState(BLOCKSTATEMENT,  1));
        state214.put("BOOLEAN", new SymbolState(11));
        state14.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state0.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state194.put("LONG", new SymbolState(STATEMENT,  3));
        state21.put("SHORT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state220.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  3));
        state221.put("PROTECTED", new SymbolState(FIELDDECL,  5));
        Map<String, SymbolState> state90 = new HashMap<String, SymbolState>();
        rules.put(90, state90);
        state90.put("METHODDECLARATORREST", new SymbolState(144));
        state70.put("BOOLEAN", new SymbolState(STATEMENT,  1));
        state204.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state169.put("SYNCHRONIZED", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state177.put("BYTE", new SymbolState(STATEMENT,  2));
        state221.put("FLOAT", new SymbolState(FIELDDECL,  5));
        state214.put("SHORT", new SymbolState(18));
        state127.put("BOOLEAN", new SymbolState(BLOCKSTATEMENT,  1));
        state29.put("DOUBLE", new SymbolState(STATEMENT,  1));
        state32.put("CHAR", new SymbolState(MODIFIER,  1));
        state99.put("BECOMES", new SymbolState(BRACKETSOPT,  2));
        state144.put("SHORT", new SymbolState(METHODDECL,  2));
        state52.put("SHORT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state131.put("INTERFACE", new SymbolState(CLASSDECLARATION,  5));
        state26.put("LBRACE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state186.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state29.put("LONG", new SymbolState(STATEMENT,  1));
        state116.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state183.put("ID", new SymbolState(MEMBERDECL,  1));
        state186.put("LONG", new SymbolState(MEMBERDECL,  1));
        state55.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state47.put("SHORT", new SymbolState(MODIFIER,  1));
        state49.put("STRICTFP", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state22 = new HashMap<String, SymbolState>();
        rules.put(22, state22);
        state22.put("DOT", new SymbolState(104));
        state154.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  0));
        state79.put("ID", new SymbolState(BASICTYPE,  1));
        state183.put("PROTECTED", new SymbolState(MEMBERDECL,  1));
        state137.put("PRIVATE", new SymbolState(CLASSBODYDECLARATION,  2));
        state124.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state214.put("TRANSIENT", new SymbolState(32));
        state117.put("N_DOT_ID_0", new SymbolState(145));
        state31.put("STRICTFP", new SymbolState(N_TYPEDECLARATION_0,  0));
        state47.put("VOID", new SymbolState(MODIFIER,  1));
        state182.put("LBRACKET", new SymbolState(FORMALPARAMETERS,  2));
        state137.put("ABSTRACT", new SymbolState(CLASSBODYDECLARATION,  2));
        state71.put("FINAL", new SymbolState(MODIFIER,  1));
        state56.put("DO", new SymbolState(STATEMENTEXPRESSION,  1));
        state91.put("SEMI", new SymbolState(MEMBERDECL,  1));
        state116.put("SEMI", new SymbolState(MODIFIER,  1));
        state0.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state206.put("SEMI", new SymbolState(N_COMMA_CONSTANTDECLARATOR_0,  0));
        state2.put("RETURN", new SymbolState(STATEMENT,  1));
        state27.put("NATIVE", new SymbolState(MODIFIER,  1));
        state162.put("LBRACE", new SymbolState(TYPELIST,  2));
        state63.put("VOLATILE", new SymbolState(METHODDECLARATORREST,  4));
        state203.put("IMPORT", new SymbolState(IMPORTDECLARATION,  4));
        state183.put("FINAL", new SymbolState(MEMBERDECL,  1));
        state209.put("LBRACE", new SymbolState(21));
        state31.put("PROTECTED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state13.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state29.put("BOOLEAN", new SymbolState(STATEMENT,  1));
        state39.put("STRICTFP", new SymbolState(CLASSDECLARATION,  7));
        state155.put("BOOLEAN", new SymbolState(N_MODIFIER_0,  0));
        state6.put("LONG", new SymbolState(79));
        state148.put("STATIC", new SymbolState(INTERFACEBODY,  3));
        state129.put("STATIC", new SymbolState(CLASSBODY,  3));
        state130.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  0));
        state154.put("PRIVATE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state165.put("LONG", new SymbolState(79));
        state88.put("COMMA", new SymbolState(VARIABLEDECLARATORREST,  0));
        state166.put("SYNCHRONIZED", new SymbolState(INTERFACEMEMBERDECL,  1));
        Map<String, SymbolState> state145 = new HashMap<String, SymbolState>();
        rules.put(145, state145);
        state145.put("DOT", new SymbolState(146));
        Map<String, SymbolState> state141 = new HashMap<String, SymbolState>();
        rules.put(141, state141);
        state141.put("QUALIFIEDIDENTIFIER", new SymbolState(147));
        state0.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state194.put("ID", new SymbolState(STATEMENT,  3));
        state129.put("NATIVE", new SymbolState(CLASSBODY,  3));
        state190.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state10.put("STATIC", new SymbolState(METHODBODY,  1));
        state39.put("NATIVE", new SymbolState(CLASSDECLARATION,  7));
        state174.put("SYNCHRONIZED", new SymbolState(INTERFACEDECLARATION,  3));
        state71.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state70.put("LONG", new SymbolState(STATEMENT,  1));
        state124.put("RBRACE", new SymbolState(148));
        state171.put("ID", new SymbolState(FIELDDECL,  5));
        state41.put("RBRACE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state220.put("NATIVE", new SymbolState(CLASSDECLARATION,  3));
        state166.put("ID", new SymbolState(INTERFACEMEMBERDECL,  1));
        state155.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state0.put("SYNCHRONIZED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state106.put("SEMI", new SymbolState(METHODDECL,  4));
        state109.put("INT", new SymbolState(15));
        state171.put("BOOLEAN", new SymbolState(FIELDDECL,  5));
        state49.put("ABSTRACT", new SymbolState(METHODBODY,  1));
        state192.put("LONG", new SymbolState(STATEMENT,  8));
        state35.put("LBRACKET", new SymbolState(77));
        state70.put("FOR", new SymbolState(STATEMENT,  1));
        state183.put("STATIC", new SymbolState(MEMBERDECL,  1));
        state193.put("VOLATILE", new SymbolState(BLOCK,  3));
        state189.put("COMMA", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  3));
        state166.put("INT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state194.put("WHILE", new SymbolState(STATEMENT,  3));
        state84.put("INT", new SymbolState(15));
        state32.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state4.put("EXPRESSION", new SymbolState(56));
        state0.put("STRICTFP", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state30.put("STRICTFP", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state194.put("SHORT", new SymbolState(STATEMENT,  3));
        state75.put("DOUBLE", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state13.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state167.put("LBRACE", new SymbolState(26));
        state87.put("BYTE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state203.put("ABSTRACT", new SymbolState(IMPORTDECLARATION,  4));
        state99.put("IMPLEMENTS", new SymbolState(BRACKETSOPT,  2));
        state184.put("RBRACE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state168.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state192.put("FLOAT", new SymbolState(STATEMENT,  8));
        state52.put("RBRACE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state214.put("BASICTYPE", new SymbolState(36));
        state130.put("LPAREN", new SymbolState(110));
        state137.put("TRANSIENT", new SymbolState(CLASSBODYDECLARATION,  2));
        state50.put("LONG", new SymbolState(MODIFIER,  1));
        state171.put("SHORT", new SymbolState(FIELDDECL,  5));
        state170.put("PUBLIC", new SymbolState(IMPORTDECLARATION,  6));
        state41.put("NATIVE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state56.put("RETURN", new SymbolState(STATEMENTEXPRESSION,  1));
        state202.put("INT", new SymbolState(STATEMENT,  5));
        state26.put("BLOCKSTATEMENTS", new SymbolState(149));
        state131.put("NATIVE", new SymbolState(CLASSDECLARATION,  5));
        state63.put("LBRACE", new SymbolState(METHODDECLARATORREST,  4));
        state202.put("BYTE", new SymbolState(STATEMENT,  5));
        state125.put("COMMA", new SymbolState(N_DOT_ID_0,  3));
        Map<String, SymbolState> state198 = new HashMap<String, SymbolState>();
        rules.put(198, state198);
        state198.put("LPAREN", new SymbolState(110));
        state23.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state87.put("FLOAT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state210.put("RPAREN", new SymbolState(N_COMMA_FORMALPARAMETER_0,  3));
        state91.put("STATIC", new SymbolState(MEMBERDECL,  1));
        state0.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state185.put("SYNCHRONIZED", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state199.put("DO", new SymbolState(4));
        state98.put("TYPE", new SymbolState(150));
        state221.put("VOLATILE", new SymbolState(FIELDDECL,  5));
        state116.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state153.put("FINAL", new SymbolState(INTERFACEMEMBERDECL,  3));
        state56.put("ID", new SymbolState(STATEMENTEXPRESSION,  1));
        state110.put("FORMALPARAMETERS", new SymbolState(151));
        state221.put("STATIC", new SymbolState(FIELDDECL,  5));
        state218.put("SEMI", new SymbolState(29));
        Map<String, SymbolState> state140 = new HashMap<String, SymbolState>();
        rules.put(140, state140);
        state140.put("SEMI", new SymbolState(CONSTANTDECLARATOR,  2));
        state46.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state136.put("LBRACE", new SymbolState(N_COMMA_TYPE_0,  0));
        state31.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  0));
        state126.put("LONG", new SymbolState(N_MODIFIER_0,  2));
        state185.put("VOID", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state39.put("SEMI", new SymbolState(CLASSDECLARATION,  7));
        state24.put("COMMA", new SymbolState(EXPRESSION,  1));
        state53.put("DOUBLE", new SymbolState(48));
        state171.put("STATIC", new SymbolState(FIELDDECL,  5));
        state139.put("VARIABLEDECLARATORREST", new SymbolState(152));
        state190.put("INTERFACE", new SymbolState(N_MODIFIER_0,  0));
        state18.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state28.put("DO", new SymbolState(4));
        state133.put("FLOAT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state17.put("VOIDINTERFACEMETHODDECLARATORREST", new SymbolState(153));
        state129.put("PUBLIC", new SymbolState(CLASSBODY,  3));
        state222.put("PUBLIC", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state33.put("VOID", new SymbolState(MODIFIER,  1));
        state63.put("DOUBLE", new SymbolState(METHODDECLARATORREST,  4));
        state124.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        state186.put("PROTECTED", new SymbolState(MEMBERDECL,  1));
        state2.put("DOUBLE", new SymbolState(STATEMENT,  1));
        state220.put("STATIC", new SymbolState(CLASSDECLARATION,  3));
        state177.put("CHAR", new SymbolState(STATEMENT,  2));
        state49.put("LONG", new SymbolState(METHODBODY,  1));
        state134.put("BASICTYPE", new SymbolState(36));
        state192.put("RBRACE", new SymbolState(STATEMENT,  8));
        state126.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  2));
        state129.put("FINAL", new SymbolState(CLASSBODY,  3));
        state55.put("VOID", new SymbolState(MODIFIER,  1));
        state207.put("LBRACKET", new SymbolState(77));
        state185.put("DOUBLE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state33.put("INT", new SymbolState(MODIFIER,  1));
        state97.put("N_IMPORTDECLARATION_0", new SymbolState(154));
        state82.put("BOOLEAN", new SymbolState(11));
        state30.put("DOUBLE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state0.put("VOLATILE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state219.put("BYTE", new SymbolState(19));
        state37.put("BYTE", new SymbolState(METHODDECL,  4));
        state166.put("PROTECTED", new SymbolState(INTERFACEMEMBERDECL,  1));
        state34.put("NATIVE", new SymbolState(METHODDECL,  2));
        state159.put("SYNCHRONIZED", new SymbolState(TYPEDECLARATION,  2));
        state23.put("ID", new SymbolState(MODIFIER,  1));
        state21.put("N_CLASSBODYDECLARATION_0", new SymbolState(155));
        state204.put("CLASS", new SymbolState(N_MODIFIER_0,  0));
        state83.put("VARIABLEDECLARATORS", new SymbolState(156));
        state41.put("PUBLIC", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state4.put("SEMI", new SymbolState(29));
        state222.put("BYTE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state82.put("DOUBLE", new SymbolState(48));
        state49.put("VOLATILE", new SymbolState(METHODBODY,  1));
        state184.put("LONG", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state186.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        state63.put("SEMI", new SymbolState(METHODDECLARATORREST,  4));
        state221.put("BYTE", new SymbolState(FIELDDECL,  5));
        state28.put("CHAR", new SymbolState(46));
        state51.put("ABSTRACT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state111.put("SEMI", new SymbolState(49));
        state55.put("SEMI", new SymbolState(MODIFIER,  1));
        state64.put("PIPE", new SymbolState(STATEMENT,  9));
        state23.put("INT", new SymbolState(MODIFIER,  1));
        state123.put("STATIC", new SymbolState(CLASSDECLARATION,  5));
        state127.put("DOUBLE", new SymbolState(BLOCKSTATEMENT,  1));
        state7.put("PIPE", new SymbolState(24));
        state84.put("TYPE", new SymbolState(157));
        state97.put("PUBLIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state34.put("ABSTRACT", new SymbolState(METHODDECL,  2));
        state24.put("BOOLEAN", new SymbolState(EXPRESSION,  1));
        state49.put("SYNCHRONIZED", new SymbolState(METHODBODY,  1));
        state84.put("ID", new SymbolState(3));
        state29.put("FLOAT", new SymbolState(STATEMENT,  1));
        state131.put("CLASS", new SymbolState(CLASSDECLARATION,  5));
        state171.put("FINAL", new SymbolState(FIELDDECL,  5));
        state52.put("INT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state106.put("TRANSIENT", new SymbolState(METHODDECL,  4));
        Map<String, SymbolState> state156 = new HashMap<String, SymbolState>();
        rules.put(156, state156);
        state156.put("SEMI", new SymbolState(FORINIT,  2));
        state128.put("BOOLEAN", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state124.put("SHORT", new SymbolState(N_MODIFIER_0,  0));
        state124.put("INT", new SymbolState(N_MODIFIER_0,  0));
        state165.put("EXPRESSION", new SymbolState(56));
        state13.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state27.put("SHORT", new SymbolState(MODIFIER,  1));
        state148.put("TRANSIENT", new SymbolState(INTERFACEBODY,  3));
        state39.put("VOLATILE", new SymbolState(CLASSDECLARATION,  7));
        state97.put("FINAL", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state71.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state174.put("FINAL", new SymbolState(INTERFACEDECLARATION,  3));
        state10.put("ID", new SymbolState(METHODBODY,  1));
        state41.put("SEMI", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state65.put("N_COMMA_VARIABLEDECLARATOR_0", new SymbolState(158));
        state14.put("COMMA", new SymbolState(BASICTYPE,  1));
        state169.put("SEMI", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state71.put("ID", new SymbolState(MODIFIER,  1));
        state133.put("ID", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state124.put("VOID", new SymbolState(N_MODIFIER_0,  0));
        state204.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state50.put("CHAR", new SymbolState(MODIFIER,  1));
        state183.put("ABSTRACT", new SymbolState(MEMBERDECL,  1));
        state28.put("ID", new SymbolState(3));
        state101.put("LONG", new SymbolState(79));
        state13.put("CLASS", new SymbolState(MODIFIER,  1));
        state166.put("STATIC", new SymbolState(INTERFACEMEMBERDECL,  1));
        state192.put("RETURN", new SymbolState(STATEMENT,  8));
        state39.put("FINAL", new SymbolState(CLASSDECLARATION,  7));
        state91.put("ID", new SymbolState(MEMBERDECL,  1));
        state47.put("INT", new SymbolState(MODIFIER,  1));
        state202.put("PIPE", new SymbolState(STATEMENT,  5));
        state171.put("PRIVATE", new SymbolState(FIELDDECL,  5));
        state155.put("SEMI", new SymbolState(N_MODIFIER_0,  0));
        state161.put("COMMA", new SymbolState(CONSTANTDECLARATORREST,  3));
        state30.put("PUBLIC", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state109.put("CHAR", new SymbolState(46));
        state10.put("INT", new SymbolState(METHODBODY,  1));
        state68.put("LBRACE", new SymbolState(PAREXPRESSION,  3));
        state108.put("VARIABLEDECLARATOR", new SymbolState(65));
        state133.put("STATIC", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state128.put("DOUBLE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state53.put("LONG", new SymbolState(79));
        state194.put("DOUBLE", new SymbolState(STATEMENT,  3));
        state165.put("BOOLEAN", new SymbolState(11));
        state160.put("INTERFACEDECLARATION", new SymbolState(159));
        state70.put("SEMI", new SymbolState(STATEMENT,  1));
        state69.put("FINAL", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state131.put("PUBLIC", new SymbolState(CLASSDECLARATION,  5));
        state129.put("STRICTFP", new SymbolState(CLASSBODY,  3));
        state169.put("BYTE", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state15.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state192.put("SEMI", new SymbolState(STATEMENT,  8));
        state135.put("VOLATILE", new SymbolState(INTERFACEDECLARATION,  5));
        state33.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state221.put("NATIVE", new SymbolState(FIELDDECL,  5));
        state190.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        state174.put("PROTECTED", new SymbolState(INTERFACEDECLARATION,  3));
        state171.put("ABSTRACT", new SymbolState(FIELDDECL,  5));
        state204.put("N_MODIFIER_0", new SymbolState(160));
        state87.put("WHILE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state123.put("PUBLIC", new SymbolState(CLASSDECLARATION,  5));
        state166.put("PRIVATE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state24.put("LONG", new SymbolState(EXPRESSION,  1));
        state178.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  2));
        state28.put("PIPE", new SymbolState(24));
        state32.put("BYTE", new SymbolState(MODIFIER,  1));
        state113.put("SEMI", new SymbolState(CONSTANTDECLARATORSREST,  2));
        state148.put("FINAL", new SymbolState(INTERFACEBODY,  3));
        state13.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state214.put("FINAL", new SymbolState(71));
        state50.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state211.put("VARIABLEINITIALIZER", new SymbolState(161));
        state49.put("CHAR", new SymbolState(METHODBODY,  1));
        state212.put("BOOLEAN", new SymbolState(11));
        state135.put("STATIC", new SymbolState(INTERFACEDECLARATION,  5));
        state26.put("CHAR", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state194.put("FLOAT", new SymbolState(STATEMENT,  3));
        state203.put("NATIVE", new SymbolState(IMPORTDECLARATION,  4));
        state219.put("INT", new SymbolState(15));
        state133.put("BOOLEAN", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state34.put("FLOAT", new SymbolState(METHODDECL,  2));
        state41.put("INT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state204.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        state136.put("N_COMMA_TYPE_0", new SymbolState(162));
        state6.put("TYPE", new SymbolState(163));
        state27.put("SEMI", new SymbolState(MODIFIER,  1));
        state160.put("VOLATILE", new SymbolState(13));
        state190.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state186.put("ABSTRACT", new SymbolState(MEMBERDECL,  1));
        state64.put("FOR", new SymbolState(STATEMENT,  9));
        state29.put("PIPE", new SymbolState(STATEMENT,  1));
        state64.put("RBRACE", new SymbolState(STATEMENT,  9));
        state26.put("INT", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state137.put("INT", new SymbolState(CLASSBODYDECLARATION,  2));
        state16.put("VOLATILE", new SymbolState(TYPEDECLARATION,  1));
        state46.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state193.put("LONG", new SymbolState(BLOCK,  3));
        Map<String, SymbolState> state112 = new HashMap<String, SymbolState>();
        rules.put(112, state112);
        state112.put("IF", new SymbolState(S,  2));
        state89.put("CHAR", new SymbolState(BLOCKSTATEMENT,  1));
        state55.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state196.put("SEMI", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state37.put("INT", new SymbolState(METHODDECL,  4));
        state133.put("ABSTRACT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state159.put("PRIVATE", new SymbolState(TYPEDECLARATION,  2));
        state116.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state11.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state111.put("BLOCK", new SymbolState(10));
        state129.put("PROTECTED", new SymbolState(CLASSBODY,  3));
        state127.put("WHILE", new SymbolState(BLOCKSTATEMENT,  1));
        state138.put("VARIABLEDECLARATOR", new SymbolState(164));
        state11.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state63.put("FINAL", new SymbolState(METHODDECLARATORREST,  4));
        state137.put("BYTE", new SymbolState(CLASSBODYDECLARATION,  2));
        state75.put("ID", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state37.put("STATIC", new SymbolState(METHODDECL,  4));
        state128.put("DO", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state49.put("PRIVATE", new SymbolState(METHODBODY,  1));
        state89.put("LONG", new SymbolState(BLOCKSTATEMENT,  1));
        state47.put("CHAR", new SymbolState(MODIFIER,  1));
        state204.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        state27.put("CHAR", new SymbolState(MODIFIER,  1));
        state220.put("VOLATILE", new SymbolState(CLASSDECLARATION,  3));
        state15.put("COMMA", new SymbolState(BASICTYPE,  1));
        state27.put("CLASS", new SymbolState(MODIFIER,  1));
        state52.put("VOID", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state67.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state22.put("SEMI", new SymbolState(QUALIFIEDIDENTIFIER,  2));
        state97.put("STATIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state6.put("SHORT", new SymbolState(18));
        state99.put("LBRACE", new SymbolState(BRACKETSOPT,  2));
        state134.put("CHAR", new SymbolState(46));
        state171.put("SEMI", new SymbolState(FIELDDECL,  5));
        state71.put("DOUBLE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state81 = new HashMap<String, SymbolState>();
        rules.put(81, state81);
        state81.put("RPAREN", new SymbolState(VARIABLEDECLARATORID,  2));
        Map<String, SymbolState> state54 = new HashMap<String, SymbolState>();
        rules.put(54, state54);
        state54.put("LPAREN", new SymbolState(165));
        state24.put("WHILE", new SymbolState(EXPRESSION,  1));
        state56.put("FINAL", new SymbolState(STATEMENTEXPRESSION,  1));
        state220.put("SEMI", new SymbolState(CLASSDECLARATION,  3));
        state190.put("N_MODIFIER_0", new SymbolState(160));
        state45.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state26.put("LONG", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state64.put("BYTE", new SymbolState(STATEMENT,  9));
        state131.put("EOF", new SymbolState(CLASSDECLARATION,  5));
        state116.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state67.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state166.put("ABSTRACT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state214.put("INTERFACEMETHODORFIELDDECL", new SymbolState(166));
        state221.put("SYNCHRONIZED", new SymbolState(FIELDDECL,  5));
        state165.put("FLOAT", new SymbolState(14));
        state37.put("SYNCHRONIZED", new SymbolState(METHODDECL,  4));
        state194.put("BYTE", new SymbolState(STATEMENT,  3));
        state10.put("LONG", new SymbolState(METHODBODY,  1));
        state4.put("WHILE", new SymbolState(58));
        state16.put("CLASS", new SymbolState(TYPEDECLARATION,  1));
        state221.put("ABSTRACT", new SymbolState(FIELDDECL,  5));
        state6.put("BYTE", new SymbolState(19));
        state70.put("FLOAT", new SymbolState(STATEMENT,  1));
        state10.put("PUBLIC", new SymbolState(METHODBODY,  1));
        state24.put("FLOAT", new SymbolState(EXPRESSION,  1));
        state200.put("FORMALPARAMETERS", new SymbolState(167));
        state78.put("DO", new SymbolState(STATEMENT,  3));
        state55.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state185.put("ABSTRACT", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state71.put("VOID", new SymbolState(MODIFIER,  1));
        state202.put("WHILE", new SymbolState(STATEMENT,  5));
        state37.put("PUBLIC", new SymbolState(METHODDECL,  4));
        state166.put("PUBLIC", new SymbolState(INTERFACEMEMBERDECL,  1));
        state44.put("LBRACE", new SymbolState(26));
        state64.put("SEMI", new SymbolState(STATEMENT,  9));
        state55.put("FLOAT", new SymbolState(MODIFIER,  1));
        state124.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state141.put("ID", new SymbolState(168));
        state39.put("STATIC", new SymbolState(CLASSDECLARATION,  7));
        state177.put("BOOLEAN", new SymbolState(STATEMENT,  2));
        state29.put("SEMI", new SymbolState(STATEMENT,  1));
        state69.put("FLOAT", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state193.put("INT", new SymbolState(BLOCK,  3));
        state71.put("INT", new SymbolState(MODIFIER,  1));
        state171.put("DOUBLE", new SymbolState(FIELDDECL,  5));
        state165.put("BASICTYPE", new SymbolState(36));
        state183.put("NATIVE", new SymbolState(MEMBERDECL,  1));
        state218.put("EXPRESSION", new SymbolState(56));
        state47.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state30.put("LONG", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state68.put("RETURN", new SymbolState(PAREXPRESSION,  3));
        state35.put("INTERFACEMETHODORFIELDREST", new SymbolState(169));
        state69.put("LONG", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state207.put("LBRACE", new SymbolState(BRACKETSOPT,  0));
        state34.put("PRIVATE", new SymbolState(METHODDECL,  2));
        state135.put("PRIVATE", new SymbolState(INTERFACEDECLARATION,  5));
        state212.put("CHAR", new SymbolState(46));
        state29.put("FOR", new SymbolState(STATEMENT,  1));
        Map<String, SymbolState> state57 = new HashMap<String, SymbolState>();
        rules.put(57, state57);
        state57.put("SEMI", new SymbolState(170));
        state101.put("DOUBLE", new SymbolState(48));
        Map<String, SymbolState> state121 = new HashMap<String, SymbolState>();
        rules.put(121, state121);
        state121.put("ID", new SymbolState(88));
        state169.put("SHORT", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state56.put("LBRACE", new SymbolState(STATEMENTEXPRESSION,  1));
        state221.put("PRIVATE", new SymbolState(FIELDDECL,  5));
        state186.put("ID", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state152 = new HashMap<String, SymbolState>();
        rules.put(152, state152);
        state152.put("SEMI", new SymbolState(171));
        state196.put("FOR", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state47.put("LONG", new SymbolState(MODIFIER,  1));
        state47.put("CLASS", new SymbolState(MODIFIER,  1));
        state222.put("ABSTRACT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state129.put("PRIVATE", new SymbolState(CLASSBODY,  3));
        state78.put("PIPE", new SymbolState(STATEMENT,  3));
        state33.put("CLASS", new SymbolState(MODIFIER,  1));
        state177.put("FLOAT", new SymbolState(STATEMENT,  2));
        state88.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  0));
        state193.put("CHAR", new SymbolState(BLOCK,  3));
        state109.put("BYTE", new SymbolState(19));
        state27.put("FINAL", new SymbolState(MODIFIER,  1));
        state205.put("ID", new SymbolState(TYPE,  3));
        state84.put("BYTE", new SymbolState(19));
        state50.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state218.put("LBRACE", new SymbolState(26));
        state213.put("METHODDECLARATORREST", new SymbolState(172));
        state23.put("BYTE", new SymbolState(MODIFIER,  1));
        state154.put("ABSTRACT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state123.put("NATIVE", new SymbolState(CLASSDECLARATION,  5));
        state128.put("ID", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state91.put("PUBLIC", new SymbolState(MEMBERDECL,  1));
        state105.put("MORESTATEMENTEXPRESSIONS", new SymbolState(173));
        state195.put("INTERFACEBODY", new SymbolState(174));
        state207.put("ID", new SymbolState(BRACKETSOPT,  0));
        state26.put("DOUBLE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state91.put("TRANSIENT", new SymbolState(MEMBERDECL,  1));
        state89.put("DOUBLE", new SymbolState(BLOCKSTATEMENT,  1));
        state193.put("BYTE", new SymbolState(BLOCK,  3));
        state126.put("BYTE", new SymbolState(N_MODIFIER_0,  2));
        state87.put("PIPE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state129.put("VOLATILE", new SymbolState(CLASSBODY,  3));
        state71.put("BYTE", new SymbolState(MODIFIER,  1));
        state190.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state86 = new HashMap<String, SymbolState>();
        rules.put(86, state86);
        state86.put("VARIABLEDECLARATORID", new SymbolState(175));
        state134.put("DOUBLE", new SymbolState(48));
        state203.put("TRANSIENT", new SymbolState(IMPORTDECLARATION,  4));
        state45.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state31.put("SYNCHRONIZED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state160.put("TRANSIENT", new SymbolState(32));
        state42.put("SEMI", new SymbolState(FORMALPARAMETERS,  4));
        state78.put("CHAR", new SymbolState(STATEMENT,  3));
        state1.put("ID", new SymbolState(176));
        state185.put("RBRACE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state182.put("LBRACE", new SymbolState(FORMALPARAMETERS,  2));
        state21.put("VOID", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state137.put("VOID", new SymbolState(CLASSBODYDECLARATION,  2));
        state126.put("PRIVATE", new SymbolState(N_MODIFIER_0,  2));
        state27.put("BYTE", new SymbolState(MODIFIER,  1));
        state45.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state67.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state21.put("BYTE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state3.put("IMPLEMENTS", new SymbolState(N_DOT_ID_0,  0));
        state72.put("VOLATILE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state126.put("NATIVE", new SymbolState(N_MODIFIER_0,  2));
        state184.put("TRANSIENT", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state193.put("NATIVE", new SymbolState(BLOCK,  3));
        state174.put("PUBLIC", new SymbolState(INTERFACEDECLARATION,  3));
        state39.put("INTERFACE", new SymbolState(CLASSDECLARATION,  7));
        state50.put("FINAL", new SymbolState(MODIFIER,  1));
        state4.put("BLOCK", new SymbolState(70));
        state196.put("WHILE", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state202.put("CHAR", new SymbolState(STATEMENT,  5));
        state11.put("ID", new SymbolState(BASICTYPE,  1));
        state89.put("ID", new SymbolState(BLOCKSTATEMENT,  1));
        state97.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state218.put("BLOCK", new SymbolState(70));
        state50.put("VOID", new SymbolState(MODIFIER,  1));
        state137.put("FINAL", new SymbolState(CLASSBODYDECLARATION,  2));
        state126.put("FINAL", new SymbolState(N_MODIFIER_0,  2));
        state46.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state34.put("TRANSIENT", new SymbolState(METHODDECL,  2));
        state143.put("LBRACKET", new SymbolState(77));
        state45.put("CLASS", new SymbolState(MODIFIER,  1));
        state13.put("SHORT", new SymbolState(MODIFIER,  1));
        state122.put("COMMA", new SymbolState(N_COMMA_FORMALPARAMETER_0,  0));
        state2.put("WHILE", new SymbolState(STATEMENT,  1));
        state2.put("ID", new SymbolState(STATEMENT,  1));
        state133.put("DOUBLE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state25.put("SEMI", new SymbolState(177));
        state167.put("SEMI", new SymbolState(49));
        state184.put("PROTECTED", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state194.put("CHAR", new SymbolState(STATEMENT,  3));
        state41.put("PROTECTED", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state98.put("CHAR", new SymbolState(46));
        state45.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state185.put("PRIVATE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state69.put("PRIVATE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state27.put("FLOAT", new SymbolState(MODIFIER,  1));
        state194.put("PIPE", new SymbolState(STATEMENT,  3));
        state23.put("SEMI", new SymbolState(MODIFIER,  1));
        state153.put("DOUBLE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state47.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state51.put("VOID", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state185.put("VOLATILE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state7.put("VARIABLEINITIALIZER", new SymbolState(178));
        state153.put("INT", new SymbolState(INTERFACEMEMBERDECL,  3));
        state194.put("RBRACE", new SymbolState(STATEMENT,  3));
        state211.put("PIPE", new SymbolState(24));
        state166.put("NATIVE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state116.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state196.put("FLOAT", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state123.put("STRICTFP", new SymbolState(CLASSDECLARATION,  5));
        state56.put("LONG", new SymbolState(STATEMENTEXPRESSION,  1));
        state50.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state148.put("ABSTRACT", new SymbolState(INTERFACEBODY,  3));
        state200.put("LBRACKET", new SymbolState(N_DOT_ID_0,  0));
        state51.put("RBRACE", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state137.put("STATIC", new SymbolState(CLASSBODYDECLARATION,  2));
        state4.put("STATEMENT", new SymbolState(179));
        state192.put("BOOLEAN", new SymbolState(STATEMENT,  8));
        state148.put("INTERFACE", new SymbolState(INTERFACEBODY,  3));
        state169.put("PROTECTED", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state185.put("CHAR", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state51.put("PUBLIC", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state97.put("PRIVATE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state175.put("RPAREN", new SymbolState(FORMALPARAMETER,  3));
        state91.put("PROTECTED", new SymbolState(MEMBERDECL,  1));
        state60.put("SEMI", new SymbolState(VARIABLEINITIALIZER,  1));
        state51.put("INT", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state87.put("FOR", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state98.put("FLOAT", new SymbolState(14));
        state189.put("RPAREN", new SymbolState(N_COMMA_STATEMENTEXPRESSION_0,  3));
        state222.put("SHORT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state219.put("LONG", new SymbolState(79));
        state170.put("IMPORT", new SymbolState(IMPORTDECLARATION,  6));
        state205.put("COMMA", new SymbolState(TYPE,  3));
        state127.put("LONG", new SymbolState(BLOCKSTATEMENT,  1));
        state160.put("CLASSDECLARATION", new SymbolState(180));
        state16.put("SYNCHRONIZED", new SymbolState(TYPEDECLARATION,  1));
        state27.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state193.put("ABSTRACT", new SymbolState(BLOCK,  3));
        state183.put("PRIVATE", new SymbolState(MEMBERDECL,  1));
        state67.put("ABSTRACT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        Map<String, SymbolState> state8 = new HashMap<String, SymbolState>();
        rules.put(8, state8);
        state8.put("ID", new SymbolState(181));
        state67.put("NATIVE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state89.put("RBRACE", new SymbolState(BLOCKSTATEMENT,  1));
        state30.put("VOID", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state25.put("PIPE", new SymbolState(24));
        state103.put("SEMI", new SymbolState(BRACKETSOPT,  0));
        state24.put("DOUBLE", new SymbolState(EXPRESSION,  1));
        state30.put("SYNCHRONIZED", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state109.put("RPAREN", new SymbolState(182));
        state125.put("IMPLEMENTS", new SymbolState(N_DOT_ID_0,  3));
        state91.put("ABSTRACT", new SymbolState(MEMBERDECL,  1));
        state166.put("BOOLEAN", new SymbolState(INTERFACEMEMBERDECL,  1));
        state207.put("COMMA", new SymbolState(BRACKETSOPT,  0));
        state19.put("COMMA", new SymbolState(BASICTYPE,  1));
        state82.put("SEMI", new SymbolState(183));
        state89.put("BOOLEAN", new SymbolState(BLOCKSTATEMENT,  1));
        state69.put("NATIVE", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        Map<String, SymbolState> state59 = new HashMap<String, SymbolState>();
        rules.put(59, state59);
        state59.put("SEMI", new SymbolState(184));
        state26.put("WHILE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state45.put("INT", new SymbolState(MODIFIER,  1));
        state171.put("STRICTFP", new SymbolState(FIELDDECL,  5));
        state171.put("VOID", new SymbolState(FIELDDECL,  5));
        state27.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state34.put("STRICTFP", new SymbolState(METHODDECL,  2));
        state106.put("BOOLEAN", new SymbolState(METHODDECL,  4));
        state124.put("SEMI", new SymbolState(185));
        state24.put("RBRACE", new SymbolState(EXPRESSION,  1));
        state129.put("TRANSIENT", new SymbolState(CLASSBODY,  3));
        state56.put("DOUBLE", new SymbolState(STATEMENTEXPRESSION,  1));
        state212.put("SHORT", new SymbolState(18));
        state185.put("STATIC", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state84.put("BOOLEAN", new SymbolState(11));
        state203.put("STATIC", new SymbolState(IMPORTDECLARATION,  4));
        state13.put("ID", new SymbolState(MODIFIER,  1));
        state133.put("INT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state128.put("PIPE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state82.put("METHODDECL", new SymbolState(186));
        state123.put("SEMI", new SymbolState(CLASSDECLARATION,  5));
        state32.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state45.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state0.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state212.put("TYPELIST", new SymbolState(187));
        state163.put("ID", new SymbolState(88));
        state109.put("ID", new SymbolState(3));
        state49.put("BOOLEAN", new SymbolState(METHODBODY,  1));
        state202.put("BOOLEAN", new SymbolState(STATEMENT,  5));
        state186.put("INT", new SymbolState(MEMBERDECL,  1));
        state214.put("FLOAT", new SymbolState(14));
        state124.put("CHAR", new SymbolState(N_MODIFIER_0,  0));
        state142.put("RPAREN", new SymbolState(FORMALPARAMETER,  2));
        state30.put("CHAR", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state202.put("SHORT", new SymbolState(STATEMENT,  5));
        state41.put("CHAR", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state49.put("BYTE", new SymbolState(METHODBODY,  1));
        state6.put("FLOAT", new SymbolState(14));
        state221.put("SEMI", new SymbolState(FIELDDECL,  5));
        state34.put("BOOLEAN", new SymbolState(METHODDECL,  2));
        state34.put("INT", new SymbolState(METHODDECL,  2));
        state160.put("INTERFACE", new SymbolState(188));
        state204.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state6.put("BOOLEAN", new SymbolState(11));
        state34.put("RBRACE", new SymbolState(METHODDECL,  2));
        state177.put("WHILE", new SymbolState(STATEMENT,  2));
        state106.put("NATIVE", new SymbolState(METHODDECL,  4));
        state84.put("DOUBLE", new SymbolState(48));
        state135.put("EOF", new SymbolState(INTERFACEDECLARATION,  5));
        state83.put("ID", new SymbolState(88));
        state28.put("SHORT", new SymbolState(18));
        state80.put("LBRACE", new SymbolState(21));
        state9.put("STATEMENTEXPRESSION", new SymbolState(189));
        state184.put("DOUBLE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state37.put("RBRACE", new SymbolState(METHODDECL,  4));
        state13.put("FLOAT", new SymbolState(MODIFIER,  1));
        state33.put("ID", new SymbolState(MODIFIER,  1));
        state31.put("N_TYPEDECLARATION_0", new SymbolState(190));
        state87.put("FINAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state190.put("CLASS", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state173 = new HashMap<String, SymbolState>();
        rules.put(173, state173);
        state173.put("RPAREN", new SymbolState(FORUPDATE,  2));
        state220.put("PROTECTED", new SymbolState(CLASSDECLARATION,  3));
        state23.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state106.put("LONG", new SymbolState(METHODDECL,  4));
        state214.put("BYTE", new SymbolState(19));
        state31.put("PRIVATE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state99.put("COMMA", new SymbolState(BRACKETSOPT,  2));
        state221.put("FINAL", new SymbolState(FIELDDECL,  5));
        state135.put("NATIVE", new SymbolState(INTERFACEDECLARATION,  5));
        state193.put("PROTECTED", new SymbolState(BLOCK,  3));
        state52.put("DOUBLE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state31.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  0));
        state32.put("INT", new SymbolState(MODIFIER,  1));
        state91.put("FINAL", new SymbolState(MEMBERDECL,  1));
        state89.put("PIPE", new SymbolState(BLOCKSTATEMENT,  1));
        state122.put("N_COMMA_FORMALPARAMETER_0", new SymbolState(191));
        state218.put("STATEMENT", new SymbolState(192));
        Map<String, SymbolState> state149 = new HashMap<String, SymbolState>();
        rules.put(149, state149);
        state149.put("RBRACE", new SymbolState(193));
        state72.put("STRICTFP", new SymbolState(N_TYPEDECLARATION_0,  2));
        state222.put("STATIC", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state51.put("STRICTFP", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state170.put("EOF", new SymbolState(IMPORTDECLARATION,  6));
        state204.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state199.put("STATEMENT", new SymbolState(194));
        state184.put("STATIC", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state123.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  5));
        state159.put("VOLATILE", new SymbolState(TYPEDECLARATION,  2));
        state109.put("TYPE", new SymbolState(157));
        state42.put("LBRACKET", new SymbolState(FORMALPARAMETERS,  4));
        Map<String, SymbolState> state188 = new HashMap<String, SymbolState>();
        rules.put(188, state188);
        state188.put("ID", new SymbolState(195));
        state155.put("LONG", new SymbolState(N_MODIFIER_0,  0));
        state89.put("DO", new SymbolState(BLOCKSTATEMENT,  1));
        state116.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state10.put("SYNCHRONIZED", new SymbolState(METHODBODY,  1));
        state71.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state63.put("BOOLEAN", new SymbolState(METHODDECLARATORREST,  4));
        state171.put("PUBLIC", new SymbolState(FIELDDECL,  5));
        state39.put("PROTECTED", new SymbolState(CLASSDECLARATION,  7));
        state71.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state63.put("ID", new SymbolState(METHODDECLARATORREST,  4));
        state55.put("BYTE", new SymbolState(MODIFIER,  1));
        state6.put("ID", new SymbolState(3));
        state170.put("SYNCHRONIZED", new SymbolState(IMPORTDECLARATION,  6));
        state49.put("NATIVE", new SymbolState(METHODBODY,  1));
        state140.put("COMMA", new SymbolState(CONSTANTDECLARATOR,  2));
        state218.put("PIPE", new SymbolState(24));
        state89.put("FLOAT", new SymbolState(BLOCKSTATEMENT,  1));
        state193.put("FOR", new SymbolState(BLOCK,  3));
        state222.put("TRANSIENT", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state186.put("TRANSIENT", new SymbolState(MEMBERDECL,  1));
        state69.put("STATIC", new SymbolState(INTERFACEMETHODORFIELDREST,  2));
        state52.put("TRANSIENT", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state101.put("INT", new SymbolState(15));
        state41.put("LONG", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state51.put("SEMI", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state134.put("INT", new SymbolState(15));
        state196.put("INT", new SymbolState(N_BLOCKSTATEMENT_0,  2));
        state72.put("ABSTRACT", new SymbolState(N_TYPEDECLARATION_0,  2));
        state30.put("FLOAT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state199.put("PIPE", new SymbolState(24));
        state28.put("BLOCKSTATEMENT", new SymbolState(196));
        state31.put("VOLATILE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state214.put("CHAR", new SymbolState(46));
        state82.put("ABSTRACT", new SymbolState(50));
        state172.put("BLOCK", new SymbolState(10));
        state28.put("LONG", new SymbolState(79));
        state153.put("VOID", new SymbolState(INTERFACEMEMBERDECL,  3));
        state106.put("RBRACE", new SymbolState(METHODDECL,  4));
        state2.put("DO", new SymbolState(STATEMENT,  1));
        state126.put("STATIC", new SymbolState(N_MODIFIER_0,  2));
        state50.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state2.put("SEMI", new SymbolState(STATEMENT,  1));
        state121.put("VARIABLEDECLARATORS", new SymbolState(197));
        state87.put("LBRACE", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state90.put("ID", new SymbolState(198));
        state48.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state23.put("NATIVE", new SymbolState(MODIFIER,  1));
        state174.put("INTERFACE", new SymbolState(INTERFACEDECLARATION,  3));
        state126.put("ID", new SymbolState(N_MODIFIER_0,  2));
        state58.put("PAREXPRESSION", new SymbolState(199));
        state34.put("ID", new SymbolState(METHODDECL,  2));
        state82.put("ID", new SymbolState(200));
        state63.put("PRIVATE", new SymbolState(METHODDECLARATORREST,  4));
        state34.put("VOID", new SymbolState(METHODDECL,  2));
        state75.put("SEMI", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state56.put("PIPE", new SymbolState(STATEMENTEXPRESSION,  1));
        state27.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state153.put("PROTECTED", new SymbolState(INTERFACEMEMBERDECL,  3));
        state174.put("EOF", new SymbolState(INTERFACEDECLARATION,  3));
        state32.put("SHORT", new SymbolState(MODIFIER,  1));
        state45.put("SHORT", new SymbolState(MODIFIER,  1));
        state27.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state134.put("SHORT", new SymbolState(18));
        state186.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        state99.put("ID", new SymbolState(BRACKETSOPT,  2));
        state23.put("LONG", new SymbolState(MODIFIER,  1));
        state33.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state49.put("SHORT", new SymbolState(METHODBODY,  1));
        state45.put("VOID", new SymbolState(MODIFIER,  1));
        state34.put("SEMI", new SymbolState(METHODDECL,  2));
        state14.put("ID", new SymbolState(BASICTYPE,  1));
        state45.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state23.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state190.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state82.put("LONG", new SymbolState(79));
        state137.put("RBRACE", new SymbolState(CLASSBODYDECLARATION,  2));
        state26.put("DO", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state49.put("VOID", new SymbolState(METHODBODY,  1));
        state63.put("PUBLIC", new SymbolState(METHODDECLARATORREST,  4));
        state64.put("CHAR", new SymbolState(STATEMENT,  9));
        state91.put("LONG", new SymbolState(MEMBERDECL,  1));
        state221.put("RBRACE", new SymbolState(FIELDDECL,  5));
        state28.put("INT", new SymbolState(15));
        state174.put("PRIVATE", new SymbolState(INTERFACEDECLARATION,  3));
        state52.put("CHAR", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state32.put("LONG", new SymbolState(MODIFIER,  1));
        state87.put("CHAR", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  4));
        state48.put("ID", new SymbolState(BASICTYPE,  1));
        state148.put("PROTECTED", new SymbolState(INTERFACEBODY,  3));
        state185.put("FINAL", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state75.put("PUBLIC", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state33.put("NATIVE", new SymbolState(MODIFIER,  1));
        state22.put("LBRACKET", new SymbolState(QUALIFIEDIDENTIFIER,  2));
        state212.put("FLOAT", new SymbolState(14));
        state221.put("BOOLEAN", new SymbolState(FIELDDECL,  5));
        state88.put("VARIABLEDECLARATORREST", new SymbolState(201));
        state137.put("FLOAT", new SymbolState(CLASSBODYDECLARATION,  2));
        state97.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state30.put("ABSTRACT", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state220.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  3));
        state10.put("FLOAT", new SymbolState(METHODBODY,  1));
        state4.put("DO", new SymbolState(4));
        state47.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state184.put("PUBLIC", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state47.put("BYTE", new SymbolState(MODIFIER,  1));
        state47.put("FLOAT", new SymbolState(MODIFIER,  1));
        state222.put("BOOLEAN", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state133.put("TRANSIENT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state153.put("STATIC", new SymbolState(INTERFACEMEMBERDECL,  3));
        state2.put("INT", new SymbolState(STATEMENT,  1));
        state49.put("STATIC", new SymbolState(METHODBODY,  1));
        state32.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state177.put("DOUBLE", new SymbolState(STATEMENT,  2));
        state24.put("ID", new SymbolState(EXPRESSION,  1));
        state123.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  5));
        state128.put("FINAL", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state38.put("ID", new SymbolState(BRACKETSOPT,  0));
        state160.put("SYNCHRONIZED", new SymbolState(116));
        state144.put("BYTE", new SymbolState(METHODDECL,  2));
        state170.put("SEMI", new SymbolState(IMPORTDECLARATION,  6));
        state98.put("SHORT", new SymbolState(18));
        state127.put("ID", new SymbolState(BLOCKSTATEMENT,  1));
        state193.put("PIPE", new SymbolState(BLOCK,  3));
        state82.put("VOLATILE", new SymbolState(13));
        state10.put("VOLATILE", new SymbolState(METHODBODY,  1));
        Map<String, SymbolState> state76 = new HashMap<String, SymbolState>();
        rules.put(76, state76);
        state76.put("SEMI", new SymbolState(202));
        state26.put("ID", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state126.put("STRICTFP", new SymbolState(N_MODIFIER_0,  2));
        state192.put("FOR", new SymbolState(STATEMENT,  8));
        state24.put("FOR", new SymbolState(EXPRESSION,  1));
        state193.put("WHILE", new SymbolState(BLOCK,  3));
        state98.put("BASICTYPE", new SymbolState(36));
        state145.put("SEMI", new SymbolState(203));
        state171.put("LONG", new SymbolState(FIELDDECL,  5));
        state154.put("PUBLIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state56.put("RPAREN", new SymbolState(STATEMENTEXPRESSION,  1));
        state135.put("STRICTFP", new SymbolState(INTERFACEDECLARATION,  5));
        state177.put("FOR", new SymbolState(STATEMENT,  2));
        state28.put("BOOLEAN", new SymbolState(11));
        state194.put("DO", new SymbolState(STATEMENT,  3));
        state186.put("PUBLIC", new SymbolState(MEMBERDECL,  1));
        state106.put("SYNCHRONIZED", new SymbolState(METHODDECL,  4));
        state166.put("SHORT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state154.put("N_TYPEDECLARATION_0", new SymbolState(204));
        state28.put("FLOAT", new SymbolState(14));
        state166.put("TRANSIENT", new SymbolState(INTERFACEMEMBERDECL,  1));
        state207.put("BRACKETSOPT", new SymbolState(205));
        state81.put("COMMA", new SymbolState(VARIABLEDECLARATORID,  2));
        state71.put("NATIVE", new SymbolState(MODIFIER,  1));
        state52.put("PROTECTED", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state75.put("INT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state144.put("INT", new SymbolState(METHODDECL,  2));
        state146.put("ID", new SymbolState(125));
        state222.put("LONG", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state22.put("ID", new SymbolState(QUALIFIEDIDENTIFIER,  2));
        state218.put("RETURN", new SymbolState(25));
        state35.put("CONSTANTDECLARATORREST", new SymbolState(206));
        state184.put("ID", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state155.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        state50.put("ID", new SymbolState(MODIFIER,  1));
        state64.put("LONG", new SymbolState(STATEMENT,  9));
        state135.put("TRANSIENT", new SymbolState(INTERFACEDECLARATION,  5));
        state49.put("TRANSIENT", new SymbolState(METHODBODY,  1));
        state180.put("INTERFACE", new SymbolState(TYPEDECLARATION,  2));
        state75.put("ABSTRACT", new SymbolState(VOIDINTERFACEMETHODDECLARATORREST,  2));
        state3.put("N_DOT_ID_0", new SymbolState(207));
        state166.put("RBRACE", new SymbolState(INTERFACEMEMBERDECL,  1));
        state38.put("BRACKETSOPT", new SymbolState(208));
        state6.put("CHAR", new SymbolState(46));
        state154.put("PROTECTED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state53.put("TYPE", new SymbolState(209));
        state106.put("PRIVATE", new SymbolState(METHODDECL,  4));
        state33.put("BYTE", new SymbolState(MODIFIER,  1));
        state84.put("FORMALPARAMETER", new SymbolState(210));
        state91.put("BYTE", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state62 = new HashMap<String, SymbolState>();
        rules.put(62, state62);
        state62.put("BECOMES", new SymbolState(211));
        state70.put("PIPE", new SymbolState(STATEMENT,  1));
        state68.put("PIPE", new SymbolState(PAREXPRESSION,  3));
        state144.put("STATIC", new SymbolState(METHODDECL,  2));
        state26.put("FLOAT", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state185.put("PUBLIC", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state180.put("ABSTRACT", new SymbolState(TYPEDECLARATION,  2));
        state166.put("SEMI", new SymbolState(INTERFACEMEMBERDECL,  1));
        state184.put("FINAL", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state183.put("INT", new SymbolState(MEMBERDECL,  1));
        state21.put("DOUBLE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state221.put("LONG", new SymbolState(FIELDDECL,  5));
        state137.put("BOOLEAN", new SymbolState(CLASSBODYDECLARATION,  2));
        state144.put("DOUBLE", new SymbolState(METHODDECL,  2));
        state106.put("ID", new SymbolState(METHODDECL,  4));
        state137.put("ID", new SymbolState(CLASSBODYDECLARATION,  2));
        state2.put("BOOLEAN", new SymbolState(STATEMENT,  1));
        state18.put("COMMA", new SymbolState(BASICTYPE,  1));
        state2.put("RBRACE", new SymbolState(STATEMENT,  1));
        state28.put("STATEMENTEXPRESSION", new SymbolState(2));
        state180.put("PRIVATE", new SymbolState(TYPEDECLARATION,  2));
        state127.put("LBRACE", new SymbolState(BLOCKSTATEMENT,  1));
        state84.put("BASICTYPE", new SymbolState(36));
        state127.put("INT", new SymbolState(BLOCKSTATEMENT,  1));
        state131.put("STRICTFP", new SymbolState(CLASSDECLARATION,  5));
        state116.put("CHAR", new SymbolState(MODIFIER,  1));
        state182.put("SEMI", new SymbolState(FORMALPARAMETERS,  2));
        state214.put("MODIFIER", new SymbolState(126));
        state4.put("PIPE", new SymbolState(24));
        state50.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state51.put("ID", new SymbolState(INTERFACEMETHODORFIELDREST,  1));
        state21.put("ABSTRACT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state220.put("STRICTFP", new SymbolState(CLASSDECLARATION,  3));
        state50.put("INT", new SymbolState(MODIFIER,  1));
        state63.put("STATIC", new SymbolState(METHODDECLARATORREST,  4));
        state18.put("LBRACKET", new SymbolState(BASICTYPE,  1));
        state180.put("EOF", new SymbolState(TYPEDECLARATION,  2));
        state32.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state209.put("IMPLEMENTS", new SymbolState(212));
        state184.put("NATIVE", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state27.put("STATIC", new SymbolState(MODIFIER,  1));
        state45.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state61.put("BRACKETSOPT", new SymbolState(213));
        state128.put("INT", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state124.put("N_MODIFIER_0", new SymbolState(214));
        state222.put("CHAR", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state46.put("ID", new SymbolState(BASICTYPE,  1));
        state39.put("EOF", new SymbolState(CLASSDECLARATION,  7));
        state109.put("LONG", new SymbolState(79));
        state144.put("CHAR", new SymbolState(METHODDECL,  2));
        state68.put("DO", new SymbolState(PAREXPRESSION,  3));
        state98.put("LONG", new SymbolState(79));
        state27.put("VOID", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state96 = new HashMap<String, SymbolState>();
        rules.put(96, state96);
        state96.put("SEMI", new SymbolState(215));
        state37.put("VOLATILE", new SymbolState(METHODDECL,  4));
        state137.put("NATIVE", new SymbolState(CLASSBODYDECLARATION,  2));
        state33.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state123.put("INTERFACE", new SymbolState(CLASSDECLARATION,  5));
        state9.put("PIPE", new SymbolState(24));
        state199.put("FOR", new SymbolState(54));
        state127.put("DO", new SymbolState(BLOCKSTATEMENT,  1));
        state71.put("SHORT", new SymbolState(MODIFIER,  1));
        state222.put("STRICTFP", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state74.put("FLOAT", new SymbolState(14));
        state186.put("NATIVE", new SymbolState(MEMBERDECL,  1));
        state34.put("FINAL", new SymbolState(METHODDECL,  2));
        state70.put("BYTE", new SymbolState(STATEMENT,  1));
        state50.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state124.put("BOOLEAN", new SymbolState(N_MODIFIER_0,  0));
        state127.put("SEMI", new SymbolState(BLOCKSTATEMENT,  1));
        state215.put("PIPE", new SymbolState(24));
        state193.put("SYNCHRONIZED", new SymbolState(BLOCK,  3));
        state218.put("WHILE", new SymbolState(58));
        state82.put("INT", new SymbolState(15));
        state23.put("FINAL", new SymbolState(MODIFIER,  1));
        state2.put("LBRACE", new SymbolState(STATEMENT,  1));
        state131.put("SEMI", new SymbolState(CLASSDECLARATION,  5));
        state153.put("NATIVE", new SymbolState(INTERFACEMEMBERDECL,  3));
        state133.put("SEMI", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state160.put("PROTECTED", new SymbolState(55));
        state72.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  2));
        state180.put("TRANSIENT", new SymbolState(TYPEDECLARATION,  2));
        state212.put("TYPE", new SymbolState(136));
        state34.put("STATIC", new SymbolState(METHODDECL,  2));
        state78.put("SHORT", new SymbolState(STATEMENT,  3));
        state190.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state128.put("LONG", new SymbolState(LOCALVARIABLEDECLARATIONSTATEMENT,  3));
        state45.put("NATIVE", new SymbolState(MODIFIER,  1));
        state52.put("SYNCHRONIZED", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state190.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state55.put("CLASS", new SymbolState(MODIFIER,  1));
        state23.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state71.put("FLOAT", new SymbolState(MODIFIER,  1));
        state10.put("NATIVE", new SymbolState(METHODBODY,  1));
        state45.put("ID", new SymbolState(MODIFIER,  1));
        state218.put("STATEMENTEXPRESSION", new SymbolState(2));
        state130.put("BECOMES", new SymbolState(7));
        state177.put("SHORT", new SymbolState(STATEMENT,  2));
        state148.put("PUBLIC", new SymbolState(INTERFACEBODY,  3));
        state63.put("NATIVE", new SymbolState(METHODDECLARATORREST,  4));
        state47.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state214.put("VOID", new SymbolState(216));
        state133.put("PUBLIC", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state170.put("INTERFACE", new SymbolState(IMPORTDECLARATION,  6));
        state116.put("LONG", new SymbolState(MODIFIER,  1));
        state174.put("SEMI", new SymbolState(INTERFACEDECLARATION,  3));
        state52.put("VOLATILE", new SymbolState(CONSTRUCTORDECLARATORREST,  2));
        state137.put("STRICTFP", new SymbolState(CLASSBODYDECLARATION,  2));
        state30.put("BYTE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state91.put("STRICTFP", new SymbolState(MEMBERDECL,  1));
        state126.put("DOUBLE", new SymbolState(N_MODIFIER_0,  2));
        state13.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state127.put("PIPE", new SymbolState(BLOCKSTATEMENT,  1));
        state139.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  0));
        state99.put("SEMI", new SymbolState(BRACKETSOPT,  2));
        state63.put("RBRACE", new SymbolState(METHODDECLARATORREST,  4));
        state32.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state97.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state121.put("VARIABLEDECLARATOR", new SymbolState(65));
        state28.put("BASICTYPE", new SymbolState(36));
        state108.put("VARIABLEDECLARATORS", new SymbolState(217));
        state170.put("TRANSIENT", new SymbolState(IMPORTDECLARATION,  6));
        Map<String, SymbolState> state118 = new HashMap<String, SymbolState>();
        rules.put(118, state118);
        state118.put("RPAREN", new SymbolState(218));
        state71.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state154.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  0));
        state50.put("SEMI", new SymbolState(MODIFIER,  1));
        state49.put("PUBLIC", new SymbolState(METHODBODY,  1));
        state192.put("FINAL", new SymbolState(STATEMENT,  8));
        state109.put("SHORT", new SymbolState(18));
        state222.put("NATIVE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state71.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state26.put("RBRACE", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state123.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  5));
        state65.put("COMMA", new SymbolState(N_COMMA_VARIABLEDECLARATOR_0,  0));
        state193.put("FLOAT", new SymbolState(BLOCK,  3));
        state155.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state133.put("PROTECTED", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state33.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state71.put("CLASS", new SymbolState(MODIFIER,  1));
        state195.put("EXTENDS", new SymbolState(219));
        state28.put("EXPRESSION", new SymbolState(56));
        state29.put("SHORT", new SymbolState(STATEMENT,  1));
        state23.put("VOID", new SymbolState(MODIFIER,  1));
        state72.put("PROTECTED", new SymbolState(N_TYPEDECLARATION_0,  2));
        state37.put("FLOAT", new SymbolState(METHODDECL,  4));
        state153.put("PUBLIC", new SymbolState(INTERFACEMEMBERDECL,  3));
        state154.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  0));
        state155.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        state169.put("LONG", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state171.put("SYNCHRONIZED", new SymbolState(FIELDDECL,  5));
        state159.put("TRANSIENT", new SymbolState(TYPEDECLARATION,  2));
        state134.put("BOOLEAN", new SymbolState(11));
        state181.put("CLASSBODY", new SymbolState(220));
        state23.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state184.put("BOOLEAN", new SymbolState(INTERFACEMETHODDECLARATORREST,  3));
        state32.put("FLOAT", new SymbolState(MODIFIER,  1));
        state53.put("BYTE", new SymbolState(19));
        state126.put("BOOLEAN", new SymbolState(N_MODIFIER_0,  2));
        state47.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state31.put("NATIVE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state120.put("PIPE", new SymbolState(24));
        state44.put("RETURN", new SymbolState(25));
        state45.put("SEMI", new SymbolState(MODIFIER,  1));
        state2.put("LONG", new SymbolState(STATEMENT,  1));
        state134.put("TYPE", new SymbolState(136));
        state32.put("CLASS", new SymbolState(MODIFIER,  1));
        state37.put("PROTECTED", new SymbolState(METHODDECL,  4));
        state86.put("ID", new SymbolState(143));
        state23.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state55.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state194.put("FINAL", new SymbolState(STATEMENT,  3));
        state222.put("RBRACE", new SymbolState(INTERFACEBODYDECLARATION,  2));
        state116.put("INT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state85 = new HashMap<String, SymbolState>();
        rules.put(85, state85);
        state85.put("SEMI", new SymbolState(221));
        state91.put("CHAR", new SymbolState(MEMBERDECL,  1));
        state124.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state37.put("ABSTRACT", new SymbolState(METHODDECL,  4));
        state24.put("DO", new SymbolState(EXPRESSION,  1));
        state214.put("INTERFACEMEMBERDECL", new SymbolState(222));
        state39.put("CLASS", new SymbolState(CLASSDECLARATION,  7));
        state26.put("SHORT", new SymbolState(N_BLOCKSTATEMENT_0,  0));
        state39.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  7));
        state70.put("WHILE", new SymbolState(STATEMENT,  1));
        state10.put("TRANSIENT", new SymbolState(METHODBODY,  1));
        state192.put("LBRACE", new SymbolState(STATEMENT,  8));
        state169.put("CHAR", new SymbolState(INTERFACEMETHODORFIELDDECL,  3));
        state129.put("SYNCHRONIZED", new SymbolState(CLASSBODY,  3));
        state50.put("STATIC", new SymbolState(MODIFIER,  1));
        state6.put("BASICTYPE", new SymbolState(36));
        return rules;
    }
}
