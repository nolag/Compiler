//This file is automatically generated do not modify by hand.
package cs444.parser;

import java.util.HashMap;
import java.util.Map;

import cs444.parser.IParserRule;
import cs444.parser.symbols.SymbolState;
import cs444.parser.symbols.factories.NonTerminalFactory;
public class JoosDFA implements IParserRule{
    public Map<Integer, Map<String, SymbolState>> getRules() {
        
        Map<Integer, Map<String, SymbolState>> rules = new HashMap<Integer, Map<String, SymbolState>>();
        NonTerminalFactory MORESTATEMENTEXPRESSIONS = new NonTerminalFactory("MORESTATEMENTEXPRESSIONS");
        NonTerminalFactory N_DOT_ID_0 = new NonTerminalFactory("N_DOT_ID_0");
        NonTerminalFactory N_CLASSBODYDECLARATION_0 = new NonTerminalFactory("N_CLASSBODYDECLARATION_0");
        NonTerminalFactory INFIXOP = new NonTerminalFactory("INFIXOP");
        NonTerminalFactory INTEGERLITERAL = new NonTerminalFactory("INTEGERLITERAL");
        NonTerminalFactory N_COMMA_CONSTANTDECLARATOR_0 = new NonTerminalFactory("N_COMMA_CONSTANTDECLARATOR_0");
        NonTerminalFactory QUALIFIEDIDENTIFIERLIST = new NonTerminalFactory("QUALIFIEDIDENTIFIERLIST");
        NonTerminalFactory CREATOR = new NonTerminalFactory("CREATOR");
        NonTerminalFactory N_COMMA_VARIABLEDECLARATOR_0 = new NonTerminalFactory("N_COMMA_VARIABLEDECLARATOR_0");
        NonTerminalFactory CLASSBODY = new NonTerminalFactory("CLASSBODY");
        NonTerminalFactory BOOLEANLITERAL = new NonTerminalFactory("BOOLEANLITERAL");
        NonTerminalFactory FORMALPARAMETERS = new NonTerminalFactory("FORMALPARAMETERS");
        NonTerminalFactory N_COMMA_TYPE_0 = new NonTerminalFactory("N_COMMA_TYPE_0");
        NonTerminalFactory CONSTANTDECLARATORREST = new NonTerminalFactory("CONSTANTDECLARATORREST");
        NonTerminalFactory N_COMMA_QUALIFIEDIDENTIFIER_0 = new NonTerminalFactory("N_COMMA_QUALIFIEDIDENTIFIER_0");
        NonTerminalFactory METHODDECLARATORREST = new NonTerminalFactory("METHODDECLARATORREST");
        NonTerminalFactory METHODORFIELDDECL = new NonTerminalFactory("METHODORFIELDDECL");
        NonTerminalFactory INTERFACEMETHODORFIELDDECL = new NonTerminalFactory("INTERFACEMETHODORFIELDDECL");
        NonTerminalFactory BRACKETSOPT = new NonTerminalFactory("BRACKETSOPT");
        NonTerminalFactory STATEMENT = new NonTerminalFactory("STATEMENT");
        NonTerminalFactory MODIFIER = new NonTerminalFactory("MODIFIER");
        NonTerminalFactory ARRAYCREATORREST = new NonTerminalFactory("ARRAYCREATORREST");
        NonTerminalFactory FORMALPARAMETER = new NonTerminalFactory("FORMALPARAMETER");
        NonTerminalFactory N_COMMA_FORMALPARAMETER_0 = new NonTerminalFactory("N_COMMA_FORMALPARAMETER_0");
        NonTerminalFactory TYPE = new NonTerminalFactory("TYPE");
        NonTerminalFactory N_COMMA_EXPRESSION_0 = new NonTerminalFactory("N_COMMA_EXPRESSION_0");
        NonTerminalFactory MEMBERDECL = new NonTerminalFactory("MEMBERDECL");
        NonTerminalFactory SELECTOR = new NonTerminalFactory("SELECTOR");
        NonTerminalFactory VARIABLEINITIALIZER = new NonTerminalFactory("VARIABLEINITIALIZER");
        NonTerminalFactory N_COMMA_STATEMENTEXPRESSION_0 = new NonTerminalFactory("N_COMMA_STATEMENTEXPRESSION_0");
        NonTerminalFactory CONSTANTDECLARATOR = new NonTerminalFactory("CONSTANTDECLARATOR");
        NonTerminalFactory ASSIGNMENTOPERATOR = new NonTerminalFactory("ASSIGNMENTOPERATOR");
        NonTerminalFactory N_SELECTOR_0 = new NonTerminalFactory("N_SELECTOR_0");
        NonTerminalFactory CONSTRUCTORDECLARATORREST = new NonTerminalFactory("CONSTRUCTORDECLARATORREST");
        NonTerminalFactory METHODORFIELDREST = new NonTerminalFactory("METHODORFIELDREST");
        NonTerminalFactory VARIABLEDECLARATORSREST = new NonTerminalFactory("VARIABLEDECLARATORSREST");
        NonTerminalFactory TYPELIST = new NonTerminalFactory("TYPELIST");
        NonTerminalFactory VARIABLEDECLARATORS = new NonTerminalFactory("VARIABLEDECLARATORS");
        NonTerminalFactory BASICTYPE = new NonTerminalFactory("BASICTYPE");
        NonTerminalFactory INTERFACEMETHODORFIELDREST = new NonTerminalFactory("INTERFACEMETHODORFIELDREST");
        NonTerminalFactory STATEMENTEXPRESSION = new NonTerminalFactory("STATEMENTEXPRESSION");
        NonTerminalFactory N_INTERFACEBODYDECLARATION_0 = new NonTerminalFactory("N_INTERFACEBODYDECLARATION_0");
        NonTerminalFactory EXPRESSION = new NonTerminalFactory("EXPRESSION");
        NonTerminalFactory COMPILATIONUNIT = new NonTerminalFactory("COMPILATIONUNIT");
        NonTerminalFactory VOIDMETHODDECLARATORREST = new NonTerminalFactory("VOIDMETHODDECLARATORREST");
        NonTerminalFactory INTERFACEDECLARATION = new NonTerminalFactory("INTERFACEDECLARATION");
        NonTerminalFactory CLASSBODYDECLARATION = new NonTerminalFactory("CLASSBODYDECLARATION");
        NonTerminalFactory CONSTANTEXPRESSION = new NonTerminalFactory("CONSTANTEXPRESSION");
        NonTerminalFactory FORUPDATE = new NonTerminalFactory("FORUPDATE");
        NonTerminalFactory CLASSDECLARATION = new NonTerminalFactory("CLASSDECLARATION");
        NonTerminalFactory VARIABLEDECLARATORID = new NonTerminalFactory("VARIABLEDECLARATORID");
        NonTerminalFactory ARGUMENTS = new NonTerminalFactory("ARGUMENTS");
        NonTerminalFactory FORINIT = new NonTerminalFactory("FORINIT");
        NonTerminalFactory METHODBODY = new NonTerminalFactory("METHODBODY");
        NonTerminalFactory QUALIFIEDIDENTIFIER = new NonTerminalFactory("QUALIFIEDIDENTIFIER");
        NonTerminalFactory N_TYPEDECLARATION_0 = new NonTerminalFactory("N_TYPEDECLARATION_0");
        NonTerminalFactory N_LBRACKET_RBRACKET_0 = new NonTerminalFactory("N_LBRACKET_RBRACKET_0");
        NonTerminalFactory IDENTIFIERSUFFIX = new NonTerminalFactory("IDENTIFIERSUFFIX");
        NonTerminalFactory N_BLOCKSTATEMENT_0 = new NonTerminalFactory("N_BLOCKSTATEMENT_0");
        NonTerminalFactory LOCALVARIABLEDECLARATIONSTATEMENT = new NonTerminalFactory("LOCALVARIABLEDECLARATIONSTATEMENT");
        NonTerminalFactory INTERFACEMETHODDECLARATORREST = new NonTerminalFactory("INTERFACEMETHODDECLARATORREST");
        NonTerminalFactory TYPEDECLARATION = new NonTerminalFactory("TYPEDECLARATION");
        NonTerminalFactory LITERAL = new NonTerminalFactory("LITERAL");
        NonTerminalFactory PRIMARY = new NonTerminalFactory("PRIMARY");
        NonTerminalFactory S = new NonTerminalFactory("S");
        NonTerminalFactory INTERFACEBODY = new NonTerminalFactory("INTERFACEBODY");
        NonTerminalFactory ARGUMENTSOPT = new NonTerminalFactory("ARGUMENTSOPT");
        NonTerminalFactory INTERFACEBODYDECLARATION = new NonTerminalFactory("INTERFACEBODYDECLARATION");
        NonTerminalFactory N_MODIFIER_0 = new NonTerminalFactory("N_MODIFIER_0");
        NonTerminalFactory BLOCKSTATEMENTS = new NonTerminalFactory("BLOCKSTATEMENTS");
        NonTerminalFactory CONSTANTDECLARATORSREST = new NonTerminalFactory("CONSTANTDECLARATORSREST");
        NonTerminalFactory PREFIXOP = new NonTerminalFactory("PREFIXOP");
        NonTerminalFactory EXPRESSION2REST = new NonTerminalFactory("EXPRESSION2REST");
        NonTerminalFactory BLOCK = new NonTerminalFactory("BLOCK");
        NonTerminalFactory BLOCKSTATEMENT = new NonTerminalFactory("BLOCKSTATEMENT");
        NonTerminalFactory VARIABLEDECLARATORREST = new NonTerminalFactory("VARIABLEDECLARATORREST");
        NonTerminalFactory N_IMPORTDECLARATION_0 = new NonTerminalFactory("N_IMPORTDECLARATION_0");
        NonTerminalFactory VOIDINTERFACEMETHODDECLARATORREST = new NonTerminalFactory("VOIDINTERFACEMETHODDECLARATORREST");
        NonTerminalFactory EXPRESSION1 = new NonTerminalFactory("EXPRESSION1");
        NonTerminalFactory INTERFACEMEMBERDECL = new NonTerminalFactory("INTERFACEMEMBERDECL");
        NonTerminalFactory IMPORTDECLARATION = new NonTerminalFactory("IMPORTDECLARATION");
        NonTerminalFactory PAREXPRESSION = new NonTerminalFactory("PAREXPRESSION");
        NonTerminalFactory EXPRESSION3 = new NonTerminalFactory("EXPRESSION3");
        NonTerminalFactory CLASSCREATORREST = new NonTerminalFactory("CLASSCREATORREST");
        NonTerminalFactory EXPRESSION2 = new NonTerminalFactory("EXPRESSION2");
        NonTerminalFactory VARIABLEDECLARATOR = new NonTerminalFactory("VARIABLEDECLARATOR");
        
        Map<String, SymbolState> state115 = new HashMap<String, SymbolState>();
        rules.put(115, state115);
        state115.put("SEMI", new SymbolState(INTERFACEBODY,  3));
        Map<String, SymbolState> state88 = new HashMap<String, SymbolState>();
        rules.put(88, state88);
        state88.put("CLASS", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state125 = new HashMap<String, SymbolState>();
        rules.put(125, state125);
        state125.put("TYPE", new SymbolState(1));
        Map<String, SymbolState> state40 = new HashMap<String, SymbolState>();
        rules.put(40, state40);
        state40.put("TRANSIENT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        Map<String, SymbolState> state128 = new HashMap<String, SymbolState>();
        rules.put(128, state128);
        state128.put("ABSTRACT", new SymbolState(VARIABLEDECLARATORREST,  3));
        Map<String, SymbolState> state29 = new HashMap<String, SymbolState>();
        rules.put(29, state29);
        state29.put("FLOAT", new SymbolState(2));
        Map<String, SymbolState> state4 = new HashMap<String, SymbolState>();
        rules.put(4, state4);
        state4.put("RPAREN", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state62 = new HashMap<String, SymbolState>();
        rules.put(62, state62);
        state62.put("PRIVATE", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state129 = new HashMap<String, SymbolState>();
        rules.put(129, state129);
        state129.put("RBRACKET", new SymbolState(PAREXPRESSION,  3));
        Map<String, SymbolState> state55 = new HashMap<String, SymbolState>();
        rules.put(55, state55);
        state55.put("SHORT", new SymbolState(EXPRESSION,  1));
        Map<String, SymbolState> state101 = new HashMap<String, SymbolState>();
        rules.put(101, state101);
        state101.put("FLOAT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state36 = new HashMap<String, SymbolState>();
        rules.put(36, state36);
        state36.put("IMPLEMENTS", new SymbolState(TYPE,  1));
        Map<String, SymbolState> state92 = new HashMap<String, SymbolState>();
        rules.put(92, state92);
        state92.put("TRANSIENT", new SymbolState(VARIABLEDECLARATORREST,  1));
        Map<String, SymbolState> state13 = new HashMap<String, SymbolState>();
        rules.put(13, state13);
        state13.put("INT", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state20 = new HashMap<String, SymbolState>();
        rules.put(20, state20);
        state20.put("ABSTRACT", new SymbolState(VARIABLEINITIALIZER,  1));
        Map<String, SymbolState> state90 = new HashMap<String, SymbolState>();
        rules.put(90, state90);
        state90.put("STATIC", new SymbolState(IMPORTDECLARATION,  6));
        Map<String, SymbolState> state71 = new HashMap<String, SymbolState>();
        rules.put(71, state71);
        state71.put("STATIC", new SymbolState(BRACKETSOPT,  1));
        Map<String, SymbolState> state83 = new HashMap<String, SymbolState>();
        rules.put(83, state83);
        state83.put("SHORT", new SymbolState(TYPE,  3));
        Map<String, SymbolState> state3 = new HashMap<String, SymbolState>();
        rules.put(3, state3);
        state3.put("PREFIXOP", new SymbolState(3));
        state125.put("STR_LITERAL", new SymbolState(4));
        Map<String, SymbolState> state24 = new HashMap<String, SymbolState>();
        rules.put(24, state24);
        state24.put("PROTECTED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state123 = new HashMap<String, SymbolState>();
        rules.put(123, state123);
        state123.put("TYPE", new SymbolState(1));
        Map<String, SymbolState> state7 = new HashMap<String, SymbolState>();
        rules.put(7, state7);
        state7.put("ABSTRACT", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state118 = new HashMap<String, SymbolState>();
        rules.put(118, state118);
        state118.put("PROTECTED", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state113 = new HashMap<String, SymbolState>();
        rules.put(113, state113);
        state113.put("CHAR_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state6 = new HashMap<String, SymbolState>();
        rules.put(6, state6);
        state6.put("FLOAT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state5 = new HashMap<String, SymbolState>();
        rules.put(5, state5);
        state5.put("LPAREN", new SymbolState(N_DOT_ID_0,  0));
        Map<String, SymbolState> state9 = new HashMap<String, SymbolState>();
        rules.put(9, state9);
        state9.put("PRIVATE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        Map<String, SymbolState> state1 = new HashMap<String, SymbolState>();
        rules.put(1, state1);
        state1.put("ID", new SymbolState(5));
        state5.put("RBRACE", new SymbolState(N_DOT_ID_0,  0));
        Map<String, SymbolState> state37 = new HashMap<String, SymbolState>();
        rules.put(37, state37);
        state37.put("FINAL", new SymbolState(N_DOT_ID_0,  3));
        Map<String, SymbolState> state98 = new HashMap<String, SymbolState>();
        rules.put(98, state98);
        state98.put("STRICTFP", new SymbolState(6));
        Map<String, SymbolState> state2 = new HashMap<String, SymbolState>();
        rules.put(2, state2);
        state2.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state3.put("TRUE", new SymbolState(7));
        Map<String, SymbolState> state16 = new HashMap<String, SymbolState>();
        rules.put(16, state16);
        state16.put("PRIVATE", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state66 = new HashMap<String, SymbolState>();
        rules.put(66, state66);
        state66.put("STRICTFP", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state49 = new HashMap<String, SymbolState>();
        rules.put(49, state49);
        state49.put("CLASS", new SymbolState(N_MODIFIER_0,  2));
        Map<String, SymbolState> state112 = new HashMap<String, SymbolState>();
        rules.put(112, state112);
        state112.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state47 = new HashMap<String, SymbolState>();
        rules.put(47, state47);
        state47.put("FLOAT", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state81 = new HashMap<String, SymbolState>();
        rules.put(81, state81);
        state81.put("TRANSIENT", new SymbolState(INTERFACEDECLARATION,  5));
        Map<String, SymbolState> state114 = new HashMap<String, SymbolState>();
        rules.put(114, state114);
        state114.put("LONG", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state35 = new HashMap<String, SymbolState>();
        rules.put(35, state35);
        state35.put("PUBLIC", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state56 = new HashMap<String, SymbolState>();
        rules.put(56, state56);
        state56.put("STATIC", new SymbolState(EXPRESSION1,  1));
        state112.put("DOUBLE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state74 = new HashMap<String, SymbolState>();
        rules.put(74, state74);
        state74.put("STATIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state112.put("SEMI", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state10 = new HashMap<String, SymbolState>();
        rules.put(10, state10);
        state10.put("LONG", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state33 = new HashMap<String, SymbolState>();
        rules.put(33, state33);
        state33.put("PROTECTED", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state117 = new HashMap<String, SymbolState>();
        rules.put(117, state117);
        state117.put("EXTENDS", new SymbolState(8));
        Map<String, SymbolState> state89 = new HashMap<String, SymbolState>();
        rules.put(89, state89);
        state89.put("LBRACE", new SymbolState(9));
        Map<String, SymbolState> state106 = new HashMap<String, SymbolState>();
        rules.put(106, state106);
        state106.put("SYNCHRONIZED", new SymbolState(EXPRESSION3,  2));
        state5.put("FLOAT", new SymbolState(N_DOT_ID_0,  0));
        state114.put("FLOAT", new SymbolState(MODIFIER,  1));
        state3.put("PRIMARY", new SymbolState(10));
        Map<String, SymbolState> state124 = new HashMap<String, SymbolState>();
        rules.put(124, state124);
        state124.put("TRANSIENT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state10.put("RPAREN", new SymbolState(N_SELECTOR_0,  0));
        state33.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state129.put("PUBLIC", new SymbolState(PAREXPRESSION,  3));
        state88.put("SHORT", new SymbolState(MODIFIER,  1));
        state118.put("NATIVE", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state34 = new HashMap<String, SymbolState>();
        rules.put(34, state34);
        state34.put("INTERFACEBODYDECLARATION", new SymbolState(11));
        state128.put("STRICTFP", new SymbolState(VARIABLEDECLARATORREST,  3));
        state5.put("CHAR", new SymbolState(N_DOT_ID_0,  0));
        state113.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state32 = new HashMap<String, SymbolState>();
        rules.put(32, state32);
        state32.put("PUBLIC", new SymbolState(BASICTYPE,  1));
        state114.put("SEMI", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state14 = new HashMap<String, SymbolState>();
        rules.put(14, state14);
        state14.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state113.put("NULL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state18 = new HashMap<String, SymbolState>();
        rules.put(18, state18);
        state18.put("STATIC", new SymbolState(12));
        Map<String, SymbolState> state26 = new HashMap<String, SymbolState>();
        rules.put(26, state26);
        state26.put("FLOAT", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state51 = new HashMap<String, SymbolState>();
        rules.put(51, state51);
        state51.put("BECOMES", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state68 = new HashMap<String, SymbolState>();
        rules.put(68, state68);
        state68.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state43 = new HashMap<String, SymbolState>();
        rules.put(43, state43);
        state43.put("ABSTRACT", new SymbolState(TYPEDECLARATION,  1));
        state29.put("EXCLAMATION", new SymbolState(13));
        state47.put("RBRACE", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state44 = new HashMap<String, SymbolState>();
        rules.put(44, state44);
        state44.put("PLUS", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state78 = new HashMap<String, SymbolState>();
        rules.put(78, state78);
        state78.put("INT", new SymbolState(EXPRESSION3,  2));
        state71.put("PRIVATE", new SymbolState(BRACKETSOPT,  1));
        Map<String, SymbolState> state85 = new HashMap<String, SymbolState>();
        rules.put(85, state85);
        state85.put("DOUBLE", new SymbolState(EXPRESSION,  3));
        Map<String, SymbolState> state133 = new HashMap<String, SymbolState>();
        rules.put(133, state133);
        state133.put("CHAR", new SymbolState(14));
        Map<String, SymbolState> state139 = new HashMap<String, SymbolState>();
        rules.put(139, state139);
        state139.put("RBRACE", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state136 = new HashMap<String, SymbolState>();
        rules.put(136, state136);
        state136.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state58 = new HashMap<String, SymbolState>();
        rules.put(58, state58);
        state58.put("PUBLIC", new SymbolState(N_SELECTOR_0,  2));
        Map<String, SymbolState> state23 = new HashMap<String, SymbolState>();
        rules.put(23, state23);
        state23.put("FALSE", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state103 = new HashMap<String, SymbolState>();
        rules.put(103, state103);
        state103.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state135 = new HashMap<String, SymbolState>();
        rules.put(135, state135);
        state135.put("NATIVE", new SymbolState(CLASSBODY,  3));
        state74.put("VOLATILE", new SymbolState(N_TYPEDECLARATION_0,  0));
        Map<String, SymbolState> state63 = new HashMap<String, SymbolState>();
        rules.put(63, state63);
        state63.put("PREFIXOP", new SymbolState(3));
        Map<String, SymbolState> state132 = new HashMap<String, SymbolState>();
        rules.put(132, state132);
        state132.put("ABSTRACT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        Map<String, SymbolState> state15 = new HashMap<String, SymbolState>();
        rules.put(15, state15);
        state15.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state124.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state2.put("SEMI", new SymbolState(BASICTYPE,  1));
        state81.put("ABSTRACT", new SymbolState(INTERFACEDECLARATION,  5));
        Map<String, SymbolState> state27 = new HashMap<String, SymbolState>();
        rules.put(27, state27);
        state27.put("SYNCHRONIZED", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state17 = new HashMap<String, SymbolState>();
        rules.put(17, state17);
        state17.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state139.put("INSTANCEOF", new SymbolState(SELECTOR,  2));
        state66.put("BYTE", new SymbolState(MODIFIER,  1));
        state90.put("CLASS", new SymbolState(IMPORTDECLARATION,  6));
        Map<String, SymbolState> state12 = new HashMap<String, SymbolState>();
        rules.put(12, state12);
        state12.put("INT", new SymbolState(MODIFIER,  1));
        state3.put("INT", new SymbolState(15));
        state44.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state71.put("IMPLEMENTS", new SymbolState(BRACKETSOPT,  1));
        state63.put("CHAR", new SymbolState(14));
        state6.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state17.put("INT", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state91 = new HashMap<String, SymbolState>();
        rules.put(91, state91);
        state91.put("VOLATILE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state50 = new HashMap<String, SymbolState>();
        rules.put(50, state50);
        state50.put("COMMA", new SymbolState(N_COMMA_TYPE_0,  0));
        state35.put("BECOMES", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state104 = new HashMap<String, SymbolState>();
        rules.put(104, state104);
        state104.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  0));
        state36.put("PRIVATE", new SymbolState(TYPE,  1));
        Map<String, SymbolState> state96 = new HashMap<String, SymbolState>();
        rules.put(96, state96);
        state96.put("CLASSBODY", new SymbolState(16));
        state17.put("LBRACE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state94 = new HashMap<String, SymbolState>();
        rules.put(94, state94);
        state94.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        state123.put("BOOLEAN", new SymbolState(17));
        state66.put("PRIVATE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state111 = new HashMap<String, SymbolState>();
        rules.put(111, state111);
        state111.put("TRANSIENT", new SymbolState(ARGUMENTS,  4));
        state17.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state0 = new HashMap<String, SymbolState>();
        rules.put(0, state0);
        state0.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state97 = new HashMap<String, SymbolState>();
        rules.put(97, state97);
        state97.put("FINAL", new SymbolState(METHODORFIELDREST,  1));
        state68.put("BOOLEAN", new SymbolState(N_MODIFIER_0,  0));
        state106.put("COMMA", new SymbolState(EXPRESSION3,  2));
        state83.put("TRANSIENT", new SymbolState(TYPE,  3));
        state7.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state24.put("PRIVATE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state59 = new HashMap<String, SymbolState>();
        rules.put(59, state59);
        state59.put("COMMA", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state80 = new HashMap<String, SymbolState>();
        rules.put(80, state80);
        state80.put("PROTECTED", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state31 = new HashMap<String, SymbolState>();
        rules.put(31, state31);
        state31.put("PUBLIC", new SymbolState(LITERAL,  1));
        state5.put("STR_LITERAL", new SymbolState(N_DOT_ID_0,  0));
        Map<String, SymbolState> state73 = new HashMap<String, SymbolState>();
        rules.put(73, state73);
        state73.put("RBRACE", new SymbolState(EXPRESSION3,  2));
        state91.put("SHORT", new SymbolState(MODIFIER,  1));
        state55.put("PROTECTED", new SymbolState(EXPRESSION,  1));
        state81.put("STATIC", new SymbolState(INTERFACEDECLARATION,  5));
        state5.put("BYTE", new SymbolState(N_DOT_ID_0,  0));
        state101.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state12.put("LONG", new SymbolState(MODIFIER,  1));
        state23.put("MINUS", new SymbolState(PREFIXOP,  1));
        state3.put("ID", new SymbolState(5));
        state55.put("TRANSIENT", new SymbolState(EXPRESSION,  1));
        state124.put("PRIVATE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state73.put("SEMI", new SymbolState(EXPRESSION3,  2));
        state115.put("INTERFACE", new SymbolState(INTERFACEBODY,  3));
        state62.put("DOUBLE", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state53 = new HashMap<String, SymbolState>();
        rules.put(53, state53);
        state53.put("FINAL", new SymbolState(N_TYPEDECLARATION_0,  2));
        Map<String, SymbolState> state48 = new HashMap<String, SymbolState>();
        rules.put(48, state48);
        state48.put("INSTANCEOF", new SymbolState(ARGUMENTS,  2));
        state37.put("LBRACKET", new SymbolState(N_DOT_ID_0,  3));
        state37.put("SEMI", new SymbolState(N_DOT_ID_0,  3));
        state2.put("STATIC", new SymbolState(BASICTYPE,  1));
        state32.put("STRICTFP", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state61 = new HashMap<String, SymbolState>();
        rules.put(61, state61);
        state61.put("STATIC", new SymbolState(TYPEDECLARATION,  2));
        Map<String, SymbolState> state95 = new HashMap<String, SymbolState>();
        rules.put(95, state95);
        state95.put("SYNCHRONIZED", new SymbolState(METHODORFIELDDECL,  3));
        state36.put("SHORT", new SymbolState(TYPE,  1));
        state85.put("BYTE", new SymbolState(EXPRESSION,  3));
        Map<String, SymbolState> state100 = new HashMap<String, SymbolState>();
        rules.put(100, state100);
        state100.put("SYNCHRONIZED", new SymbolState(MEMBERDECL,  1));
        state132.put("PUBLIC", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state56.put("SHORT", new SymbolState(EXPRESSION1,  1));
        state90.put("SYNCHRONIZED", new SymbolState(IMPORTDECLARATION,  6));
        state103.put("FINAL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state104.put("VOLATILE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state37.put("LPAREN", new SymbolState(N_DOT_ID_0,  3));
        Map<String, SymbolState> state21 = new HashMap<String, SymbolState>();
        rules.put(21, state21);
        state21.put("EOF", new SymbolState(IMPORTDECLARATION,  4));
        state139.put("VOLATILE", new SymbolState(SELECTOR,  2));
        state115.put("ABSTRACT", new SymbolState(INTERFACEBODY,  3));
        state5.put("LBRACKET", new SymbolState(N_DOT_ID_0,  0));
        state92.put("PUBLIC", new SymbolState(VARIABLEDECLARATORREST,  1));
        state101.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state135.put("PROTECTED", new SymbolState(CLASSBODY,  3));
        state136.put("N_MODIFIER_0", new SymbolState(18));
        state9.put("FINAL", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state56.put("TRANSIENT", new SymbolState(EXPRESSION1,  1));
        state31.put("PRIVATE", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state77 = new HashMap<String, SymbolState>();
        rules.put(77, state77);
        state77.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state95.put("VOLATILE", new SymbolState(METHODORFIELDDECL,  3));
        state68.put("SEMI", new SymbolState(N_MODIFIER_0,  0));
        Map<String, SymbolState> state57 = new HashMap<String, SymbolState>();
        rules.put(57, state57);
        state57.put("RPAREN", new SymbolState(PRIMARY,  1));
        state56.put("STRICTFP", new SymbolState(EXPRESSION1,  1));
        state71.put("RBRACE", new SymbolState(BRACKETSOPT,  1));
        state12.put("CHAR", new SymbolState(MODIFIER,  1));
        state58.put("TRANSIENT", new SymbolState(N_SELECTOR_0,  2));
        Map<String, SymbolState> state102 = new HashMap<String, SymbolState>();
        rules.put(102, state102);
        state102.put("COMMA", new SymbolState(19));
        state0.put("NATIVE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        Map<String, SymbolState> state87 = new HashMap<String, SymbolState>();
        rules.put(87, state87);
        state87.put("FINAL", new SymbolState(MEMBERDECL,  1));
        state29.put("EXPRESSION", new SymbolState(20));
        state23.put("FLOAT", new SymbolState(PREFIXOP,  1));
        Map<String, SymbolState> state110 = new HashMap<String, SymbolState>();
        rules.put(110, state110);
        state110.put("NULL", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state14.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state21.put("VOLATILE", new SymbolState(IMPORTDECLARATION,  4));
        state32.put("SEMI", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state140 = new HashMap<String, SymbolState>();
        rules.put(140, state140);
        state140.put("SYNCHRONIZED", new SymbolState(EXPRESSION2,  2));
        state7.put("INT", new SymbolState(BOOLEANLITERAL,  1));
        Map<String, SymbolState> state76 = new HashMap<String, SymbolState>();
        rules.put(76, state76);
        state76.put("SEMI", new SymbolState(21));
        Map<String, SymbolState> state119 = new HashMap<String, SymbolState>();
        rules.put(119, state119);
        state119.put("BOOLEAN", new SymbolState(EXPRESSION2REST,  2));
        state112.put("INT", new SymbolState(MODIFIER,  1));
        state35.put("ABSTRACT", new SymbolState(BASICTYPE,  1));
        state128.put("BYTE", new SymbolState(VARIABLEDECLARATORREST,  3));
        state83.put("STR_LITERAL", new SymbolState(TYPE,  3));
        state27.put("TRANSIENT", new SymbolState(LITERAL,  1));
        state113.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state52 = new HashMap<String, SymbolState>();
        rules.put(52, state52);
        state52.put("DOUBLE", new SymbolState(CLASSBODYDECLARATION,  2));
        state40.put("PROTECTED", new SymbolState(N_IMPORTDECLARATION_0,  2));
        Map<String, SymbolState> state137 = new HashMap<String, SymbolState>();
        rules.put(137, state137);
        state137.put("PLUS", new SymbolState(22));
        state111.put("INT", new SymbolState(ARGUMENTS,  4));
        Map<String, SymbolState> state22 = new HashMap<String, SymbolState>();
        rules.put(22, state22);
        state22.put("INT", new SymbolState(PREFIXOP,  1));
        state119.put("SYNCHRONIZED", new SymbolState(EXPRESSION2REST,  2));
        state43.put("TRANSIENT", new SymbolState(TYPEDECLARATION,  1));
        state37.put("NATIVE", new SymbolState(N_DOT_ID_0,  3));
        state1.put("MINUS", new SymbolState(23));
        state44.put("PRIVATE", new SymbolState(BASICTYPE,  1));
        state59.put("TRANSIENT", new SymbolState(LITERAL,  1));
        state101.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state140.put("FINAL", new SymbolState(EXPRESSION2,  2));
        state85.put("FINAL", new SymbolState(EXPRESSION,  3));
        state77.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state40.put("PUBLIC", new SymbolState(N_IMPORTDECLARATION_0,  2));
        Map<String, SymbolState> state54 = new HashMap<String, SymbolState>();
        rules.put(54, state54);
        state54.put("BYTE", new SymbolState(EXPRESSION2,  1));
        state18.put("FINAL", new SymbolState(24));
        state13.put("DECIMAL_INTEGER_LITERAL", new SymbolState(PREFIXOP,  1));
        state32.put("TRUE", new SymbolState(BASICTYPE,  1));
        state77.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state15.put("FINAL", new SymbolState(BASICTYPE,  1));
        state57.put("BYTE", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state46 = new HashMap<String, SymbolState>();
        rules.put(46, state46);
        state46.put("SEMI", new SymbolState(25));
        state74.put("NATIVE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state118.put("STRICTFP", new SymbolState(CLASSDECLARATION,  5));
        state56.put("RBRACKET", new SymbolState(EXPRESSION1,  1));
        state35.put("VOLATILE", new SymbolState(BASICTYPE,  1));
        state101.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state51.put("LONG", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state19 = new HashMap<String, SymbolState>();
        rules.put(19, state19);
        state19.put("NULL", new SymbolState(26));
        state9.put("PROTECTED", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state20.put("DOUBLE", new SymbolState(VARIABLEINITIALIZER,  1));
        state14.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state49.put("FINAL", new SymbolState(N_MODIFIER_0,  2));
        state56.put("LONG", new SymbolState(EXPRESSION1,  1));
        state29.put("CHAR_LITERAL", new SymbolState(27));
        state135.put("PUBLIC", new SymbolState(CLASSBODY,  3));
        state59.put("PRIVATE", new SymbolState(LITERAL,  1));
        state98.put("INT", new SymbolState(15));
        state100.put("ID", new SymbolState(MEMBERDECL,  1));
        state136.put("INTERFACE", new SymbolState(N_MODIFIER_0,  0));
        state129.put("DOT", new SymbolState(PAREXPRESSION,  3));
        state10.put("SEMI", new SymbolState(N_SELECTOR_0,  0));
        state53.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state118.put("FINAL", new SymbolState(CLASSDECLARATION,  5));
        state57.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        Map<String, SymbolState> state69 = new HashMap<String, SymbolState>();
        rules.put(69, state69);
        state69.put("RBRACKET", new SymbolState(28));
        state139.put("RBRACKET", new SymbolState(SELECTOR,  2));
        state139.put("DOUBLE", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state105 = new HashMap<String, SymbolState>();
        rules.put(105, state105);
        state105.put("FINAL", new SymbolState(CLASSDECLARATION,  3));
        state92.put("BECOMES", new SymbolState(29));
        state103.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state83.put("INT", new SymbolState(TYPE,  3));
        state129.put("NATIVE", new SymbolState(PAREXPRESSION,  3));
        state15.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state55.put("RPAREN", new SymbolState(EXPRESSION,  1));
        state26.put("STATIC", new SymbolState(LITERAL,  1));
        state101.put("STATIC", new SymbolState(MODIFIER,  1));
        state92.put("SHORT", new SymbolState(VARIABLEDECLARATORREST,  1));
        state100.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        state7.put("CHAR", new SymbolState(BOOLEANLITERAL,  1));
        state104.put("TRANSIENT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state19.put("FLOAT", new SymbolState(2));
        state32.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state5.put("ABSTRACT", new SymbolState(N_DOT_ID_0,  0));
        Map<String, SymbolState> state38 = new HashMap<String, SymbolState>();
        rules.put(38, state38);
        state38.put("TYPELIST", new SymbolState(30));
        state123.put("BOOLEANLITERAL", new SymbolState(31));
        state10.put("BECOMES", new SymbolState(N_SELECTOR_0,  0));
        state36.put("COMMA", new SymbolState(TYPE,  1));
        state124.put("PLUS", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state98.put("SHORT", new SymbolState(32));
        state4.put("FLOAT", new SymbolState(LITERAL,  1));
        state24.put("PUBLIC", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state28 = new HashMap<String, SymbolState>();
        rules.put(28, state28);
        state28.put("STATIC", new SymbolState(SELECTOR,  3));
        state132.put("ID", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state113.put("TRUE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state55.put("PUBLIC", new SymbolState(EXPRESSION,  1));
        state81.put("PRIVATE", new SymbolState(INTERFACEDECLARATION,  5));
        state128.put("SHORT", new SymbolState(VARIABLEDECLARATORREST,  3));
        state118.put("EOF", new SymbolState(CLASSDECLARATION,  5));
        state95.put("PUBLIC", new SymbolState(METHODORFIELDDECL,  3));
        state47.put("ABSTRACT", new SymbolState(BOOLEANLITERAL,  1));
        state133.put("BOOLEAN", new SymbolState(17));
        state114.put("INT", new SymbolState(MODIFIER,  1));
        state26.put("FINAL", new SymbolState(LITERAL,  1));
        Map<String, SymbolState> state72 = new HashMap<String, SymbolState>();
        rules.put(72, state72);
        state72.put("TRANSIENT", new SymbolState(INTERFACEDECLARATION,  3));
        state133.put("BYTE", new SymbolState(33));
        state62.put("CHAR", new SymbolState(SELECTOR,  3));
        state95.put("SEMI", new SymbolState(METHODORFIELDDECL,  3));
        state32.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state22.put("CHAR_LITERAL", new SymbolState(PREFIXOP,  1));
        state32.put("CHAR", new SymbolState(BASICTYPE,  1));
        state135.put("FINAL", new SymbolState(CLASSBODY,  3));
        state81.put("SYNCHRONIZED", new SymbolState(INTERFACEDECLARATION,  5));
        state114.put("VOLATILE", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state67 = new HashMap<String, SymbolState>();
        rules.put(67, state67);
        state67.put("N_INTERFACEBODYDECLARATION_0", new SymbolState(34));
        state21.put("ABSTRACT", new SymbolState(IMPORTDECLARATION,  4));
        state26.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state29.put("CHAR", new SymbolState(14));
        state114.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state134 = new HashMap<String, SymbolState>();
        rules.put(134, state134);
        state134.put("DOUBLE", new SymbolState(35));
        state14.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state62.put("LONG", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state8 = new HashMap<String, SymbolState>();
        rules.put(8, state8);
        state8.put("BASICTYPE", new SymbolState(36));
        state83.put("LBRACE", new SymbolState(TYPE,  3));
        state44.put("ABSTRACT", new SymbolState(BASICTYPE,  1));
        state15.put("PRIVATE", new SymbolState(BASICTYPE,  1));
        state37.put("SYNCHRONIZED", new SymbolState(N_DOT_ID_0,  3));
        Map<String, SymbolState> state25 = new HashMap<String, SymbolState>();
        rules.put(25, state25);
        state25.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state94.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state57.put("STRICTFP", new SymbolState(PRIMARY,  1));
        state56.put("NATIVE", new SymbolState(EXPRESSION1,  1));
        state71.put("MINUS", new SymbolState(BRACKETSOPT,  1));
        state62.put("BOOLEAN", new SymbolState(SELECTOR,  3));
        state81.put("PUBLIC", new SymbolState(INTERFACEDECLARATION,  5));
        state36.put("STATIC", new SymbolState(TYPE,  1));
        Map<String, SymbolState> state99 = new HashMap<String, SymbolState>();
        rules.put(99, state99);
        state99.put("ID", new SymbolState(37));
        state94.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state101.put("CLASS", new SymbolState(MODIFIER,  1));
        state40.put("SYNCHRONIZED", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state136.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state96.put("IMPLEMENTS", new SymbolState(38));
        Map<String, SymbolState> state45 = new HashMap<String, SymbolState>();
        rules.put(45, state45);
        state45.put("SHORT", new SymbolState(INTEGERLITERAL,  1));
        state105.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  3));
        state88.put("FLOAT", new SymbolState(MODIFIER,  1));
        state16.put("CLASS", new SymbolState(CLASSDECLARATION,  5));
        state117.put("IMPLEMENTS", new SymbolState(39));
        state124.put("COMMA", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state124.put("TRUE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state73.put("SYNCHRONIZED", new SymbolState(EXPRESSION3,  2));
        state24.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state52.put("PRIVATE", new SymbolState(CLASSBODYDECLARATION,  2));
        state7.put("LONG", new SymbolState(BOOLEANLITERAL,  1));
        state15.put("ID", new SymbolState(BASICTYPE,  1));
        state103.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state55.put("DOUBLE", new SymbolState(EXPRESSION,  1));
        state101.put("NATIVE", new SymbolState(MODIFIER,  1));
        state33.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state0.put("FINAL", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state19.put("DOUBLE", new SymbolState(35));
        state115.put("SYNCHRONIZED", new SymbolState(INTERFACEBODY,  3));
        state4.put("CHAR", new SymbolState(LITERAL,  1));
        state61.put("VOLATILE", new SymbolState(TYPEDECLARATION,  2));
        state0.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state74.put("IMPORTDECLARATION", new SymbolState(40));
        state119.put("VOLATILE", new SymbolState(EXPRESSION2REST,  2));
        state125.put("BYTE", new SymbolState(33));
        state78.put("STATIC", new SymbolState(EXPRESSION3,  2));
        state19.put("EXPRESSION", new SymbolState(41));
        state35.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state114.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state56.put("FINAL", new SymbolState(EXPRESSION1,  1));
        state33.put("ID", new SymbolState(BASICTYPE,  1));
        state54.put("PROTECTED", new SymbolState(EXPRESSION2,  1));
        state18.put("INTERFACE", new SymbolState(42));
        state14.put("NATIVE", new SymbolState(BASICTYPE,  1));
        state136.put("SEMI", new SymbolState(43));
        state104.put("ABSTRACT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state45.put("COMMA", new SymbolState(INTEGERLITERAL,  1));
        state45.put("LONG", new SymbolState(INTEGERLITERAL,  1));
        state54.put("PRIVATE", new SymbolState(EXPRESSION2,  1));
        state74.put("ABSTRACT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state134.put("ID", new SymbolState(5));
        state51.put("DOUBLE", new SymbolState(PRIMARY,  1));
        state128.put("RBRACE", new SymbolState(VARIABLEDECLARATORREST,  3));
        state87.put("PUBLIC", new SymbolState(MEMBERDECL,  1));
        state7.put("PRIVATE", new SymbolState(BOOLEANLITERAL,  1));
        state97.put("PUBLIC", new SymbolState(METHODORFIELDREST,  1));
        state8.put("BOOLEAN", new SymbolState(17));
        state104.put("STRICTFP", new SymbolState(N_TYPEDECLARATION_0,  0));
        state19.put("PRIMARY", new SymbolState(10));
        state32.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state49.put("INTERFACE", new SymbolState(N_MODIFIER_0,  2));
        state88.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state66.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state139.put("TRANSIENT", new SymbolState(SELECTOR,  2));
        state95.put("RBRACE", new SymbolState(METHODORFIELDDECL,  3));
        state28.put("TRANSIENT", new SymbolState(SELECTOR,  3));
        state19.put("LONG", new SymbolState(44));
        state3.put("DECIMAL_INTEGER_LITERAL", new SymbolState(45));
        state112.put("STATIC", new SymbolState(MODIFIER,  1));
        state2.put("TRUE", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state82 = new HashMap<String, SymbolState>();
        rules.put(82, state82);
        state82.put("QUALIFIEDIDENTIFIER", new SymbolState(46));
        state1.put("CHAR_LITERAL", new SymbolState(27));
        state88.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state90.put("PROTECTED", new SymbolState(IMPORTDECLARATION,  6));
        state87.put("SHORT", new SymbolState(MEMBERDECL,  1));
        state36.put("RBRACKET", new SymbolState(TYPE,  1));
        state20.put("SEMI", new SymbolState(VARIABLEINITIALIZER,  1));
        state101.put("BYTE", new SymbolState(MODIFIER,  1));
        state10.put("BOOLEAN", new SymbolState(N_SELECTOR_0,  0));
        state1.put("FALSE", new SymbolState(47));
        state78.put("ID", new SymbolState(EXPRESSION3,  2));
        state139.put("LONG", new SymbolState(SELECTOR,  2));
        state92.put("PRIVATE", new SymbolState(VARIABLEDECLARATORREST,  1));
        state135.put("VOLATILE", new SymbolState(CLASSBODY,  3));
        state68.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        state106.put("RBRACKET", new SymbolState(EXPRESSION3,  2));
        state15.put("BYTE", new SymbolState(BASICTYPE,  1));
        state71.put("CHAR", new SymbolState(BRACKETSOPT,  1));
        state27.put("PUBLIC", new SymbolState(LITERAL,  1));
        state92.put("VOLATILE", new SymbolState(VARIABLEDECLARATORREST,  1));
        state85.put("NATIVE", new SymbolState(EXPRESSION,  3));
        state44.put("STRICTFP", new SymbolState(BASICTYPE,  1));
        state68.put("ID", new SymbolState(N_MODIFIER_0,  0));
        state88.put("ID", new SymbolState(MODIFIER,  1));
        state9.put("CHAR", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state125.put("RPAREN", new SymbolState(48));
        state15.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state35.put("NATIVE", new SymbolState(BASICTYPE,  1));
        state78.put("SYNCHRONIZED", new SymbolState(EXPRESSION3,  2));
        state101.put("CHAR", new SymbolState(MODIFIER,  1));
        state98.put("MODIFIER", new SymbolState(49));
        state111.put("RBRACKET", new SymbolState(ARGUMENTS,  4));
        state123.put("EXCLAMATION", new SymbolState(13));
        state26.put("CHAR", new SymbolState(LITERAL,  1));
        state118.put("PRIVATE", new SymbolState(CLASSDECLARATION,  5));
        state88.put("INT", new SymbolState(MODIFIER,  1));
        state62.put("FINAL", new SymbolState(SELECTOR,  3));
        state74.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  0));
        state37.put("CHAR_LITERAL", new SymbolState(N_DOT_ID_0,  3));
        state45.put("ABSTRACT", new SymbolState(INTEGERLITERAL,  1));
        state2.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state39 = new HashMap<String, SymbolState>();
        rules.put(39, state39);
        state39.put("BYTE", new SymbolState(33));
        state112.put("CHAR", new SymbolState(MODIFIER,  1));
        state106.put("INT", new SymbolState(EXPRESSION3,  2));
        state74.put("FINAL", new SymbolState(N_TYPEDECLARATION_0,  0));
        state136.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state38.put("TYPE", new SymbolState(50));
        state87.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state5.put("IMPLEMENTS", new SymbolState(N_DOT_ID_0,  0));
        state74.put("PUBLIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state62.put("STRICTFP", new SymbolState(SELECTOR,  3));
        state15.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state128.put("TRANSIENT", new SymbolState(VARIABLEDECLARATORREST,  3));
        state47.put("PUBLIC", new SymbolState(BOOLEANLITERAL,  1));
        state32.put("FALSE", new SymbolState(BASICTYPE,  1));
        state95.put("ABSTRACT", new SymbolState(METHODORFIELDDECL,  3));
        state83.put("MINUS", new SymbolState(TYPE,  3));
        state110.put("FLOAT", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state27.put("LBRACKET", new SymbolState(LITERAL,  1));
        state140.put("SEMI", new SymbolState(EXPRESSION2,  2));
        state125.put("BASICTYPE", new SymbolState(36));
        state80.put("SEMI", new SymbolState(MODIFIER,  1));
        state25.put("PRIVATE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state125.put("DECIMAL_INTEGER_LITERAL", new SymbolState(45));
        state115.put("STATIC", new SymbolState(INTERFACEBODY,  3));
        state17.put("FINAL", new SymbolState(BASICTYPE,  1));
        state3.put("PAREXPRESSION", new SymbolState(51));
        state57.put("DOT", new SymbolState(PRIMARY,  1));
        state71.put("PUBLIC", new SymbolState(BRACKETSOPT,  1));
        state10.put("LBRACKET", new SymbolState(N_SELECTOR_0,  0));
        state36.put("PLUS", new SymbolState(TYPE,  1));
        state44.put("VOLATILE", new SymbolState(BASICTYPE,  1));
        state118.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  5));
        state24.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state45.put("VOLATILE", new SymbolState(INTEGERLITERAL,  1));
        state14.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state62.put("PROTECTED", new SymbolState(SELECTOR,  3));
        state26.put("BECOMES", new SymbolState(LITERAL,  1));
        state48.put("SHORT", new SymbolState(ARGUMENTS,  2));
        state101.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state98.put("MEMBERDECL", new SymbolState(52));
        state94.put("TYPEDECLARATION", new SymbolState(53));
        state111.put("ABSTRACT", new SymbolState(ARGUMENTS,  4));
        state17.put("ABSTRACT", new SymbolState(BASICTYPE,  1));
        state43.put("NATIVE", new SymbolState(TYPEDECLARATION,  1));
        state2.put("TRANSIENT", new SymbolState(BASICTYPE,  1));
        state95.put("LONG", new SymbolState(METHODORFIELDDECL,  3));
        Map<String, SymbolState> state126 = new HashMap<String, SymbolState>();
        rules.put(126, state126);
        state126.put("TRANSIENT", new SymbolState(TYPEDECLARATION,  2));
        state51.put("BOOLEAN", new SymbolState(PRIMARY,  1));
        state88.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state58.put("VOLATILE", new SymbolState(N_SELECTOR_0,  2));
        state53.put("PRIVATE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state139.put("ID", new SymbolState(SELECTOR,  2));
        state73.put("PROTECTED", new SymbolState(EXPRESSION3,  2));
        state123.put("STR_LITERAL", new SymbolState(4));
        state56.put("PRIVATE", new SymbolState(EXPRESSION1,  1));
        Map<String, SymbolState> state109 = new HashMap<String, SymbolState>();
        rules.put(109, state109);
        state109.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  7));
        state51.put("PRIVATE", new SymbolState(PRIMARY,  1));
        state8.put("DOUBLE", new SymbolState(35));
        state52.put("STRICTFP", new SymbolState(CLASSBODYDECLARATION,  2));
        state111.put("PRIVATE", new SymbolState(ARGUMENTS,  4));
        state115.put("PRIVATE", new SymbolState(INTERFACEBODY,  3));
        state19.put("BOOLEANLITERAL", new SymbolState(31));
        state106.put("SEMI", new SymbolState(EXPRESSION3,  2));
        state124.put("EXCLAMATION", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state5.put("MINUS", new SymbolState(N_DOT_ID_0,  0));
        state90.put("FINAL", new SymbolState(IMPORTDECLARATION,  6));
        state62.put("COMMA", new SymbolState(SELECTOR,  3));
        state106.put("BYTE", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state108 = new HashMap<String, SymbolState>();
        rules.put(108, state108);
        state108.put("CHAR", new SymbolState(14));
        state31.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state129.put("VOLATILE", new SymbolState(PAREXPRESSION,  3));
        state128.put("DOUBLE", new SymbolState(VARIABLEDECLARATORREST,  3));
        state88.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state57.put("BOOLEAN", new SymbolState(PRIMARY,  1));
        state28.put("ABSTRACT", new SymbolState(SELECTOR,  3));
        state63.put("EXPRESSION3", new SymbolState(54));
        state63.put("EXPRESSION1", new SymbolState(55));
        state63.put("EXPRESSION2", new SymbolState(56));
        state35.put("PLUS", new SymbolState(BASICTYPE,  1));
        state14.put("FLOAT", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state70 = new HashMap<String, SymbolState>();
        rules.put(70, state70);
        state70.put("ID", new SymbolState(37));
        state29.put("BOOLEAN", new SymbolState(17));
        state137.put("TYPE", new SymbolState(1));
        state22.put("FLOAT", new SymbolState(PREFIXOP,  1));
        state56.put("INT", new SymbolState(EXPRESSION1,  1));
        state136.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state18.put("MODIFIER", new SymbolState(49));
        state31.put("TRANSIENT", new SymbolState(LITERAL,  1));
        state129.put("FLOAT", new SymbolState(PAREXPRESSION,  3));
        state92.put("BYTE", new SymbolState(VARIABLEDECLARATORREST,  1));
        state68.put("LONG", new SymbolState(N_MODIFIER_0,  0));
        state21.put("TRANSIENT", new SymbolState(IMPORTDECLARATION,  4));
        state111.put("CHAR", new SymbolState(ARGUMENTS,  4));
        state90.put("IMPORT", new SymbolState(IMPORTDECLARATION,  6));
        state98.put("DOUBLE", new SymbolState(35));
        state26.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state48.put("PUBLIC", new SymbolState(ARGUMENTS,  2));
        state137.put("LITERAL", new SymbolState(57));
        state43.put("INTERFACE", new SymbolState(TYPEDECLARATION,  1));
        state94.put("CLASS", new SymbolState(N_MODIFIER_0,  0));
        state110.put("INT", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state44.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state45.put("FLOAT", new SymbolState(INTEGERLITERAL,  1));
        state111.put("RPAREN", new SymbolState(ARGUMENTS,  4));
        state74.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state17.put("TRANSIENT", new SymbolState(BASICTYPE,  1));
        state36.put("TRANSIENT", new SymbolState(TYPE,  1));
        state68.put("DOUBLE", new SymbolState(N_MODIFIER_0,  0));
        state58.put("LBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state31.put("COMMA", new SymbolState(LITERAL,  1));
        state139.put("NATIVE", new SymbolState(SELECTOR,  2));
        state100.put("STRICTFP", new SymbolState(MEMBERDECL,  1));
        state13.put("LPAREN", new SymbolState(PREFIXOP,  1));
        state28.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state108.put("ID", new SymbolState(5));
        state77.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state29.put("TYPE", new SymbolState(1));
        state21.put("CLASS", new SymbolState(IMPORTDECLARATION,  4));
        state10.put("CHAR", new SymbolState(N_SELECTOR_0,  0));
        state4.put("LONG", new SymbolState(LITERAL,  1));
        state105.put("VOLATILE", new SymbolState(CLASSDECLARATION,  3));
        state14.put("SHORT", new SymbolState(BASICTYPE,  1));
        state57.put("FINAL", new SymbolState(PRIMARY,  1));
        state31.put("ABSTRACT", new SymbolState(LITERAL,  1));
        state58.put("ABSTRACT", new SymbolState(N_SELECTOR_0,  2));
        state21.put("SYNCHRONIZED", new SymbolState(IMPORTDECLARATION,  4));
        state71.put("LBRACE", new SymbolState(BRACKETSOPT,  1));
        state2.put("SYNCHRONIZED", new SymbolState(BASICTYPE,  1));
        state57.put("STATIC", new SymbolState(PRIMARY,  1));
        state78.put("SELECTOR", new SymbolState(58));
        state20.put("STATIC", new SymbolState(VARIABLEINITIALIZER,  1));
        state43.put("STATIC", new SymbolState(TYPEDECLARATION,  1));
        state80.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state119.put("STRICTFP", new SymbolState(EXPRESSION2REST,  2));
        state51.put("TRANSIENT", new SymbolState(PRIMARY,  1));
        state94.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state33.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state1.put("PREFIXOP", new SymbolState(3));
        state28.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state52.put("PUBLIC", new SymbolState(CLASSBODYDECLARATION,  2));
        state2.put("PRIVATE", new SymbolState(BASICTYPE,  1));
        state15.put("TRANSIENT", new SymbolState(BASICTYPE,  1));
        state129.put("PRIVATE", new SymbolState(PAREXPRESSION,  3));
        state32.put("PRIVATE", new SymbolState(BASICTYPE,  1));
        state6.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state137.put("ID", new SymbolState(5));
        state115.put("EOF", new SymbolState(INTERFACEBODY,  3));
        state33.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state15.put("STATIC", new SymbolState(BASICTYPE,  1));
        state97.put("PRIVATE", new SymbolState(METHODORFIELDREST,  1));
        state59.put("ABSTRACT", new SymbolState(LITERAL,  1));
        state111.put("SHORT", new SymbolState(ARGUMENTS,  4));
        state32.put("NULL", new SymbolState(BASICTYPE,  1));
        state139.put("ABSTRACT", new SymbolState(SELECTOR,  2));
        state73.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state25.put("TRANSIENT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state73.put("TRANSIENT", new SymbolState(EXPRESSION3,  2));
        state47.put("SYNCHRONIZED", new SymbolState(BOOLEANLITERAL,  1));
        state92.put("SYNCHRONIZED", new SymbolState(VARIABLEDECLARATORREST,  1));
        state12.put("STATIC", new SymbolState(MODIFIER,  1));
        state26.put("BYTE", new SymbolState(LITERAL,  1));
        state71.put("COMMA", new SymbolState(BRACKETSOPT,  1));
        state74.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  0));
        state108.put("DOUBLE", new SymbolState(35));
        state125.put("INTEGERLITERAL", new SymbolState(59));
        Map<String, SymbolState> state93 = new HashMap<String, SymbolState>();
        rules.put(93, state93);
        state93.put("SEMI", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state93.put("RBRACE", new SymbolState(INTERFACEBODYDECLARATION,  1));
        state33.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state45.put("BYTE", new SymbolState(INTEGERLITERAL,  1));
        state12.put("SEMI", new SymbolState(MODIFIER,  1));
        state5.put("PROTECTED", new SymbolState(N_DOT_ID_0,  0));
        state78.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        Map<String, SymbolState> state41 = new HashMap<String, SymbolState>();
        rules.put(41, state41);
        state41.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  3));
        state9.put("BYTE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state78.put("TRANSIENT", new SymbolState(EXPRESSION3,  2));
        state126.put("FINAL", new SymbolState(TYPEDECLARATION,  2));
        state128.put("PROTECTED", new SymbolState(VARIABLEDECLARATORREST,  3));
        state54.put("STATIC", new SymbolState(EXPRESSION2,  1));
        Map<String, SymbolState> state107 = new HashMap<String, SymbolState>();
        rules.put(107, state107);
        state107.put("EOF", new SymbolState(60));
        state3.put("DOUBLE", new SymbolState(35));
        state59.put("FLOAT", new SymbolState(LITERAL,  1));
        state36.put("ABSTRACT", new SymbolState(TYPE,  1));
        state106.put("BOOLEAN", new SymbolState(EXPRESSION3,  2));
        state66.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state25.put("PROTECTED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state32.put("ID", new SymbolState(BASICTYPE,  1));
        state78.put("DOUBLE", new SymbolState(EXPRESSION3,  2));
        state83.put("DOUBLE", new SymbolState(TYPE,  3));
        state25.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state126.put("INTERFACE", new SymbolState(TYPEDECLARATION,  2));
        state44.put("TRANSIENT", new SymbolState(BASICTYPE,  1));
        state6.put("FINAL", new SymbolState(MODIFIER,  1));
        state129.put("TRANSIENT", new SymbolState(PAREXPRESSION,  3));
        state126.put("ABSTRACT", new SymbolState(TYPEDECLARATION,  2));
        state111.put("PROTECTED", new SymbolState(ARGUMENTS,  4));
        state49.put("NATIVE", new SymbolState(N_MODIFIER_0,  2));
        state55.put("BYTE", new SymbolState(EXPRESSION,  1));
        state59.put("LONG", new SymbolState(LITERAL,  1));
        state28.put("SEMI", new SymbolState(SELECTOR,  3));
        state115.put("STRICTFP", new SymbolState(INTERFACEBODY,  3));
        state1.put("PLUS", new SymbolState(22));
        state24.put("ID", new SymbolState(MODIFIER,  1));
        state132.put("TRANSIENT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state118.put("SEMI", new SymbolState(CLASSDECLARATION,  5));
        state37.put("SHORT", new SymbolState(N_DOT_ID_0,  3));
        state68.put("INT", new SymbolState(N_MODIFIER_0,  0));
        state51.put("RBRACE", new SymbolState(PRIMARY,  1));
        state139.put("SYNCHRONIZED", new SymbolState(SELECTOR,  2));
        state53.put("PROTECTED", new SymbolState(N_TYPEDECLARATION_0,  2));
        state119.put("BECOMES", new SymbolState(EXPRESSION2REST,  2));
        state100.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        state104.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  0));
        state44.put("FALSE", new SymbolState(BASICTYPE,  1));
        state73.put("SHORT", new SymbolState(EXPRESSION3,  2));
        state33.put("INT", new SymbolState(BASICTYPE,  1));
        state66.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state119.put("LONG", new SymbolState(EXPRESSION2REST,  2));
        state137.put("PRIMARY", new SymbolState(10));
        state1.put("PRIMARY", new SymbolState(10));
        state140.put("CHAR", new SymbolState(EXPRESSION2,  2));
        state71.put("BYTE", new SymbolState(BRACKETSOPT,  1));
        state3.put("STR_LITERAL", new SymbolState(4));
        state106.put("STATIC", new SymbolState(EXPRESSION3,  2));
        state15.put("FALSE", new SymbolState(BASICTYPE,  1));
        state16.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  5));
        state27.put("FINAL", new SymbolState(LITERAL,  1));
        state14.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state15.put("CHAR", new SymbolState(BASICTYPE,  1));
        state129.put("INSTANCEOF", new SymbolState(PAREXPRESSION,  3));
        state140.put("STRICTFP", new SymbolState(EXPRESSION2,  2));
        state117.put("LBRACE", new SymbolState(9));
        state104.put("SYNCHRONIZED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state21.put("IMPORT", new SymbolState(IMPORTDECLARATION,  4));
        state55.put("COMMA", new SymbolState(EXPRESSION,  1));
        state111.put("STATIC", new SymbolState(ARGUMENTS,  4));
        state31.put("RBRACE", new SymbolState(LITERAL,  1));
        state83.put("BOOLEAN", new SymbolState(TYPE,  3));
        state2.put("LONG", new SymbolState(BASICTYPE,  1));
        state59.put("STRICTFP", new SymbolState(LITERAL,  1));
        state12.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state124.put("RBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state19.put("STR_LITERAL", new SymbolState(4));
        state18.put("INTERFACEDECLARATION", new SymbolState(61));
        state140.put("VOLATILE", new SymbolState(EXPRESSION2,  2));
        state85.put("VOLATILE", new SymbolState(EXPRESSION,  3));
        state124.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state49.put("BOOLEAN", new SymbolState(N_MODIFIER_0,  2));
        state124.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state17.put("COMMA", new SymbolState(BASICTYPE,  1));
        state37.put("LBRACE", new SymbolState(N_DOT_ID_0,  3));
        state48.put("SEMI", new SymbolState(ARGUMENTS,  2));
        state14.put("COMMA", new SymbolState(BASICTYPE,  1));
        state52.put("SYNCHRONIZED", new SymbolState(CLASSBODYDECLARATION,  2));
        state56.put("VOLATILE", new SymbolState(EXPRESSION1,  1));
        state91.put("CHAR", new SymbolState(MODIFIER,  1));
        state119.put("ABSTRACT", new SymbolState(EXPRESSION2REST,  2));
        state31.put("DOUBLE", new SymbolState(LITERAL,  1));
        state37.put("STATIC", new SymbolState(N_DOT_ID_0,  3));
        state77.put("CHAR", new SymbolState(MODIFIER,  1));
        state1.put("DOUBLE", new SymbolState(35));
        state112.put("FINAL", new SymbolState(MODIFIER,  1));
        state26.put("COMMA", new SymbolState(LITERAL,  1));
        state5.put("RBRACKET", new SymbolState(N_DOT_ID_0,  0));
        state132.put("SEMI", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state124.put("ABSTRACT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state105.put("PRIVATE", new SymbolState(CLASSDECLARATION,  3));
        state129.put("DOUBLE", new SymbolState(PAREXPRESSION,  3));
        state5.put("BOOLEAN", new SymbolState(N_DOT_ID_0,  0));
        state13.put("ID", new SymbolState(PREFIXOP,  1));
        state33.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state1.put("FLOAT", new SymbolState(2));
        state63.put("SHORT", new SymbolState(32));
        state71.put("EXCLAMATION", new SymbolState(BRACKETSOPT,  1));
        state28.put("VOLATILE", new SymbolState(SELECTOR,  3));
        state0.put("SYNCHRONIZED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state36.put("SYNCHRONIZED", new SymbolState(TYPE,  1));
        state88.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state73.put("FLOAT", new SymbolState(EXPRESSION3,  2));
        state73.put("RBRACKET", new SymbolState(EXPRESSION3,  2));
        state100.put("DOUBLE", new SymbolState(MEMBERDECL,  1));
        state139.put("ARGUMENTS", new SymbolState(62));
        state105.put("EOF", new SymbolState(CLASSDECLARATION,  3));
        state68.put("STATIC", new SymbolState(N_MODIFIER_0,  0));
        state97.put("ABSTRACT", new SymbolState(METHODORFIELDREST,  1));
        state25.put("STATIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state129.put("LONG", new SymbolState(PAREXPRESSION,  3));
        state115.put("NATIVE", new SymbolState(INTERFACEBODY,  3));
        state2.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state37.put("RBRACE", new SymbolState(N_DOT_ID_0,  3));
        state44.put("INT", new SymbolState(BASICTYPE,  1));
        state51.put("ABSTRACT", new SymbolState(PRIMARY,  1));
        state33.put("FINAL", new SymbolState(BASICTYPE,  1));
        state112.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state123.put("LONG", new SymbolState(44));
        state71.put("FINAL", new SymbolState(BRACKETSOPT,  1));
        state19.put("CHAR_LITERAL", new SymbolState(27));
        state105.put("SEMI", new SymbolState(CLASSDECLARATION,  3));
        state54.put("VOLATILE", new SymbolState(EXPRESSION2,  1));
        state125.put("LPAREN", new SymbolState(63));
        state36.put("TRUE", new SymbolState(TYPE,  1));
        state16.put("STRICTFP", new SymbolState(CLASSDECLARATION,  5));
        state63.put("LPAREN", new SymbolState(63));
        state119.put("TRANSIENT", new SymbolState(EXPRESSION2REST,  2));
        state5.put("VOLATILE", new SymbolState(N_DOT_ID_0,  0));
        state78.put("DOT", new SymbolState(64));
        state139.put("STATIC", new SymbolState(SELECTOR,  2));
        state78.put("SHORT", new SymbolState(EXPRESSION3,  2));
        state15.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state128.put("SYNCHRONIZED", new SymbolState(VARIABLEDECLARATORREST,  3));
        state82.put("ID", new SymbolState(65));
        state6.put("STATIC", new SymbolState(MODIFIER,  1));
        state113.put("NATIVE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state31.put("NATIVE", new SymbolState(LITERAL,  1));
        state72.put("FINAL", new SymbolState(INTERFACEDECLARATION,  3));
        state59.put("DOUBLE", new SymbolState(LITERAL,  1));
        state32.put("FINAL", new SymbolState(BASICTYPE,  1));
        state28.put("BECOMES", new SymbolState(SELECTOR,  3));
        state137.put("EXCLAMATION", new SymbolState(13));
        state66.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state32.put("LONG", new SymbolState(BASICTYPE,  1));
        state63.put("BOOLEAN", new SymbolState(17));
        state100.put("LONG", new SymbolState(MEMBERDECL,  1));
        state15.put("SHORT", new SymbolState(BASICTYPE,  1));
        state91.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state32.put("PLUS", new SymbolState(BASICTYPE,  1));
        state63.put("DECIMAL_INTEGER_LITERAL", new SymbolState(45));
        state44.put("BYTE", new SymbolState(BASICTYPE,  1));
        state98.put("NATIVE", new SymbolState(66));
        state1.put("BOOLEANLITERAL", new SymbolState(31));
        state108.put("BOOLEAN", new SymbolState(17));
        state51.put("FINAL", new SymbolState(PRIMARY,  1));
        state112.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state109.put("PROTECTED", new SymbolState(CLASSDECLARATION,  7));
        state129.put("PROTECTED", new SymbolState(PAREXPRESSION,  3));
        state92.put("NATIVE", new SymbolState(VARIABLEDECLARATORREST,  1));
        state36.put("DOUBLE", new SymbolState(TYPE,  1));
        state85.put("LONG", new SymbolState(EXPRESSION,  3));
        Map<String, SymbolState> state84 = new HashMap<String, SymbolState>();
        rules.put(84, state84);
        state84.put("LBRACE", new SymbolState(67));
        state110.put("LONG", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state19.put("EXPRESSION3", new SymbolState(54));
        state19.put("EXPRESSION2", new SymbolState(56));
        state94.put("SEMI", new SymbolState(43));
        state124.put("RBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state19.put("EXPRESSION1", new SymbolState(55));
        state27.put("STATIC", new SymbolState(LITERAL,  1));
        state9.put("VOLATILE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state114.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state112.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state56.put("CHAR", new SymbolState(EXPRESSION1,  1));
        state71.put("NATIVE", new SymbolState(BRACKETSOPT,  1));
        state137.put("EXPRESSION1", new SymbolState(55));
        state137.put("EXPRESSION3", new SymbolState(54));
        state109.put("SEMI", new SymbolState(CLASSDECLARATION,  7));
        state137.put("EXPRESSION2", new SymbolState(56));
        state37.put("VOLATILE", new SymbolState(N_DOT_ID_0,  3));
        state124.put("NULL", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state17.put("SEMI", new SymbolState(BASICTYPE,  1));
        state114.put("STATIC", new SymbolState(MODIFIER,  1));
        state92.put("INT", new SymbolState(VARIABLEDECLARATORREST,  1));
        state137.put("BOOLEANLITERAL", new SymbolState(31));
        state88.put("SEMI", new SymbolState(MODIFIER,  1));
        state103.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state8.put("ID", new SymbolState(5));
        state36.put("BOOLEAN", new SymbolState(TYPE,  1));
        state28.put("DOUBLE", new SymbolState(SELECTOR,  3));
        state66.put("STATIC", new SymbolState(MODIFIER,  1));
        state19.put("BASICTYPE", new SymbolState(36));
        state14.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state73.put("NATIVE", new SymbolState(EXPRESSION3,  2));
        state62.put("FLOAT", new SymbolState(SELECTOR,  3));
        state71.put("INT", new SymbolState(BRACKETSOPT,  1));
        state66.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state110.put("PLUS", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state37.put("FLOAT", new SymbolState(N_DOT_ID_0,  3));
        state63.put("PAREXPRESSION", new SymbolState(51));
        state32.put("SYNCHRONIZED", new SymbolState(BASICTYPE,  1));
        state139.put("DOT", new SymbolState(SELECTOR,  2));
        state112.put("SHORT", new SymbolState(MODIFIER,  1));
        state90.put("STRICTFP", new SymbolState(IMPORTDECLARATION,  6));
        state36.put("CHAR", new SymbolState(TYPE,  1));
        state59.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state106.put("NATIVE", new SymbolState(EXPRESSION3,  2));
        state88.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state87.put("TRANSIENT", new SymbolState(MEMBERDECL,  1));
        state53.put("ABSTRACT", new SymbolState(N_TYPEDECLARATION_0,  2));
        state110.put("ID", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state100.put("INT", new SymbolState(MEMBERDECL,  1));
        state1.put("TRUE", new SymbolState(7));
        state21.put("FINAL", new SymbolState(IMPORTDECLARATION,  4));
        state91.put("CLASS", new SymbolState(MODIFIER,  1));
        state51.put("RBRACKET", new SymbolState(PRIMARY,  1));
        state61.put("PUBLIC", new SymbolState(TYPEDECLARATION,  2));
        state61.put("STRICTFP", new SymbolState(TYPEDECLARATION,  2));
        state57.put("ID", new SymbolState(PRIMARY,  1));
        state10.put("ABSTRACT", new SymbolState(N_SELECTOR_0,  0));
        state119.put("RBRACKET", new SymbolState(EXPRESSION2REST,  2));
        state47.put("SEMI", new SymbolState(BOOLEANLITERAL,  1));
        state36.put("ID", new SymbolState(TYPE,  1));
        state9.put("N_CLASSBODYDECLARATION_0", new SymbolState(68));
        state94.put("EOF", new SymbolState(COMPILATIONUNIT,  5));
        state134.put("INT", new SymbolState(15));
        state123.put("CHAR", new SymbolState(14));
        state22.put("PLUS", new SymbolState(PREFIXOP,  1));
        state59.put("STATIC", new SymbolState(LITERAL,  1));
        state32.put("ABSTRACT", new SymbolState(BASICTYPE,  1));
        state95.put("FLOAT", new SymbolState(METHODORFIELDDECL,  3));
        state19.put("INT", new SymbolState(15));
        state59.put("SEMI", new SymbolState(LITERAL,  1));
        state111.put("FLOAT", new SymbolState(ARGUMENTS,  4));
        state101.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state59.put("BECOMES", new SymbolState(LITERAL,  1));
        state15.put("NATIVE", new SymbolState(BASICTYPE,  1));
        state98.put("BYTE", new SymbolState(33));
        state45.put("CHAR", new SymbolState(INTEGERLITERAL,  1));
        state0.put("STRICTFP", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state125.put("INT", new SymbolState(15));
        state132.put("LONG", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state137.put("EXPRESSION", new SymbolState(69));
        state55.put("ABSTRACT", new SymbolState(EXPRESSION,  1));
        state115.put("CLASS", new SymbolState(INTERFACEBODY,  3));
        state83.put("IMPLEMENTS", new SymbolState(TYPE,  3));
        state114.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state3.put("CHAR", new SymbolState(14));
        state91.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state27.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state106.put("STRICTFP", new SymbolState(EXPRESSION3,  2));
        state76.put("DOT", new SymbolState(70));
        state23.put("DECIMAL_INTEGER_LITERAL", new SymbolState(PREFIXOP,  1));
        state113.put("N_LBRACKET_RBRACKET_0", new SymbolState(71));
        state83.put("SYNCHRONIZED", new SymbolState(TYPE,  3));
        state37.put("STR_LITERAL", new SymbolState(N_DOT_ID_0,  3));
        state27.put("RPAREN", new SymbolState(LITERAL,  1));
        state17.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state104.put("PUBLIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state106.put("FLOAT", new SymbolState(EXPRESSION3,  2));
        state62.put("RBRACKET", new SymbolState(SELECTOR,  3));
        state7.put("STATIC", new SymbolState(BOOLEANLITERAL,  1));
        state57.put("NATIVE", new SymbolState(PRIMARY,  1));
        state71.put("TRANSIENT", new SymbolState(BRACKETSOPT,  1));
        state80.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state119.put("NATIVE", new SymbolState(EXPRESSION2REST,  2));
        state84.put("INTERFACEBODY", new SymbolState(72));
        state3.put("EXPRESSION3", new SymbolState(73));
        state136.put("CLASS", new SymbolState(N_MODIFIER_0,  0));
        state36.put("NULL", new SymbolState(TYPE,  1));
        state32.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state55.put("CHAR", new SymbolState(EXPRESSION,  1));
        state26.put("RBRACE", new SymbolState(LITERAL,  1));
        state56.put("RBRACE", new SymbolState(EXPRESSION1,  1));
        state136.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        state113.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state7.put("PROTECTED", new SymbolState(BOOLEANLITERAL,  1));
        state9.put("STRICTFP", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state3.put("INTEGERLITERAL", new SymbolState(59));
        state33.put("SEMI", new SymbolState(BASICTYPE,  1));
        state10.put("SHORT", new SymbolState(N_SELECTOR_0,  0));
        state2.put("STRICTFP", new SymbolState(BASICTYPE,  1));
        state129.put("STRICTFP", new SymbolState(PAREXPRESSION,  3));
        state129.put("FINAL", new SymbolState(PAREXPRESSION,  3));
        state110.put("CHAR", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state33.put("ABSTRACT", new SymbolState(BASICTYPE,  1));
        state128.put("CHAR", new SymbolState(VARIABLEDECLARATORREST,  3));
        state0.put("N_IMPORTDECLARATION_0", new SymbolState(74));
        state71.put("LBRACKET", new SymbolState(75));
        state94.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state109.put("NATIVE", new SymbolState(CLASSDECLARATION,  7));
        state58.put("SHORT", new SymbolState(N_SELECTOR_0,  2));
        state5.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_DOT_ID_0,  0));
        state29.put("PAREXPRESSION", new SymbolState(51));
        state4.put("BYTE", new SymbolState(LITERAL,  1));
        state85.put("SEMI", new SymbolState(EXPRESSION,  3));
        state8.put("INT", new SymbolState(15));
        Map<String, SymbolState> state131 = new HashMap<String, SymbolState>();
        rules.put(131, state131);
        state131.put("N_DOT_ID_0", new SymbolState(76));
        state44.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state72.put("EOF", new SymbolState(INTERFACEDECLARATION,  3));
        state124.put("STRICTFP", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state26.put("PROTECTED", new SymbolState(LITERAL,  1));
        state27.put("VOLATILE", new SymbolState(LITERAL,  1));
        state14.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state32.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state12.put("SHORT", new SymbolState(MODIFIER,  1));
        state56.put("ID", new SymbolState(EXPRESSION1,  1));
        state44.put("TRUE", new SymbolState(BASICTYPE,  1));
        state104.put("FINAL", new SymbolState(N_TYPEDECLARATION_0,  0));
        state129.put("ABSTRACT", new SymbolState(PAREXPRESSION,  3));
        state44.put("COMMA", new SymbolState(BASICTYPE,  1));
        state140.put("RPAREN", new SymbolState(EXPRESSION2,  2));
        state59.put("PROTECTED", new SymbolState(LITERAL,  1));
        state8.put("FLOAT", new SymbolState(2));
        state20.put("LONG", new SymbolState(VARIABLEINITIALIZER,  1));
        state16.put("STATIC", new SymbolState(CLASSDECLARATION,  5));
        state32.put("MINUS", new SymbolState(BASICTYPE,  1));
        state92.put("PROTECTED", new SymbolState(VARIABLEDECLARATORREST,  1));
        state90.put("PUBLIC", new SymbolState(IMPORTDECLARATION,  6));
        state31.put("PROTECTED", new SymbolState(LITERAL,  1));
        state35.put("MINUS", new SymbolState(BASICTYPE,  1));
        state63.put("BOOLEANLITERAL", new SymbolState(31));
        state52.put("BYTE", new SymbolState(CLASSBODYDECLARATION,  2));
        state44.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state55.put("LONG", new SymbolState(EXPRESSION,  1));
        state98.put("TRANSIENT", new SymbolState(77));
        state91.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state28.put("RBRACKET", new SymbolState(SELECTOR,  3));
        state39.put("BOOLEAN", new SymbolState(17));
        state77.put("FINAL", new SymbolState(MODIFIER,  1));
        state27.put("BECOMES", new SymbolState(LITERAL,  1));
        state10.put("N_SELECTOR_0", new SymbolState(78));
        state26.put("SHORT", new SymbolState(LITERAL,  1));
        state5.put("DOUBLE", new SymbolState(N_DOT_ID_0,  0));
        state137.put("BOOLEAN", new SymbolState(17));
        state49.put("INT", new SymbolState(N_MODIFIER_0,  2));
        state6.put("SEMI", new SymbolState(MODIFIER,  1));
        state71.put("RPAREN", new SymbolState(BRACKETSOPT,  1));
        state109.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  7));
        state95.put("STRICTFP", new SymbolState(METHODORFIELDDECL,  3));
        state2.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state58.put("STATIC", new SymbolState(N_SELECTOR_0,  2));
        state4.put("SHORT", new SymbolState(LITERAL,  1));
        state140.put("LONG", new SymbolState(EXPRESSION2,  2));
        state125.put("CHAR_LITERAL", new SymbolState(27));
        state125.put("EXPRESSION", new SymbolState(79));
        state88.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state36.put("SEMI", new SymbolState(TYPE,  1));
        state8.put("LONG", new SymbolState(44));
        state106.put("PRIVATE", new SymbolState(EXPRESSION3,  2));
        state7.put("VOLATILE", new SymbolState(BOOLEANLITERAL,  1));
        state129.put("SYNCHRONIZED", new SymbolState(PAREXPRESSION,  3));
        state124.put("VOLATILE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state83.put("ID", new SymbolState(TYPE,  3));
        state97.put("FLOAT", new SymbolState(METHODORFIELDREST,  1));
        state123.put("LITERAL", new SymbolState(57));
        state66.put("NATIVE", new SymbolState(MODIFIER,  1));
        state78.put("PUBLIC", new SymbolState(EXPRESSION3,  2));
        state85.put("ABSTRACT", new SymbolState(EXPRESSION,  3));
        state71.put("BECOMES", new SymbolState(BRACKETSOPT,  1));
        state20.put("SYNCHRONIZED", new SymbolState(VARIABLEINITIALIZER,  1));
        state136.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state80.put("SHORT", new SymbolState(MODIFIER,  1));
        state139.put("FINAL", new SymbolState(SELECTOR,  2));
        state123.put("PLUS", new SymbolState(22));
        state103.put("PROTECTED", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state73.put("STRICTFP", new SymbolState(EXPRESSION3,  2));
        state1.put("BYTE", new SymbolState(33));
        state123.put("BASICTYPE", new SymbolState(36));
        state98.put("STATIC", new SymbolState(12));
        state92.put("RBRACE", new SymbolState(VARIABLEDECLARATORREST,  1));
        state20.put("RBRACE", new SymbolState(VARIABLEINITIALIZER,  1));
        state58.put("ID", new SymbolState(N_SELECTOR_0,  2));
        state71.put("RBRACKET", new SymbolState(BRACKETSOPT,  1));
        state9.put("TRANSIENT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state45.put("STATIC", new SymbolState(INTEGERLITERAL,  1));
        state83.put("FINAL", new SymbolState(TYPE,  3));
        state32.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state35.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state103.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state45.put("INT", new SymbolState(INTEGERLITERAL,  1));
        state26.put("SEMI", new SymbolState(LITERAL,  1));
        state71.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BRACKETSOPT,  1));
        state18.put("VOLATILE", new SymbolState(80));
        state91.put("NATIVE", new SymbolState(MODIFIER,  1));
        state33.put("MINUS", new SymbolState(BASICTYPE,  1));
        state26.put("TRANSIENT", new SymbolState(LITERAL,  1));
        state28.put("INT", new SymbolState(SELECTOR,  3));
        state83.put("PROTECTED", new SymbolState(TYPE,  3));
        state110.put("MINUS", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state95.put("PROTECTED", new SymbolState(METHODORFIELDDECL,  3));
        state105.put("NATIVE", new SymbolState(CLASSDECLARATION,  3));
        state104.put("STATIC", new SymbolState(N_TYPEDECLARATION_0,  0));
        state123.put("BYTE", new SymbolState(33));
        state78.put("PRIVATE", new SymbolState(EXPRESSION3,  2));
        state17.put("SYNCHRONIZED", new SymbolState(BASICTYPE,  1));
        state4.put("COMMA", new SymbolState(LITERAL,  1));
        state113.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        Map<String, SymbolState> state116 = new HashMap<String, SymbolState>();
        rules.put(116, state116);
        state116.put("INTERFACEBODY", new SymbolState(81));
        state110.put("TRUE", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state51.put("FLOAT", new SymbolState(PRIMARY,  1));
        state17.put("NATIVE", new SymbolState(BASICTYPE,  1));
        state37.put("CHAR", new SymbolState(N_DOT_ID_0,  3));
        state85.put("COMMA", new SymbolState(EXPRESSION,  3));
        state27.put("FLOAT", new SymbolState(LITERAL,  1));
        state114.put("CLASS", new SymbolState(MODIFIER,  1));
        state33.put("PLUS", new SymbolState(BASICTYPE,  1));
        state33.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state83.put("STATIC", new SymbolState(TYPE,  3));
        state113.put("PROTECTED", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state36.put("MINUS", new SymbolState(TYPE,  1));
        state66.put("CLASS", new SymbolState(MODIFIER,  1));
        state112.put("FLOAT", new SymbolState(MODIFIER,  1));
        state2.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state63.put("TRUE", new SymbolState(7));
        state5.put("FINAL", new SymbolState(N_DOT_ID_0,  0));
        state66.put("INT", new SymbolState(MODIFIER,  1));
        state47.put("RBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state98.put("BASICTYPE", new SymbolState(36));
        state33.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state15.put("PLUS", new SymbolState(BASICTYPE,  1));
        state22.put("NULL", new SymbolState(PREFIXOP,  1));
        state28.put("ID", new SymbolState(SELECTOR,  3));
        state61.put("EOF", new SymbolState(TYPEDECLARATION,  2));
        state91.put("LONG", new SymbolState(MODIFIER,  1));
        state47.put("TRANSIENT", new SymbolState(BOOLEANLITERAL,  1));
        state58.put("PRIVATE", new SymbolState(N_SELECTOR_0,  2));
        state59.put("FINAL", new SymbolState(LITERAL,  1));
        state25.put("FINAL", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state17.put("TRUE", new SymbolState(BASICTYPE,  1));
        state111.put("DOUBLE", new SymbolState(ARGUMENTS,  4));
        state4.put("STRICTFP", new SymbolState(LITERAL,  1));
        state71.put("FALSE", new SymbolState(BRACKETSOPT,  1));
        state88.put("FINAL", new SymbolState(MODIFIER,  1));
        state12.put("FINAL", new SymbolState(MODIFIER,  1));
        state100.put("ABSTRACT", new SymbolState(MEMBERDECL,  1));
        state140.put("FLOAT", new SymbolState(EXPRESSION2,  2));
        state3.put("PLUS", new SymbolState(22));
        state44.put("ID", new SymbolState(BASICTYPE,  1));
        state48.put("CHAR", new SymbolState(ARGUMENTS,  2));
        state24.put("SEMI", new SymbolState(MODIFIER,  1));
        state98.put("VOLATILE", new SymbolState(80));
        state1.put("INT", new SymbolState(15));
        state3.put("BYTE", new SymbolState(33));
        state39.put("DOUBLE", new SymbolState(35));
        state32.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state105.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  3));
        state0.put("PACKAGE", new SymbolState(82));
        state106.put("PROTECTED", new SymbolState(EXPRESSION3,  2));
        state36.put("PROTECTED", new SymbolState(TYPE,  1));
        state6.put("CLASS", new SymbolState(MODIFIER,  1));
        state123.put("INT", new SymbolState(15));
        state106.put("VOLATILE", new SymbolState(EXPRESSION3,  2));
        state14.put("SEMI", new SymbolState(BASICTYPE,  1));
        state125.put("PREFIXOP", new SymbolState(3));
        state26.put("DOUBLE", new SymbolState(LITERAL,  1));
        state136.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        state126.put("STATIC", new SymbolState(TYPEDECLARATION,  2));
        state94.put("INTERFACE", new SymbolState(N_MODIFIER_0,  0));
        state58.put("SEMI", new SymbolState(N_SELECTOR_0,  2));
        state52.put("ID", new SymbolState(CLASSBODYDECLARATION,  2));
        state78.put("VOLATILE", new SymbolState(EXPRESSION3,  2));
        state54.put("INT", new SymbolState(EXPRESSION2,  1));
        state83.put("VOLATILE", new SymbolState(TYPE,  3));
        state31.put("VOLATILE", new SymbolState(LITERAL,  1));
        state113.put("RPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state113.put("BRACKETSOPT", new SymbolState(83));
        state44.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state29.put("ID", new SymbolState(5));
        state37.put("LONG", new SymbolState(N_DOT_ID_0,  3));
        state5.put("PRIVATE", new SymbolState(N_DOT_ID_0,  0));
        state71.put("FLOAT", new SymbolState(BRACKETSOPT,  1));
        state47.put("INT", new SymbolState(BOOLEANLITERAL,  1));
        state51.put("PUBLIC", new SymbolState(PRIMARY,  1));
        state97.put("SYNCHRONIZED", new SymbolState(METHODORFIELDREST,  1));
        state6.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state57.put("INT", new SymbolState(PRIMARY,  1));
        state33.put("PUBLIC", new SymbolState(BASICTYPE,  1));
        state33.put("CHAR", new SymbolState(BASICTYPE,  1));
        state83.put("RBRACE", new SymbolState(TYPE,  3));
        state113.put("FALSE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state54.put("TRANSIENT", new SymbolState(EXPRESSION2,  1));
        state63.put("STR_LITERAL", new SymbolState(4));
        state47.put("STRICTFP", new SymbolState(BOOLEANLITERAL,  1));
        state29.put("PRIMARY", new SymbolState(10));
        state44.put("SHORT", new SymbolState(BASICTYPE,  1));
        state74.put("STRICTFP", new SymbolState(N_TYPEDECLARATION_0,  0));
        state119.put("PROTECTED", new SymbolState(EXPRESSION2REST,  2));
        state112.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state83.put("BECOMES", new SymbolState(TYPE,  3));
        state48.put("LONG", new SymbolState(ARGUMENTS,  2));
        state73.put("BYTE", new SymbolState(EXPRESSION3,  2));
        state12.put("CLASS", new SymbolState(MODIFIER,  1));
        state132.put("SYNCHRONIZED", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state13.put("DOUBLE", new SymbolState(PREFIXOP,  1));
        state59.put("RBRACE", new SymbolState(LITERAL,  1));
        state16.put("PROTECTED", new SymbolState(CLASSDECLARATION,  5));
        state108.put("FLOAT", new SymbolState(2));
        state47.put("CHAR", new SymbolState(BOOLEANLITERAL,  1));
        state19.put("TYPE", new SymbolState(1));
        state71.put("ID", new SymbolState(BRACKETSOPT,  1));
        state87.put("VOLATILE", new SymbolState(MEMBERDECL,  1));
        state37.put("IMPLEMENTS", new SymbolState(N_DOT_ID_0,  3));
        state6.put("NATIVE", new SymbolState(MODIFIER,  1));
        state9.put("STATIC", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state35.put("BYTE", new SymbolState(BASICTYPE,  1));
        state136.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state63.put("NULL", new SymbolState(26));
        state54.put("RBRACKET", new SymbolState(EXPRESSION2,  1));
        state109.put("STATIC", new SymbolState(CLASSDECLARATION,  7));
        state47.put("COMMA", new SymbolState(BOOLEANLITERAL,  1));
        state131.put("SEMI", new SymbolState(N_DOT_ID_0,  0));
        state92.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  1));
        state5.put("COMMA", new SymbolState(N_DOT_ID_0,  0));
        state33.put("SHORT", new SymbolState(BASICTYPE,  1));
        state12.put("BYTE", new SymbolState(MODIFIER,  1));
        state22.put("CHAR", new SymbolState(PREFIXOP,  1));
        state23.put("EXCLAMATION", new SymbolState(PREFIXOP,  1));
        state48.put("PRIVATE", new SymbolState(ARGUMENTS,  2));
        state39.put("LONG", new SymbolState(44));
        state113.put("EXCLAMATION", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state123.put("SHORT", new SymbolState(32));
        state66.put("ID", new SymbolState(MODIFIER,  1));
        state0.put("TRANSIENT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state132.put("PROTECTED", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state91.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state137.put("SHORT", new SymbolState(32));
        state134.put("LONG", new SymbolState(44));
        state57.put("VOLATILE", new SymbolState(PRIMARY,  1));
        state5.put("SHORT", new SymbolState(N_DOT_ID_0,  0));
        state135.put("CLASS", new SymbolState(CLASSBODY,  3));
        state62.put("RPAREN", new SymbolState(SELECTOR,  3));
        state111.put("BYTE", new SymbolState(ARGUMENTS,  4));
        state113.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state109.put("INTERFACE", new SymbolState(CLASSDECLARATION,  7));
        state17.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state88.put("CHAR", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state42 = new HashMap<String, SymbolState>();
        rules.put(42, state42);
        state42.put("ID", new SymbolState(84));
        state132.put("DOUBLE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state123.put("EXPRESSION1", new SymbolState(85));
        state45.put("BOOLEAN", new SymbolState(INTEGERLITERAL,  1));
        state123.put("EXPRESSION2", new SymbolState(56));
        state52.put("ABSTRACT", new SymbolState(CLASSBODYDECLARATION,  2));
        state92.put("ID", new SymbolState(VARIABLEDECLARATORREST,  1));
        state129.put("BECOMES", new SymbolState(PAREXPRESSION,  3));
        state3.put("FALSE", new SymbolState(47));
        state45.put("BECOMES", new SymbolState(INTEGERLITERAL,  1));
        state8.put("SHORT", new SymbolState(32));
        state123.put("EXPRESSION3", new SymbolState(54));
        state27.put("ABSTRACT", new SymbolState(LITERAL,  1));
        state83.put("NATIVE", new SymbolState(TYPE,  3));
        state125.put("EXPRESSION1", new SymbolState(55));
        state5.put("TRANSIENT", new SymbolState(N_DOT_ID_0,  0));
        state101.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state125.put("EXPRESSION2", new SymbolState(56));
        state125.put("EXPRESSION3", new SymbolState(54));
        state29.put("DECIMAL_INTEGER_LITERAL", new SymbolState(45));
        state110.put("STR_LITERAL", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state31.put("ID", new SymbolState(LITERAL,  1));
        state72.put("SYNCHRONIZED", new SymbolState(INTERFACEDECLARATION,  3));
        state140.put("INT", new SymbolState(EXPRESSION2,  2));
        state37.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_DOT_ID_0,  3));
        state47.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state4.put("DOUBLE", new SymbolState(LITERAL,  1));
        state31.put("LONG", new SymbolState(LITERAL,  1));
        state22.put("LONG", new SymbolState(PREFIXOP,  1));
        state9.put("RBRACE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        Map<String, SymbolState> state30 = new HashMap<String, SymbolState>();
        rules.put(30, state30);
        state30.put("LBRACE", new SymbolState(9));
        state44.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state10.put("DOUBLE", new SymbolState(N_SELECTOR_0,  0));
        state140.put("DOUBLE", new SymbolState(EXPRESSION2,  2));
        state72.put("STRICTFP", new SymbolState(INTERFACEDECLARATION,  3));
        state50.put("N_COMMA_TYPE_0", new SymbolState(86));
        state139.put("INT", new SymbolState(SELECTOR,  2));
        state18.put("NATIVE", new SymbolState(66));
        state71.put("STR_LITERAL", new SymbolState(BRACKETSOPT,  1));
        state124.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state98.put("SEMI", new SymbolState(87));
        state55.put("RBRACE", new SymbolState(EXPRESSION,  1));
        state77.put("BYTE", new SymbolState(MODIFIER,  1));
        state115.put("VOLATILE", new SymbolState(INTERFACEBODY,  3));
        state129.put("SEMI", new SymbolState(PAREXPRESSION,  3));
        state136.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state104.put("NATIVE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state39.put("ID", new SymbolState(5));
        state0.put("ABSTRACT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state83.put("COMMA", new SymbolState(TYPE,  3));
        state66.put("LONG", new SymbolState(MODIFIER,  1));
        state98.put("ABSTRACT", new SymbolState(88));
        state35.put("NULL", new SymbolState(BASICTYPE,  1));
        state62.put("VOLATILE", new SymbolState(SELECTOR,  3));
        state10.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  0));
        state31.put("INT", new SymbolState(LITERAL,  1));
        state72.put("PRIVATE", new SymbolState(INTERFACEDECLARATION,  3));
        state2.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state62.put("INSTANCEOF", new SymbolState(SELECTOR,  3));
        state123.put("PRIMARY", new SymbolState(10));
        state27.put("BYTE", new SymbolState(LITERAL,  1));
        state2.put("INT", new SymbolState(BASICTYPE,  1));
        state66.put("SEMI", new SymbolState(MODIFIER,  1));
        state1.put("EXCLAMATION", new SymbolState(13));
        state103.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state119.put("RPAREN", new SymbolState(EXPRESSION2REST,  2));
        state62.put("BYTE", new SymbolState(SELECTOR,  3));
        state3.put("FLOAT", new SymbolState(2));
        state55.put("FLOAT", new SymbolState(EXPRESSION,  1));
        state62.put("ABSTRACT", new SymbolState(SELECTOR,  3));
        state91.put("FLOAT", new SymbolState(MODIFIER,  1));
        state81.put("INTERFACE", new SymbolState(INTERFACEDECLARATION,  5));
        state72.put("VOLATILE", new SymbolState(INTERFACEDECLARATION,  3));
        state59.put("SYNCHRONIZED", new SymbolState(LITERAL,  1));
        state12.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state0.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state85.put("INT", new SymbolState(EXPRESSION,  3));
        state44.put("SEMI", new SymbolState(BASICTYPE,  1));
        state56.put("DOUBLE", new SymbolState(EXPRESSION1,  1));
        state6.put("LONG", new SymbolState(MODIFIER,  1));
        state91.put("INT", new SymbolState(MODIFIER,  1));
        state125.put("CHAR", new SymbolState(14));
        state71.put("VOLATILE", new SymbolState(BRACKETSOPT,  1));
        state40.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state54.put("BOOLEAN", new SymbolState(EXPRESSION2,  1));
        Map<String, SymbolState> state79 = new HashMap<String, SymbolState>();
        rules.put(79, state79);
        state79.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state115.put("PROTECTED", new SymbolState(INTERFACEBODY,  3));
        state137.put("LONG", new SymbolState(44));
        state19.put("PREFIXOP", new SymbolState(3));
        state39.put("TYPELIST", new SymbolState(89));
        state27.put("CHAR", new SymbolState(LITERAL,  1));
        state106.put("ID", new SymbolState(EXPRESSION3,  2));
        state16.put("SEMI", new SymbolState(CLASSDECLARATION,  5));
        state7.put("DOUBLE", new SymbolState(BOOLEANLITERAL,  1));
        state71.put("CHAR_LITERAL", new SymbolState(BRACKETSOPT,  1));
        state113.put("IMPLEMENTS", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state78.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state91.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state58.put("BECOMES", new SymbolState(N_SELECTOR_0,  2));
        Map<String, SymbolState> state122 = new HashMap<String, SymbolState>();
        rules.put(122, state122);
        state122.put("SEMI", new SymbolState(90));
        state14.put("ABSTRACT", new SymbolState(BASICTYPE,  1));
        state63.put("MINUS", new SymbolState(23));
        state71.put("SHORT", new SymbolState(BRACKETSOPT,  1));
        state59.put("RPAREN", new SymbolState(LITERAL,  1));
        state134.put("BASICTYPE", new SymbolState(36));
        state31.put("SEMI", new SymbolState(LITERAL,  1));
        state15.put("VOLATILE", new SymbolState(BASICTYPE,  1));
        state21.put("SEMI", new SymbolState(IMPORTDECLARATION,  4));
        state51.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state54.put("SYNCHRONIZED", new SymbolState(EXPRESSION2,  1));
        state7.put("SEMI", new SymbolState(BOOLEANLITERAL,  1));
        state33.put("STATIC", new SymbolState(BASICTYPE,  1));
        state36.put("RBRACE", new SymbolState(TYPE,  1));
        state3.put("MINUS", new SymbolState(23));
        state95.put("SHORT", new SymbolState(METHODORFIELDDECL,  3));
        state103.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state63.put("ID", new SymbolState(5));
        state38.put("ID", new SymbolState(5));
        state105.put("STATIC", new SymbolState(CLASSDECLARATION,  3));
        state119.put("INT", new SymbolState(EXPRESSION2REST,  2));
        state113.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state113.put("STATIC", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state19.put("INTEGERLITERAL", new SymbolState(59));
        state72.put("INTERFACE", new SymbolState(INTERFACEDECLARATION,  3));
        state31.put("DOT", new SymbolState(LITERAL,  1));
        state24.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state3.put("BOOLEAN", new SymbolState(17));
        state92.put("FINAL", new SymbolState(VARIABLEDECLARATORREST,  1));
        state36.put("NATIVE", new SymbolState(TYPE,  1));
        state98.put("PRIVATE", new SymbolState(91));
        state45.put("NATIVE", new SymbolState(INTEGERLITERAL,  1));
        state14.put("LONG", new SymbolState(BASICTYPE,  1));
        state81.put("NATIVE", new SymbolState(INTERFACEDECLARATION,  5));
        state56.put("SEMI", new SymbolState(EXPRESSION1,  1));
        state29.put("BOOLEANLITERAL", new SymbolState(31));
        state108.put("SHORT", new SymbolState(32));
        state123.put("MINUS", new SymbolState(23));
        state124.put("FINAL", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state36.put("VOLATILE", new SymbolState(TYPE,  1));
        state63.put("CHAR_LITERAL", new SymbolState(27));
        state2.put("FALSE", new SymbolState(BASICTYPE,  1));
        state9.put("SHORT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state106.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state109.put("VOLATILE", new SymbolState(CLASSDECLARATION,  7));
        state98.put("ID", new SymbolState(5));
        state22.put("EXCLAMATION", new SymbolState(PREFIXOP,  1));
        state17.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state33.put("NATIVE", new SymbolState(BASICTYPE,  1));
        state4.put("LBRACKET", new SymbolState(LITERAL,  1));
        state51.put("NATIVE", new SymbolState(PRIMARY,  1));
        state109.put("EOF", new SymbolState(CLASSDECLARATION,  7));
        state137.put("PREFIXOP", new SymbolState(3));
        state17.put("PUBLIC", new SymbolState(BASICTYPE,  1));
        state26.put("RPAREN", new SymbolState(LITERAL,  1));
        state87.put("CHAR", new SymbolState(MEMBERDECL,  1));
        Map<String, SymbolState> state11 = new HashMap<String, SymbolState>();
        rules.put(11, state11);
        state11.put("RBRACE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state14.put("SYNCHRONIZED", new SymbolState(BASICTYPE,  1));
        state22.put("FALSE", new SymbolState(PREFIXOP,  1));
        state33.put("LONG", new SymbolState(BASICTYPE,  1));
        state62.put("SEMI", new SymbolState(SELECTOR,  3));
        state124.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state31.put("RPAREN", new SymbolState(LITERAL,  1));
        state20.put("SHORT", new SymbolState(VARIABLEINITIALIZER,  1));
        state4.put("ABSTRACT", new SymbolState(LITERAL,  1));
        state109.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  7));
        state77.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state58.put("LONG", new SymbolState(N_SELECTOR_0,  2));
        state78.put("RBRACKET", new SymbolState(EXPRESSION3,  2));
        state57.put("SHORT", new SymbolState(PRIMARY,  1));
        state97.put("BYTE", new SymbolState(METHODORFIELDREST,  1));
        state80.put("FLOAT", new SymbolState(MODIFIER,  1));
        state23.put("CHAR", new SymbolState(PREFIXOP,  1));
        state87.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        state85.put("STRICTFP", new SymbolState(EXPRESSION,  3));
        state62.put("STATIC", new SymbolState(SELECTOR,  3));
        state28.put("NATIVE", new SymbolState(SELECTOR,  3));
        state92.put("STATIC", new SymbolState(VARIABLEDECLARATORREST,  1));
        state29.put("LPAREN", new SymbolState(63));
        state28.put("FINAL", new SymbolState(SELECTOR,  3));
        state51.put("RPAREN", new SymbolState(PRIMARY,  1));
        state114.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state132.put("INT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state2.put("MINUS", new SymbolState(BASICTYPE,  1));
        state73.put("CHAR", new SymbolState(EXPRESSION3,  2));
        state103.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state58.put("RBRACE", new SymbolState(N_SELECTOR_0,  2));
        state61.put("NATIVE", new SymbolState(TYPEDECLARATION,  2));
        state103.put("BRACKETSOPT", new SymbolState(92));
        state38.put("LONG", new SymbolState(44));
        state91.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state66.put("FINAL", new SymbolState(MODIFIER,  1));
        state98.put("FINAL", new SymbolState(24));
        state51.put("STATIC", new SymbolState(PRIMARY,  1));
        state77.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state83.put("PUBLIC", new SymbolState(TYPE,  3));
        state119.put("RBRACE", new SymbolState(EXPRESSION2REST,  2));
        state37.put("TRUE", new SymbolState(N_DOT_ID_0,  3));
        state12.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state78.put("FLOAT", new SymbolState(EXPRESSION3,  2));
        state124.put("CHAR_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state32.put("VOLATILE", new SymbolState(BASICTYPE,  1));
        state31.put("SHORT", new SymbolState(LITERAL,  1));
        state78.put("BYTE", new SymbolState(EXPRESSION3,  2));
        state14.put("STATIC", new SymbolState(BASICTYPE,  1));
        state49.put("BYTE", new SymbolState(N_MODIFIER_0,  2));
        state13.put("PLUS", new SymbolState(PREFIXOP,  1));
        state34.put("SEMI", new SymbolState(93));
        state63.put("INT", new SymbolState(15));
        state20.put("BOOLEAN", new SymbolState(VARIABLEINITIALIZER,  1));
        state17.put("BYTE", new SymbolState(BASICTYPE,  1));
        state137.put("BYTE", new SymbolState(33));
        state55.put("SYNCHRONIZED", new SymbolState(EXPRESSION,  1));
        state28.put("DOT", new SymbolState(SELECTOR,  3));
        state133.put("BASICTYPE", new SymbolState(36));
        Map<String, SymbolState> state121 = new HashMap<String, SymbolState>();
        rules.put(121, state121);
        state121.put("SEMI", new SymbolState(QUALIFIEDIDENTIFIER,  2));
        state68.put("PRIVATE", new SymbolState(N_MODIFIER_0,  0));
        state124.put("INT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state10.put("RBRACE", new SymbolState(N_SELECTOR_0,  0));
        Map<String, SymbolState> state65 = new HashMap<String, SymbolState>();
        rules.put(65, state65);
        state65.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state123.put("PREFIXOP", new SymbolState(3));
        state36.put("LONG", new SymbolState(TYPE,  1));
        state97.put("INT", new SymbolState(METHODORFIELDREST,  1));
        state17.put("STATIC", new SymbolState(BASICTYPE,  1));
        state35.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state4.put("RBRACE", new SymbolState(LITERAL,  1));
        state104.put("N_TYPEDECLARATION_0", new SymbolState(94));
        state32.put("PROTECTED", new SymbolState(BASICTYPE,  1));
        state104.put("IMPORTDECLARATION", new SymbolState(40));
        state87.put("ABSTRACT", new SymbolState(MEMBERDECL,  1));
        state119.put("SHORT", new SymbolState(EXPRESSION2REST,  2));
        state63.put("BASICTYPE", new SymbolState(36));
        state10.put("COMMA", new SymbolState(N_SELECTOR_0,  0));
        state32.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state81.put("VOLATILE", new SymbolState(INTERFACEDECLARATION,  5));
        state111.put("LBRACKET", new SymbolState(ARGUMENTS,  4));
        state10.put("STRICTFP", new SymbolState(N_SELECTOR_0,  0));
        state63.put("DOUBLE", new SymbolState(35));
        state109.put("PUBLIC", new SymbolState(CLASSDECLARATION,  7));
        state15.put("PUBLIC", new SymbolState(BASICTYPE,  1));
        state20.put("FLOAT", new SymbolState(VARIABLEINITIALIZER,  1));
        state109.put("CLASS", new SymbolState(CLASSDECLARATION,  7));
        state35.put("SYNCHRONIZED", new SymbolState(BASICTYPE,  1));
        state118.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  5));
        state47.put("LONG", new SymbolState(BOOLEANLITERAL,  1));
        state48.put("DOUBLE", new SymbolState(ARGUMENTS,  2));
        state22.put("BYTE", new SymbolState(PREFIXOP,  1));
        state27.put("PROTECTED", new SymbolState(LITERAL,  1));
        state123.put("LPAREN", new SymbolState(63));
        state72.put("STATIC", new SymbolState(INTERFACEDECLARATION,  3));
        state12.put("NATIVE", new SymbolState(MODIFIER,  1));
        state24.put("FLOAT", new SymbolState(MODIFIER,  1));
        state140.put("COMMA", new SymbolState(EXPRESSION2,  2));
        state112.put("BYTE", new SymbolState(MODIFIER,  1));
        state27.put("DOT", new SymbolState(LITERAL,  1));
        state35.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state61.put("SEMI", new SymbolState(TYPEDECLARATION,  2));
        state77.put("NATIVE", new SymbolState(MODIFIER,  1));
        state95.put("BYTE", new SymbolState(METHODORFIELDDECL,  3));
        state62.put("INT", new SymbolState(SELECTOR,  3));
        state136.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        state88.put("LONG", new SymbolState(MODIFIER,  1));
        state17.put("FALSE", new SymbolState(BASICTYPE,  1));
        state48.put("INT", new SymbolState(ARGUMENTS,  2));
        state33.put("TRUE", new SymbolState(BASICTYPE,  1));
        state100.put("FLOAT", new SymbolState(MEMBERDECL,  1));
        state33.put("BYTE", new SymbolState(BASICTYPE,  1));
        state24.put("INT", new SymbolState(MODIFIER,  1));
        state55.put("INT", new SymbolState(EXPRESSION,  1));
        state0.put("VOLATILE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state15.put("MINUS", new SymbolState(BASICTYPE,  1));
        state31.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state2.put("NATIVE", new SymbolState(BASICTYPE,  1));
        state123.put("PAREXPRESSION", new SymbolState(51));
        state124.put("IMPLEMENTS", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state103.put("VOLATILE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state45.put("RBRACE", new SymbolState(INTEGERLITERAL,  1));
        state91.put("BYTE", new SymbolState(MODIFIER,  1));
        state29.put("DOUBLE", new SymbolState(35));
        state14.put("STRICTFP", new SymbolState(BASICTYPE,  1));
        state1.put("PAREXPRESSION", new SymbolState(51));
        state25.put("PUBLIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state73.put("ID", new SymbolState(EXPRESSION3,  2));
        state55.put("VOLATILE", new SymbolState(EXPRESSION,  1));
        state98.put("LONG", new SymbolState(44));
        state80.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state78.put("COMMA", new SymbolState(EXPRESSION3,  2));
        state22.put("BOOLEAN", new SymbolState(PREFIXOP,  1));
        state28.put("PRIVATE", new SymbolState(SELECTOR,  3));
        state77.put("SEMI", new SymbolState(MODIFIER,  1));
        Map<String, SymbolState> state130 = new HashMap<String, SymbolState>();
        rules.put(130, state130);
        state130.put("LBRACE", new SymbolState(N_COMMA_TYPE_0,  3));
        state33.put("STRICTFP", new SymbolState(BASICTYPE,  1));
        state103.put("METHODORFIELDREST", new SymbolState(95));
        state124.put("DOUBLE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state22.put("MINUS", new SymbolState(PREFIXOP,  1));
        state90.put("VOLATILE", new SymbolState(IMPORTDECLARATION,  6));
        state110.put("BYTE", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state62.put("ID", new SymbolState(SELECTOR,  3));
        state48.put("RBRACE", new SymbolState(ARGUMENTS,  2));
        state103.put("SYNCHRONIZED", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state97.put("NATIVE", new SymbolState(METHODORFIELDREST,  1));
        state65.put("SEMI", new SymbolState(N_DOT_ID_0,  0));
        state37.put("DOT", new SymbolState(N_DOT_ID_0,  3));
        state126.put("CLASS", new SymbolState(TYPEDECLARATION,  2));
        state57.put("SEMI", new SymbolState(PRIMARY,  1));
        state55.put("STATIC", new SymbolState(EXPRESSION,  1));
        state12.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state45.put("INSTANCEOF", new SymbolState(INTEGERLITERAL,  1));
        state43.put("SEMI", new SymbolState(TYPEDECLARATION,  1));
        state48.put("ID", new SymbolState(ARGUMENTS,  2));
        state139.put("LBRACKET", new SymbolState(SELECTOR,  2));
        state38.put("INT", new SymbolState(15));
        state24.put("STATIC", new SymbolState(MODIFIER,  1));
        state38.put("BOOLEAN", new SymbolState(17));
        state137.put("CHAR_LITERAL", new SymbolState(27));
        state134.put("BOOLEAN", new SymbolState(17));
        state77.put("CLASS", new SymbolState(MODIFIER,  1));
        state8.put("TYPE", new SymbolState(96));
        state61.put("TRANSIENT", new SymbolState(TYPEDECLARATION,  2));
        state97.put("LONG", new SymbolState(METHODORFIELDREST,  1));
        state32.put("INT", new SymbolState(BASICTYPE,  1));
        state101.put("SHORT", new SymbolState(MODIFIER,  1));
        state62.put("BECOMES", new SymbolState(SELECTOR,  3));
        state2.put("PUBLIC", new SymbolState(BASICTYPE,  1));
        state97.put("BOOLEAN", new SymbolState(METHODORFIELDREST,  1));
        state114.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state51.put("VOLATILE", new SymbolState(PRIMARY,  1));
        state18.put("PRIVATE", new SymbolState(91));
        state10.put("PROTECTED", new SymbolState(N_SELECTOR_0,  0));
        state100.put("SHORT", new SymbolState(MEMBERDECL,  1));
        state10.put("ID", new SymbolState(N_SELECTOR_0,  0));
        state56.put("SYNCHRONIZED", new SymbolState(EXPRESSION1,  1));
        state119.put("BYTE", new SymbolState(EXPRESSION2REST,  2));
        state90.put("TRANSIENT", new SymbolState(IMPORTDECLARATION,  6));
        state7.put("SYNCHRONIZED", new SymbolState(BOOLEANLITERAL,  1));
        state53.put("VOLATILE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state103.put("VARIABLEDECLARATORREST", new SymbolState(97));
        state49.put("SEMI", new SymbolState(N_MODIFIER_0,  2));
        state21.put("STATIC", new SymbolState(IMPORTDECLARATION,  4));
        state4.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state124.put("STATIC", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state47.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state119.put("DOUBLE", new SymbolState(EXPRESSION2REST,  2));
        state23.put("LONG", new SymbolState(PREFIXOP,  1));
        state66.put("SHORT", new SymbolState(MODIFIER,  1));
        state124.put("SEMI", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state113.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state125.put("DOUBLE", new SymbolState(35));
        state35.put("STATIC", new SymbolState(BASICTYPE,  1));
        state1.put("DECIMAL_INTEGER_LITERAL", new SymbolState(45));
        state29.put("LONG", new SymbolState(44));
        state63.put("FLOAT", new SymbolState(2));
        state95.put("CHAR", new SymbolState(METHODORFIELDDECL,  3));
        state16.put("EOF", new SymbolState(CLASSDECLARATION,  5));
        state15.put("SYNCHRONIZED", new SymbolState(BASICTYPE,  1));
        state59.put("NATIVE", new SymbolState(LITERAL,  1));
        state21.put("PRIVATE", new SymbolState(IMPORTDECLARATION,  4));
        state21.put("NATIVE", new SymbolState(IMPORTDECLARATION,  4));
        state4.put("ID", new SymbolState(LITERAL,  1));
        state33.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state48.put("LBRACKET", new SymbolState(ARGUMENTS,  2));
        state91.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state73.put("STATIC", new SymbolState(EXPRESSION3,  2));
        state48.put("BECOMES", new SymbolState(ARGUMENTS,  2));
        state140.put("BYTE", new SymbolState(EXPRESSION2,  2));
        state74.put("TRANSIENT", new SymbolState(N_TYPEDECLARATION_0,  0));
        state56.put("FLOAT", new SymbolState(EXPRESSION1,  1));
        state68.put("BYTE", new SymbolState(N_MODIFIER_0,  0));
        state85.put("PRIVATE", new SymbolState(EXPRESSION,  3));
        state5.put("NATIVE", new SymbolState(N_DOT_ID_0,  0));
        state28.put("PUBLIC", new SymbolState(SELECTOR,  3));
        state68.put("N_MODIFIER_0", new SymbolState(98));
        state13.put("FLOAT", new SymbolState(PREFIXOP,  1));
        state110.put("DOUBLE", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state52.put("TRANSIENT", new SymbolState(CLASSBODYDECLARATION,  2));
        state10.put("INT", new SymbolState(N_SELECTOR_0,  0));
        state47.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state10.put("FINAL", new SymbolState(N_SELECTOR_0,  0));
        state137.put("NULL", new SymbolState(26));
        state28.put("PROTECTED", new SymbolState(SELECTOR,  3));
        state113.put("ABSTRACT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state35.put("SHORT", new SymbolState(BASICTYPE,  1));
        state83.put("FALSE", new SymbolState(TYPE,  3));
        state53.put("SEMI", new SymbolState(N_TYPEDECLARATION_0,  2));
        state52.put("NATIVE", new SymbolState(CLASSBODYDECLARATION,  2));
        state49.put("FLOAT", new SymbolState(N_MODIFIER_0,  2));
        state23.put("PLUS", new SymbolState(PREFIXOP,  1));
        state13.put("CHAR_LITERAL", new SymbolState(PREFIXOP,  1));
        state57.put("BECOMES", new SymbolState(PRIMARY,  1));
        state31.put("BYTE", new SymbolState(LITERAL,  1));
        state133.put("INT", new SymbolState(15));
        state98.put("BOOLEAN", new SymbolState(17));
        state47.put("DOUBLE", new SymbolState(BOOLEANLITERAL,  1));
        state77.put("STATIC", new SymbolState(MODIFIER,  1));
        state124.put("DECIMAL_INTEGER_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state23.put("ID", new SymbolState(PREFIXOP,  1));
        state25.put("STRICTFP", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state51.put("BYTE", new SymbolState(PRIMARY,  1));
        state103.put("N_LBRACKET_RBRACKET_0", new SymbolState(71));
        state48.put("VOLATILE", new SymbolState(ARGUMENTS,  2));
        state56.put("ABSTRACT", new SymbolState(EXPRESSION1,  1));
        state45.put("TRANSIENT", new SymbolState(INTEGERLITERAL,  1));
        state15.put("SEMI", new SymbolState(BASICTYPE,  1));
        state83.put("LONG", new SymbolState(TYPE,  3));
        state25.put("SYNCHRONIZED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state17.put("LONG", new SymbolState(BASICTYPE,  1));
        state87.put("NATIVE", new SymbolState(MEMBERDECL,  1));
        state45.put("DOT", new SymbolState(INTEGERLITERAL,  1));
        state10.put("STATIC", new SymbolState(N_SELECTOR_0,  0));
        state48.put("STRICTFP", new SymbolState(ARGUMENTS,  2));
        state54.put("STRICTFP", new SymbolState(EXPRESSION2,  1));
        state7.put("COMMA", new SymbolState(BOOLEANLITERAL,  1));
        state10.put("TRANSIENT", new SymbolState(N_SELECTOR_0,  0));
        state35.put("TRANSIENT", new SymbolState(BASICTYPE,  1));
        state92.put("CHAR", new SymbolState(VARIABLEDECLARATORREST,  1));
        state92.put("DOUBLE", new SymbolState(VARIABLEDECLARATORREST,  1));
        state111.put("SYNCHRONIZED", new SymbolState(ARGUMENTS,  4));
        state37.put("BYTE", new SymbolState(N_DOT_ID_0,  3));
        state27.put("RBRACKET", new SymbolState(LITERAL,  1));
        state22.put("LPAREN", new SymbolState(PREFIXOP,  1));
        state47.put("DOT", new SymbolState(BOOLEANLITERAL,  1));
        state68.put("PROTECTED", new SymbolState(N_MODIFIER_0,  0));
        state33.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state97.put("STRICTFP", new SymbolState(METHODORFIELDREST,  1));
        state121.put("DOT", new SymbolState(99));
        state98.put("METHODORFIELDDECL", new SymbolState(100));
        state52.put("SHORT", new SymbolState(CLASSBODYDECLARATION,  2));
        state100.put("STATIC", new SymbolState(MEMBERDECL,  1));
        state10.put("PUBLIC", new SymbolState(N_SELECTOR_0,  0));
        state7.put("SHORT", new SymbolState(BOOLEANLITERAL,  1));
        state98.put("SYNCHRONIZED", new SymbolState(101));
        state13.put("TRUE", new SymbolState(PREFIXOP,  1));
        state49.put("STATIC", new SymbolState(N_MODIFIER_0,  2));
        state95.put("ID", new SymbolState(METHODORFIELDDECL,  3));
        state114.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state56.put("PUBLIC", new SymbolState(EXPRESSION1,  1));
        state35.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state100.put("VOLATILE", new SymbolState(MEMBERDECL,  1));
        state71.put("NULL", new SymbolState(BRACKETSOPT,  1));
        state44.put("NATIVE", new SymbolState(BASICTYPE,  1));
        state137.put("PAREXPRESSION", new SymbolState(51));
        state49.put("PRIVATE", new SymbolState(N_MODIFIER_0,  2));
        state101.put("ID", new SymbolState(MODIFIER,  1));
        state23.put("BYTE", new SymbolState(PREFIXOP,  1));
        state66.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state31.put("BECOMES", new SymbolState(LITERAL,  1));
        state139.put("SHORT", new SymbolState(SELECTOR,  2));
        state27.put("RBRACE", new SymbolState(LITERAL,  1));
        state57.put("PUBLIC", new SymbolState(PRIMARY,  1));
        state44.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state36.put("FLOAT", new SymbolState(TYPE,  1));
        state129.put("CHAR", new SymbolState(PAREXPRESSION,  3));
        state5.put("CHAR_LITERAL", new SymbolState(N_DOT_ID_0,  0));
        state19.put("CHAR", new SymbolState(14));
        state126.put("PROTECTED", new SymbolState(TYPEDECLARATION,  2));
        state132.put("VOLATILE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state1.put("CHAR", new SymbolState(14));
        state97.put("RBRACE", new SymbolState(METHODORFIELDREST,  1));
        state2.put("VOLATILE", new SymbolState(BASICTYPE,  1));
        state140.put("STATIC", new SymbolState(EXPRESSION2,  2));
        state44.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state55.put("RBRACKET", new SymbolState(EXPRESSION,  1));
        state94.put("NATIVE", new SymbolState(N_MODIFIER_0,  0));
        state13.put("STR_LITERAL", new SymbolState(PREFIXOP,  1));
        state48.put("PROTECTED", new SymbolState(ARGUMENTS,  2));
        state48.put("RBRACKET", new SymbolState(ARGUMENTS,  2));
        state51.put("COMMA", new SymbolState(PRIMARY,  1));
        state55.put("BOOLEAN", new SymbolState(EXPRESSION,  1));
        state40.put("FINAL", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state51.put("PROTECTED", new SymbolState(PRIMARY,  1));
        state79.put("N_COMMA_EXPRESSION_0", new SymbolState(102));
        state35.put("TRUE", new SymbolState(BASICTYPE,  1));
        state14.put("PRIVATE", new SymbolState(BASICTYPE,  1));
        state56.put("RPAREN", new SymbolState(EXPRESSION1,  1));
        state123.put("FLOAT", new SymbolState(2));
        state80.put("FINAL", new SymbolState(MODIFIER,  1));
        state87.put("INT", new SymbolState(MEMBERDECL,  1));
        state15.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state44.put("NULL", new SymbolState(BASICTYPE,  1));
        state26.put("ABSTRACT", new SymbolState(LITERAL,  1));
        state136.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state134.put("FLOAT", new SymbolState(2));
        state97.put("SHORT", new SymbolState(METHODORFIELDREST,  1));
        state67.put("SEMI", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state13.put("CHAR", new SymbolState(PREFIXOP,  1));
        state83.put("DECIMAL_INTEGER_LITERAL", new SymbolState(TYPE,  3));
        state37.put("PUBLIC", new SymbolState(N_DOT_ID_0,  3));
        state52.put("FINAL", new SymbolState(CLASSBODYDECLARATION,  2));
        state56.put("BOOLEAN", new SymbolState(EXPRESSION1,  1));
        state139.put("STRICTFP", new SymbolState(SELECTOR,  2));
        state61.put("FINAL", new SymbolState(TYPEDECLARATION,  2));
        state24.put("LONG", new SymbolState(MODIFIER,  1));
        state23.put("CHAR_LITERAL", new SymbolState(PREFIXOP,  1));
        state23.put("STR_LITERAL", new SymbolState(PREFIXOP,  1));
        state28.put("BOOLEAN", new SymbolState(SELECTOR,  3));
        state112.put("LONG", new SymbolState(MODIFIER,  1));
        state33.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state26.put("PRIVATE", new SymbolState(LITERAL,  1));
        state2.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state16.put("VOLATILE", new SymbolState(CLASSDECLARATION,  5));
        state78.put("FINAL", new SymbolState(EXPRESSION3,  2));
        state24.put("SHORT", new SymbolState(MODIFIER,  1));
        state36.put("RPAREN", new SymbolState(TYPE,  1));
        state3.put("BOOLEANLITERAL", new SymbolState(31));
        state129.put("COMMA", new SymbolState(PAREXPRESSION,  3));
        state68.put("FLOAT", new SymbolState(N_MODIFIER_0,  0));
        state43.put("PROTECTED", new SymbolState(TYPEDECLARATION,  1));
        state44.put("PUBLIC", new SymbolState(BASICTYPE,  1));
        state44.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state57.put("ABSTRACT", new SymbolState(PRIMARY,  1));
        state0.put("STATIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state134.put("SHORT", new SymbolState(32));
        state119.put("ID", new SymbolState(EXPRESSION2REST,  2));
        state56.put("COMMA", new SymbolState(EXPRESSION1,  1));
        state38.put("DOUBLE", new SymbolState(35));
        state27.put("NATIVE", new SymbolState(LITERAL,  1));
        state124.put("MINUS", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state15.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state2.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state57.put("PRIVATE", new SymbolState(PRIMARY,  1));
        state132.put("NATIVE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state32.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        Map<String, SymbolState> state120 = new HashMap<String, SymbolState>();
        rules.put(120, state120);
        state120.put("ID", new SymbolState(103));
        state25.put("N_IMPORTDECLARATION_0", new SymbolState(104));
        state106.put("PUBLIC", new SymbolState(EXPRESSION3,  2));
        state15.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state33.put("PRIVATE", new SymbolState(BASICTYPE,  1));
        state113.put("LONG", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state44.put("STATIC", new SymbolState(BASICTYPE,  1));
        state15.put("PROTECTED", new SymbolState(BASICTYPE,  1));
        state15.put("COMMA", new SymbolState(BASICTYPE,  1));
        state17.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state132.put("STATIC", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state113.put("COMMA", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state26.put("DOT", new SymbolState(LITERAL,  1));
        state126.put("VOLATILE", new SymbolState(TYPEDECLARATION,  2));
        state135.put("STATIC", new SymbolState(CLASSBODY,  3));
        state119.put("FINAL", new SymbolState(EXPRESSION2REST,  2));
        state54.put("BECOMES", new SymbolState(EXPRESSION2,  1));
        state51.put("ID", new SymbolState(PRIMARY,  1));
        state38.put("SHORT", new SymbolState(32));
        state115.put("TRANSIENT", new SymbolState(INTERFACEBODY,  3));
        state43.put("VOLATILE", new SymbolState(TYPEDECLARATION,  1));
        state6.put("SHORT", new SymbolState(MODIFIER,  1));
        state2.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state53.put("STATIC", new SymbolState(N_TYPEDECLARATION_0,  2));
        state94.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        state29.put("PLUS", new SymbolState(22));
        state117.put("CLASSBODY", new SymbolState(105));
        state71.put("SYNCHRONIZED", new SymbolState(BRACKETSOPT,  1));
        state100.put("PRIVATE", new SymbolState(MEMBERDECL,  1));
        state27.put("SEMI", new SymbolState(LITERAL,  1));
        state37.put("PRIVATE", new SymbolState(N_DOT_ID_0,  3));
        state92.put("LONG", new SymbolState(VARIABLEDECLARATORREST,  1));
        state6.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state14.put("MINUS", new SymbolState(BASICTYPE,  1));
        state137.put("MINUS", new SymbolState(23));
        state129.put("STATIC", new SymbolState(PAREXPRESSION,  3));
        state128.put("INT", new SymbolState(VARIABLEDECLARATORREST,  3));
        state1.put("STR_LITERAL", new SymbolState(4));
        state6.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state35.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state45.put("FINAL", new SymbolState(INTEGERLITERAL,  1));
        state1.put("EXPRESSION3", new SymbolState(106));
        state47.put("STATIC", new SymbolState(BOOLEANLITERAL,  1));
        state27.put("PRIVATE", new SymbolState(LITERAL,  1));
        state128.put("BOOLEAN", new SymbolState(VARIABLEDECLARATORREST,  3));
        state4.put("VOLATILE", new SymbolState(LITERAL,  1));
        state98.put("CHAR", new SymbolState(14));
        state80.put("CHAR", new SymbolState(MODIFIER,  1));
        state26.put("RBRACKET", new SymbolState(LITERAL,  1));
        state15.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state51.put("STRICTFP", new SymbolState(PRIMARY,  1));
        state14.put("VOLATILE", new SymbolState(BASICTYPE,  1));
        state57.put("COMMA", new SymbolState(PRIMARY,  1));
        state26.put("SYNCHRONIZED", new SymbolState(LITERAL,  1));
        state1.put("SHORT", new SymbolState(32));
        state35.put("LONG", new SymbolState(BASICTYPE,  1));
        state115.put("PUBLIC", new SymbolState(INTERFACEBODY,  3));
        state7.put("NATIVE", new SymbolState(BOOLEANLITERAL,  1));
        state35.put("FINAL", new SymbolState(BASICTYPE,  1));
        state52.put("STATIC", new SymbolState(CLASSBODYDECLARATION,  2));
        state23.put("INT", new SymbolState(PREFIXOP,  1));
        state100.put("CHAR", new SymbolState(MEMBERDECL,  1));
        state15.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state0.put("COMPILATIONUNIT", new SymbolState(107));
        state37.put("BECOMES", new SymbolState(N_DOT_ID_0,  3));
        state139.put("PRIVATE", new SymbolState(SELECTOR,  2));
        state91.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state49.put("DOUBLE", new SymbolState(N_MODIFIER_0,  2));
        state94.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state73.put("PUBLIC", new SymbolState(EXPRESSION3,  2));
        state83.put("STRICTFP", new SymbolState(TYPE,  3));
        state37.put("PLUS", new SymbolState(N_DOT_ID_0,  3));
        state17.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state27.put("ID", new SymbolState(LITERAL,  1));
        state35.put("PROTECTED", new SymbolState(BASICTYPE,  1));
        state114.put("CHAR", new SymbolState(MODIFIER,  1));
        state37.put("ABSTRACT", new SymbolState(N_DOT_ID_0,  3));
        state77.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state83.put("PLUS", new SymbolState(TYPE,  3));
        state6.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state81.put("STRICTFP", new SymbolState(INTERFACEDECLARATION,  5));
        state22.put("TRUE", new SymbolState(PREFIXOP,  1));
        state5.put("PLUS", new SymbolState(N_DOT_ID_0,  0));
        state108.put("LONG", new SymbolState(44));
        state85.put("CHAR", new SymbolState(EXPRESSION,  3));
        state17.put("PROTECTED", new SymbolState(BASICTYPE,  1));
        state106.put("TRANSIENT", new SymbolState(EXPRESSION3,  2));
        state26.put("VOLATILE", new SymbolState(LITERAL,  1));
        state62.put("LBRACKET", new SymbolState(SELECTOR,  3));
        state36.put("INT", new SymbolState(TYPE,  1));
        state119.put("PRIVATE", new SymbolState(EXPRESSION2REST,  2));
        state83.put("EXCLAMATION", new SymbolState(TYPE,  3));
        state38.put("FLOAT", new SymbolState(2));
        state106.put("ABSTRACT", new SymbolState(EXPRESSION3,  2));
        state109.put("PRIVATE", new SymbolState(CLASSDECLARATION,  7));
        state106.put("RPAREN", new SymbolState(EXPRESSION3,  2));
        state2.put("SHORT", new SymbolState(BASICTYPE,  1));
        state71.put("LONG", new SymbolState(BRACKETSOPT,  1));
        state53.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  2));
        state37.put("ID", new SymbolState(N_DOT_ID_0,  3));
        state73.put("FINAL", new SymbolState(EXPRESSION3,  2));
        state13.put("EXCLAMATION", new SymbolState(PREFIXOP,  1));
        state139.put("RPAREN", new SymbolState(SELECTOR,  2));
        state32.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state84.put("EXTENDS", new SymbolState(108));
        state2.put("PROTECTED", new SymbolState(BASICTYPE,  1));
        state133.put("LONG", new SymbolState(44));
        state45.put("PRIVATE", new SymbolState(INTEGERLITERAL,  1));
        state58.put("INT", new SymbolState(N_SELECTOR_0,  2));
        state104.put("PRIVATE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state132.put("CHAR", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state19.put("BYTE", new SymbolState(33));
        state35.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state62.put("DOT", new SymbolState(SELECTOR,  3));
        state114.put("ID", new SymbolState(MODIFIER,  1));
        state30.put("CLASSBODY", new SymbolState(109));
        state47.put("PROTECTED", new SymbolState(BOOLEANLITERAL,  1));
        state29.put("PREFIXOP", new SymbolState(3));
        state7.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state57.put("LBRACKET", new SymbolState(PRIMARY,  1));
        state48.put("BOOLEAN", new SymbolState(ARGUMENTS,  2));
        state54.put("LONG", new SymbolState(EXPRESSION2,  1));
        state23.put("LPAREN", new SymbolState(PREFIXOP,  1));
        state95.put("NATIVE", new SymbolState(METHODORFIELDDECL,  3));
        state8.put("BYTE", new SymbolState(33));
        state2.put("ID", new SymbolState(BASICTYPE,  1));
        state73.put("DOUBLE", new SymbolState(EXPRESSION3,  2));
        state48.put("DOT", new SymbolState(ARGUMENTS,  2));
        state124.put("PUBLIC", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state20.put("INT", new SymbolState(VARIABLEINITIALIZER,  1));
        state12.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state106.put("FINAL", new SymbolState(EXPRESSION3,  2));
        state59.put("RBRACKET", new SymbolState(LITERAL,  1));
        state97.put("TRANSIENT", new SymbolState(METHODORFIELDREST,  1));
        state58.put("DOT", new SymbolState(N_SELECTOR_0,  2));
        state140.put("TRANSIENT", new SymbolState(EXPRESSION2,  2));
        state83.put("NULL", new SymbolState(TYPE,  3));
        state44.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state55.put("PRIVATE", new SymbolState(EXPRESSION,  1));
        state27.put("INT", new SymbolState(LITERAL,  1));
        state36.put("FALSE", new SymbolState(TYPE,  1));
        state139.put("PROTECTED", new SymbolState(SELECTOR,  2));
        state0.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state57.put("RBRACE", new SymbolState(PRIMARY,  1));
        state56.put("PROTECTED", new SymbolState(EXPRESSION1,  1));
        state83.put("RPAREN", new SymbolState(TYPE,  3));
        state77.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state58.put("PROTECTED", new SymbolState(N_SELECTOR_0,  2));
        state73.put("INT", new SymbolState(EXPRESSION3,  2));
        state31.put("STATIC", new SymbolState(LITERAL,  1));
        state2.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state13.put("BYTE", new SymbolState(PREFIXOP,  1));
        state6.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state80.put("INT", new SymbolState(MODIFIER,  1));
        state57.put("SYNCHRONIZED", new SymbolState(PRIMARY,  1));
        state17.put("CHAR", new SymbolState(BASICTYPE,  1));
        state132.put("FLOAT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state35.put("PRIVATE", new SymbolState(BASICTYPE,  1));
        state4.put("DOT", new SymbolState(LITERAL,  1));
        state135.put("EOF", new SymbolState(CLASSBODY,  3));
        state49.put("SHORT", new SymbolState(N_MODIFIER_0,  2));
        state87.put("SYNCHRONIZED", new SymbolState(MEMBERDECL,  1));
        state39.put("CHAR", new SymbolState(14));
        state15.put("NULL", new SymbolState(BASICTYPE,  1));
        state58.put("FINAL", new SymbolState(N_SELECTOR_0,  2));
        state51.put("CHAR", new SymbolState(PRIMARY,  1));
        state91.put("STATIC", new SymbolState(MODIFIER,  1));
        state44.put("CHAR", new SymbolState(BASICTYPE,  1));
        state109.put("STRICTFP", new SymbolState(CLASSDECLARATION,  7));
        state40.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state25.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state6.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state108.put("BASICTYPE", new SymbolState(36));
        state112.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state55.put("FINAL", new SymbolState(EXPRESSION,  1));
        state134.put("BYTE", new SymbolState(33));
        state51.put("SYNCHRONIZED", new SymbolState(PRIMARY,  1));
        state80.put("STATIC", new SymbolState(MODIFIER,  1));
        state111.put("COMMA", new SymbolState(ARGUMENTS,  4));
        state4.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state55.put("BECOMES", new SymbolState(110));
        state105.put("STRICTFP", new SymbolState(CLASSDECLARATION,  3));
        state10.put("DOT", new SymbolState(N_SELECTOR_0,  0));
        state5.put("ID", new SymbolState(N_DOT_ID_0,  0));
        state5.put("EXCLAMATION", new SymbolState(N_DOT_ID_0,  0));
        state77.put("ID", new SymbolState(MODIFIER,  1));
        state83.put("PRIVATE", new SymbolState(TYPE,  3));
        state123.put("NULL", new SymbolState(26));
        state59.put("VOLATILE", new SymbolState(LITERAL,  1));
        state36.put("PUBLIC", new SymbolState(TYPE,  1));
        state20.put("PROTECTED", new SymbolState(VARIABLEINITIALIZER,  1));
        state102.put("RPAREN", new SymbolState(111));
        state11.put("SEMI", new SymbolState(N_INTERFACEBODYDECLARATION_0,  2));
        state24.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state139.put("BYTE", new SymbolState(SELECTOR,  2));
        state37.put("MINUS", new SymbolState(N_DOT_ID_0,  3));
        state88.put("NATIVE", new SymbolState(MODIFIER,  1));
        state29.put("BYTE", new SymbolState(33));
        state103.put("RBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state100.put("NATIVE", new SymbolState(MEMBERDECL,  1));
        state33.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state71.put("ABSTRACT", new SymbolState(BRACKETSOPT,  1));
        state140.put("PRIVATE", new SymbolState(EXPRESSION2,  2));
        state16.put("PUBLIC", new SymbolState(CLASSDECLARATION,  5));
        state136.put("EOF", new SymbolState(COMPILATIONUNIT,  2));
        state2.put("NULL", new SymbolState(BASICTYPE,  1));
        state98.put("PUBLIC", new SymbolState(112));
        state12.put("ID", new SymbolState(MODIFIER,  1));
        state26.put("LONG", new SymbolState(LITERAL,  1));
        state95.put("INT", new SymbolState(METHODORFIELDDECL,  3));
        state53.put("TRANSIENT", new SymbolState(N_TYPEDECLARATION_0,  2));
        state14.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state111.put("LONG", new SymbolState(ARGUMENTS,  4));
        state118.put("INTERFACE", new SymbolState(CLASSDECLARATION,  5));
        state128.put("VOLATILE", new SymbolState(VARIABLEDECLARATORREST,  3));
        state125.put("MINUS", new SymbolState(23));
        state35.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state48.put("STATIC", new SymbolState(ARGUMENTS,  2));
        state124.put("SHORT", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state137.put("INTEGERLITERAL", new SymbolState(59));
        state139.put("COMMA", new SymbolState(SELECTOR,  2));
        state103.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state68.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        state95.put("PRIVATE", new SymbolState(METHODORFIELDDECL,  3));
        state32.put("DECIMAL_INTEGER_LITERAL", new SymbolState(BASICTYPE,  1));
        state100.put("SEMI", new SymbolState(MEMBERDECL,  1));
        state17.put("SHORT", new SymbolState(BASICTYPE,  1));
        state57.put("PROTECTED", new SymbolState(PRIMARY,  1));
        state29.put("EXPRESSION1", new SymbolState(55));
        state29.put("EXPRESSION2", new SymbolState(56));
        state29.put("EXPRESSION3", new SymbolState(54));
        state105.put("PROTECTED", new SymbolState(CLASSDECLARATION,  3));
        state5.put("N_DOT_ID_0", new SymbolState(113));
        state63.put("LONG", new SymbolState(44));
        state57.put("TRANSIENT", new SymbolState(PRIMARY,  1));
        state68.put("VOLATILE", new SymbolState(N_MODIFIER_0,  0));
        state83.put("FLOAT", new SymbolState(TYPE,  3));
        state10.put("SYNCHRONIZED", new SymbolState(N_SELECTOR_0,  0));
        state63.put("PLUS", new SymbolState(22));
        state80.put("CLASS", new SymbolState(MODIFIER,  1));
        state103.put("CHAR", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state133.put("SHORT", new SymbolState(32));
        state15.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state10.put("FLOAT", new SymbolState(N_SELECTOR_0,  0));
        state119.put("SEMI", new SymbolState(EXPRESSION2REST,  2));
        state14.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state1.put("INTEGERLITERAL", new SymbolState(59));
        state25.put("ABSTRACT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state123.put("DECIMAL_INTEGER_LITERAL", new SymbolState(45));
        state9.put("SYNCHRONIZED", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state101.put("SEMI", new SymbolState(MODIFIER,  1));
        state23.put("BOOLEAN", new SymbolState(PREFIXOP,  1));
        state106.put("SHORT", new SymbolState(EXPRESSION3,  2));
        state32.put("BYTE", new SymbolState(BASICTYPE,  1));
        state78.put("RBRACE", new SymbolState(EXPRESSION3,  2));
        state87.put("BYTE", new SymbolState(MEMBERDECL,  1));
        state5.put("STATIC", new SymbolState(N_DOT_ID_0,  0));
        state140.put("BECOMES", new SymbolState(EXPRESSION2,  2));
        state0.put("PROTECTED", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state85.put("RBRACKET", new SymbolState(EXPRESSION,  3));
        state73.put("INSTANCEOF", new SymbolState(EXPRESSION3,  2));
        state45.put("ID", new SymbolState(INTEGERLITERAL,  1));
        state83.put("SEMI", new SymbolState(TYPE,  3));
        state43.put("PUBLIC", new SymbolState(TYPEDECLARATION,  1));
        state98.put("PROTECTED", new SymbolState(114));
        state3.put("EXCLAMATION", new SymbolState(13));
        state17.put("PLUS", new SymbolState(BASICTYPE,  1));
        state10.put("RBRACKET", new SymbolState(N_SELECTOR_0,  0));
        state34.put("RBRACE", new SymbolState(115));
        state57.put("DOUBLE", new SymbolState(PRIMARY,  1));
        state135.put("INTERFACE", new SymbolState(CLASSBODY,  3));
        state48.put("ABSTRACT", new SymbolState(ARGUMENTS,  2));
        state9.put("ID", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state90.put("SEMI", new SymbolState(IMPORTDECLARATION,  6));
        state66.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state137.put("BASICTYPE", new SymbolState(36));
        state44.put("SYNCHRONIZED", new SymbolState(BASICTYPE,  1));
        state92.put("ABSTRACT", new SymbolState(VARIABLEDECLARATORREST,  1));
        state137.put("FLOAT", new SymbolState(2));
        state45.put("RPAREN", new SymbolState(INTEGERLITERAL,  1));
        state6.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state54.put("CHAR", new SymbolState(EXPRESSION2,  1));
        state126.put("PRIVATE", new SymbolState(TYPEDECLARATION,  2));
        state137.put("TRUE", new SymbolState(7));
        state80.put("NATIVE", new SymbolState(MODIFIER,  1));
        state94.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  0));
        state48.put("FINAL", new SymbolState(ARGUMENTS,  2));
        state91.put("SEMI", new SymbolState(MODIFIER,  1));
        state9.put("BOOLEAN", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state49.put("PUBLIC", new SymbolState(N_MODIFIER_0,  2));
        state40.put("VOLATILE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state61.put("ABSTRACT", new SymbolState(TYPEDECLARATION,  2));
        state25.put("NATIVE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state105.put("INTERFACE", new SymbolState(CLASSDECLARATION,  3));
        state19.put("PLUS", new SymbolState(22));
        state49.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  2));
        state22.put("SHORT", new SymbolState(PREFIXOP,  1));
        state48.put("RPAREN", new SymbolState(ARGUMENTS,  2));
        state15.put("STRICTFP", new SymbolState(BASICTYPE,  1));
        state88.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state113.put("RBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state48.put("NATIVE", new SymbolState(ARGUMENTS,  2));
        state103.put("STATIC", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state32.put("TRANSIENT", new SymbolState(BASICTYPE,  1));
        state33.put("VOLATILE", new SymbolState(BASICTYPE,  1));
        state28.put("BYTE", new SymbolState(SELECTOR,  3));
        state58.put("BYTE", new SymbolState(N_SELECTOR_0,  2));
        state88.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state128.put("FLOAT", new SymbolState(VARIABLEDECLARATORREST,  3));
        state97.put("ID", new SymbolState(METHODORFIELDREST,  1));
        state125.put("NULL", new SymbolState(26));
        state72.put("CLASS", new SymbolState(INTERFACEDECLARATION,  3));
        state52.put("BOOLEAN", new SymbolState(CLASSBODYDECLARATION,  2));
        state47.put("FINAL", new SymbolState(BOOLEANLITERAL,  1));
        state14.put("FINAL", new SymbolState(BASICTYPE,  1));
        state123.put("TRUE", new SymbolState(7));
        state36.put("DECIMAL_INTEGER_LITERAL", new SymbolState(TYPE,  1));
        state33.put("FALSE", new SymbolState(BASICTYPE,  1));
        state81.put("FINAL", new SymbolState(INTERFACEDECLARATION,  5));
        state31.put("FLOAT", new SymbolState(LITERAL,  1));
        state140.put("NATIVE", new SymbolState(EXPRESSION2,  2));
        state49.put("ID", new SymbolState(N_MODIFIER_0,  2));
        state113.put("LPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state77.put("LONG", new SymbolState(MODIFIER,  1));
        state2.put("ABSTRACT", new SymbolState(BASICTYPE,  1));
        state39.put("FLOAT", new SymbolState(2));
        state92.put("STRICTFP", new SymbolState(VARIABLEDECLARATORREST,  1));
        state126.put("SEMI", new SymbolState(TYPEDECLARATION,  2));
        state124.put("SYNCHRONIZED", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state58.put("INSTANCEOF", new SymbolState(N_SELECTOR_0,  2));
        state59.put("CHAR", new SymbolState(LITERAL,  1));
        state101.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state9.put("LONG", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state21.put("PUBLIC", new SymbolState(IMPORTDECLARATION,  4));
        state0.put("PRIVATE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state54.put("PUBLIC", new SymbolState(EXPRESSION2,  1));
        state25.put("VOLATILE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state5.put("PUBLIC", new SymbolState(N_DOT_ID_0,  0));
        state37.put("RBRACKET", new SymbolState(N_DOT_ID_0,  3));
        state24.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state118.put("SYNCHRONIZED", new SymbolState(CLASSDECLARATION,  5));
        state31.put("STRICTFP", new SymbolState(LITERAL,  1));
        state53.put("STRICTFP", new SymbolState(N_TYPEDECLARATION_0,  2));
        state40.put("STRICTFP", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state27.put("COMMA", new SymbolState(LITERAL,  1));
        state108.put("TYPELIST", new SymbolState(116));
        state57.put("LONG", new SymbolState(PRIMARY,  1));
        state26.put("STRICTFP", new SymbolState(LITERAL,  1));
        state33.put("NULL", new SymbolState(BASICTYPE,  1));
        state109.put("FINAL", new SymbolState(CLASSDECLARATION,  7));
        state88.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state43.put("FINAL", new SymbolState(TYPEDECLARATION,  1));
        state23.put("NULL", new SymbolState(PREFIXOP,  1));
        state113.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state14.put("PLUS", new SymbolState(BASICTYPE,  1));
        state103.put("SEMI", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state105.put("PUBLIC", new SymbolState(CLASSDECLARATION,  3));
        state55.put("SEMI", new SymbolState(EXPRESSION,  1));
        state37.put("STRICTFP", new SymbolState(N_DOT_ID_0,  3));
        state132.put("PRIVATE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state125.put("LITERAL", new SymbolState(57));
        state133.put("ID", new SymbolState(5));
        state139.put("CHAR", new SymbolState(SELECTOR,  2));
        Map<String, SymbolState> state138 = new HashMap<String, SymbolState>();
        rules.put(138, state138);
        state138.put("ID", new SymbolState(117));
        state15.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state40.put("STATIC", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state140.put("PUBLIC", new SymbolState(EXPRESSION2,  2));
        state68.put("CHAR", new SymbolState(N_MODIFIER_0,  0));
        state3.put("TYPE", new SymbolState(1));
        state15.put("LONG", new SymbolState(BASICTYPE,  1));
        state113.put("SEMI", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state3.put("LITERAL", new SymbolState(57));
        state17.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state26.put("ID", new SymbolState(LITERAL,  1));
        state47.put("SHORT", new SymbolState(BOOLEANLITERAL,  1));
        state113.put("SYNCHRONIZED", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state20.put("ID", new SymbolState(VARIABLEINITIALIZER,  1));
        state53.put("SYNCHRONIZED", new SymbolState(N_TYPEDECLARATION_0,  2));
        state35.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state48.put("SYNCHRONIZED", new SymbolState(ARGUMENTS,  2));
        state62.put("SHORT", new SymbolState(SELECTOR,  3));
        state89.put("CLASSBODY", new SymbolState(118));
        state40.put("ABSTRACT", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state4.put("PROTECTED", new SymbolState(LITERAL,  1));
        state124.put("LBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state29.put("SHORT", new SymbolState(32));
        state21.put("PROTECTED", new SymbolState(IMPORTDECLARATION,  4));
        state106.put("RBRACE", new SymbolState(EXPRESSION3,  2));
        state78.put("STRICTFP", new SymbolState(EXPRESSION3,  2));
        state13.put("BOOLEAN", new SymbolState(PREFIXOP,  1));
        state103.put("PUBLIC", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state85.put("BOOLEAN", new SymbolState(EXPRESSION,  3));
        state32.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state58.put("NATIVE", new SymbolState(N_SELECTOR_0,  2));
        state62.put("PUBLIC", new SymbolState(SELECTOR,  3));
        state12.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state132.put("RBRACE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state37.put("NULL", new SymbolState(N_DOT_ID_0,  3));
        state1.put("LONG", new SymbolState(44));
        state26.put("NATIVE", new SymbolState(LITERAL,  1));
        state58.put("RBRACKET", new SymbolState(N_SELECTOR_0,  2));
        state66.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state12.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state4.put("FINAL", new SymbolState(LITERAL,  1));
        state49.put("VOLATILE", new SymbolState(N_MODIFIER_0,  2));
        state28.put("FLOAT", new SymbolState(SELECTOR,  3));
        state35.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state43.put("SYNCHRONIZED", new SymbolState(TYPEDECLARATION,  1));
        state137.put("DECIMAL_INTEGER_LITERAL", new SymbolState(45));
        state13.put("FALSE", new SymbolState(PREFIXOP,  1));
        state129.put("BYTE", new SymbolState(PAREXPRESSION,  3));
        state85.put("ID", new SymbolState(EXPRESSION,  3));
        state78.put("PROTECTED", new SymbolState(EXPRESSION3,  2));
        state134.put("TYPE", new SymbolState(119));
        state19.put("FALSE", new SymbolState(47));
        state32.put("NATIVE", new SymbolState(BASICTYPE,  1));
        state87.put("PRIVATE", new SymbolState(MEMBERDECL,  1));
        state73.put("COMMA", new SymbolState(EXPRESSION3,  2));
        state14.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state44.put("PROTECTED", new SymbolState(BASICTYPE,  1));
        state113.put("PRIVATE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state19.put("DECIMAL_INTEGER_LITERAL", new SymbolState(45));
        state71.put("DOUBLE", new SymbolState(BRACKETSOPT,  1));
        state83.put("TRUE", new SymbolState(TYPE,  3));
        state113.put("MINUS", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state4.put("NATIVE", new SymbolState(LITERAL,  1));
        state49.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  2));
        state14.put("INT", new SymbolState(BASICTYPE,  1));
        state37.put("FALSE", new SymbolState(N_DOT_ID_0,  3));
        state20.put("BYTE", new SymbolState(VARIABLEINITIALIZER,  1));
        state52.put("INT", new SymbolState(CLASSBODYDECLARATION,  2));
        state85.put("SHORT", new SymbolState(EXPRESSION,  3));
        state130.put("COMMA", new SymbolState(N_COMMA_TYPE_0,  3));
        state125.put("ID", new SymbolState(5));
        state103.put("PRIVATE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state5.put("SEMI", new SymbolState(N_DOT_ID_0,  0));
        state98.put("TYPE", new SymbolState(120));
        state43.put("PRIVATE", new SymbolState(TYPEDECLARATION,  1));
        state111.put("NATIVE", new SymbolState(ARGUMENTS,  4));
        state2.put("FINAL", new SymbolState(BASICTYPE,  1));
        state112.put("CLASS", new SymbolState(MODIFIER,  1));
        state17.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state14.put("STR_LITERAL", new SymbolState(BASICTYPE,  1));
        state4.put("RBRACKET", new SymbolState(LITERAL,  1));
        state135.put("ABSTRACT", new SymbolState(CLASSBODY,  3));
        state140.put("RBRACE", new SymbolState(EXPRESSION2,  2));
        state61.put("CLASS", new SymbolState(TYPEDECLARATION,  2));
        state3.put("CHAR_LITERAL", new SymbolState(27));
        state18.put("PUBLIC", new SymbolState(112));
        state29.put("INTEGERLITERAL", new SymbolState(59));
        state40.put("NATIVE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state140.put("RBRACKET", new SymbolState(EXPRESSION2,  2));
        state61.put("SYNCHRONIZED", new SymbolState(TYPEDECLARATION,  2));
        state36.put("BYTE", new SymbolState(TYPE,  1));
        state43.put("STRICTFP", new SymbolState(TYPEDECLARATION,  1));
        state65.put("N_DOT_ID_0", new SymbolState(121));
        state113.put("DOT", new SymbolState(99));
        state66.put("CHAR", new SymbolState(MODIFIER,  1));
        state35.put("ID", new SymbolState(BASICTYPE,  1));
        state33.put("COMMA", new SymbolState(BASICTYPE,  1));
        state70.put("STAR", new SymbolState(122));
        state6.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state72.put("SEMI", new SymbolState(INTERFACEDECLARATION,  3));
        state85.put("SYNCHRONIZED", new SymbolState(EXPRESSION,  3));
        state103.put("STRICTFP", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state73.put("BOOLEAN", new SymbolState(EXPRESSION3,  2));
        state80.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state54.put("ABSTRACT", new SymbolState(EXPRESSION2,  1));
        state3.put("BASICTYPE", new SymbolState(36));
        state27.put("SHORT", new SymbolState(LITERAL,  1));
        state5.put("LBRACE", new SymbolState(N_DOT_ID_0,  0));
        state135.put("SEMI", new SymbolState(CLASSBODY,  3));
        state80.put("BYTE", new SymbolState(MODIFIER,  1));
        state113.put("STRICTFP", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state125.put("BOOLEANLITERAL", new SymbolState(31));
        state116.put("LBRACE", new SymbolState(67));
        state103.put("NATIVE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state51.put("DOT", new SymbolState(PRIMARY,  1));
        state18.put("PROTECTED", new SymbolState(114));
        state0.put("INTERFACE", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state108.put("INT", new SymbolState(15));
        state97.put("DOUBLE", new SymbolState(METHODORFIELDREST,  1));
        Map<String, SymbolState> state60 = new HashMap<String, SymbolState>();
        rules.put(60, state60);
        state60.put("IF", new SymbolState(S,  2));
        state35.put("STRICTFP", new SymbolState(BASICTYPE,  1));
        state128.put("SEMI", new SymbolState(VARIABLEDECLARATORREST,  3));
        state135.put("TRANSIENT", new SymbolState(CLASSBODY,  3));
        state110.put("SHORT", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state103.put("TRANSIENT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state113.put("RBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state128.put("STATIC", new SymbolState(VARIABLEDECLARATORREST,  3));
        state27.put("INSTANCEOF", new SymbolState(LITERAL,  1));
        state61.put("INTERFACE", new SymbolState(TYPEDECLARATION,  2));
        state125.put("FALSE", new SymbolState(47));
        state63.put("INTEGERLITERAL", new SymbolState(59));
        state17.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state59.put("SHORT", new SymbolState(LITERAL,  1));
        state113.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state6.put("BYTE", new SymbolState(MODIFIER,  1));
        state68.put("FINAL", new SymbolState(N_MODIFIER_0,  0));
        state20.put("VOLATILE", new SymbolState(VARIABLEINITIALIZER,  1));
        state126.put("NATIVE", new SymbolState(TYPEDECLARATION,  2));
        state55.put("ASSIGNMENTOPERATOR", new SymbolState(123));
        state5.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state5.put("RPAREN", new SymbolState(N_DOT_ID_0,  0));
        state17.put("PRIVATE", new SymbolState(BASICTYPE,  1));
        state88.put("BYTE", new SymbolState(MODIFIER,  1));
        state19.put("PAREXPRESSION", new SymbolState(51));
        state45.put("PUBLIC", new SymbolState(INTEGERLITERAL,  1));
        state81.put("CLASS", new SymbolState(INTERFACEDECLARATION,  5));
        state14.put("ID", new SymbolState(BASICTYPE,  1));
        state112.put("NATIVE", new SymbolState(MODIFIER,  1));
        state7.put("TRANSIENT", new SymbolState(BOOLEANLITERAL,  1));
        state44.put("LONG", new SymbolState(BASICTYPE,  1));
        state83.put("RBRACKET", new SymbolState(TYPE,  3));
        state118.put("PUBLIC", new SymbolState(CLASSDECLARATION,  5));
        state1.put("TYPE", new SymbolState(1));
        state101.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state62.put("NATIVE", new SymbolState(SELECTOR,  3));
        state2.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state53.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  2));
        state63.put("PRIMARY", new SymbolState(10));
        state140.put("ID", new SymbolState(EXPRESSION2,  2));
        state54.put("NATIVE", new SymbolState(EXPRESSION2,  1));
        Map<String, SymbolState> state75 = new HashMap<String, SymbolState>();
        rules.put(75, state75);
        state75.put("RBRACKET", new SymbolState(124));
        state39.put("SHORT", new SymbolState(32));
        state58.put("BOOLEAN", new SymbolState(N_SELECTOR_0,  2));
        state59.put("LBRACKET", new SymbolState(LITERAL,  1));
        state139.put("BOOLEAN", new SymbolState(SELECTOR,  2));
        state24.put("CHAR", new SymbolState(MODIFIER,  1));
        state132.put("BOOLEAN", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state132.put("STRICTFP", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state135.put("SYNCHRONIZED", new SymbolState(CLASSBODY,  3));
        state83.put("CHAR", new SymbolState(TYPE,  3));
        state114.put("FINAL", new SymbolState(MODIFIER,  1));
        state126.put("SYNCHRONIZED", new SymbolState(TYPEDECLARATION,  2));
        state129.put("LBRACKET", new SymbolState(PAREXPRESSION,  3));
        state124.put("BOOLEAN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state110.put("BOOLEAN", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state16.put("NATIVE", new SymbolState(CLASSDECLARATION,  5));
        state140.put("ABSTRACT", new SymbolState(EXPRESSION2,  2));
        state108.put("BYTE", new SymbolState(33));
        state47.put("PRIVATE", new SymbolState(BOOLEANLITERAL,  1));
        state119.put("COMMA", new SymbolState(EXPRESSION2REST,  2));
        state15.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state78.put("SEMI", new SymbolState(EXPRESSION3,  2));
        state5.put("STRICTFP", new SymbolState(N_DOT_ID_0,  0));
        state106.put("CHAR", new SymbolState(EXPRESSION3,  2));
        state91.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state29.put("BASICTYPE", new SymbolState(36));
        state51.put("SEMI", new SymbolState(PRIMARY,  1));
        state61.put("PROTECTED", new SymbolState(TYPEDECLARATION,  2));
        state2.put("BYTE", new SymbolState(BASICTYPE,  1));
        state9.put("NATIVE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state125.put("TRUE", new SymbolState(7));
        state6.put("INT", new SymbolState(MODIFIER,  1));
        state139.put("LPAREN", new SymbolState(125));
        state52.put("PROTECTED", new SymbolState(CLASSBODYDECLARATION,  2));
        state14.put("PROTECTED", new SymbolState(BASICTYPE,  1));
        state79.put("RPAREN", new SymbolState(N_COMMA_EXPRESSION_0,  0));
        state5.put("SYNCHRONIZED", new SymbolState(N_DOT_ID_0,  0));
        state115.put("FINAL", new SymbolState(INTERFACEBODY,  3));
        state37.put("DOUBLE", new SymbolState(N_DOT_ID_0,  3));
        state14.put("TRANSIENT", new SymbolState(BASICTYPE,  1));
        state101.put("LONG", new SymbolState(MODIFIER,  1));
        state18.put("CLASSDECLARATION", new SymbolState(126));
        state19.put("MINUS", new SymbolState(23));
        state125.put("FLOAT", new SymbolState(2));
        state13.put("LONG", new SymbolState(PREFIXOP,  1));
        state1.put("LITERAL", new SymbolState(57));
        state20.put("FINAL", new SymbolState(VARIABLEINITIALIZER,  1));
        state14.put("BYTE", new SymbolState(BASICTYPE,  1));
        state97.put("STATIC", new SymbolState(METHODORFIELDREST,  1));
        state16.put("FINAL", new SymbolState(CLASSDECLARATION,  5));
        state111.put("ID", new SymbolState(ARGUMENTS,  4));
        state97.put("SEMI", new SymbolState(METHODORFIELDREST,  1));
        state110.put("CHAR_LITERAL", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state63.put("TYPE", new SymbolState(1));
        state5.put("INT", new SymbolState(N_DOT_ID_0,  0));
        state7.put("STRICTFP", new SymbolState(BOOLEANLITERAL,  1));
        state74.put("IMPORT", new SymbolState(127));
        state114.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state15.put("ABSTRACT", new SymbolState(BASICTYPE,  1));
        state68.put("SHORT", new SymbolState(N_MODIFIER_0,  0));
        state25.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state35.put("FALSE", new SymbolState(BASICTYPE,  1));
        state126.put("STRICTFP", new SymbolState(TYPEDECLARATION,  2));
        state0.put("PUBLIC", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state125.put("BOOLEAN", new SymbolState(17));
        state28.put("CHAR", new SymbolState(SELECTOR,  3));
        state13.put("SHORT", new SymbolState(PREFIXOP,  1));
        state29.put("STR_LITERAL", new SymbolState(4));
        state9.put("SEMI", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state9.put("PUBLIC", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state37.put("PROTECTED", new SymbolState(N_DOT_ID_0,  3));
        state49.put("PROTECTED", new SymbolState(N_MODIFIER_0,  2));
        state74.put("CLASS", new SymbolState(N_TYPEDECLARATION_0,  0));
        state97.put("CHAR", new SymbolState(METHODORFIELDREST,  1));
        state36.put("CHAR_LITERAL", new SymbolState(TYPE,  1));
        state4.put("PRIVATE", new SymbolState(LITERAL,  1));
        state111.put("SEMI", new SymbolState(ARGUMENTS,  4));
        state54.put("SEMI", new SymbolState(EXPRESSION2,  1));
        state26.put("INT", new SymbolState(LITERAL,  1));
        state43.put("CLASS", new SymbolState(TYPEDECLARATION,  1));
        state35.put("SEMI", new SymbolState(BASICTYPE,  1));
        state51.put("SHORT", new SymbolState(PRIMARY,  1));
        state47.put("BECOMES", new SymbolState(BOOLEANLITERAL,  1));
        state55.put("STRICTFP", new SymbolState(EXPRESSION,  1));
        state4.put("INT", new SymbolState(LITERAL,  1));
        state71.put("PLUS", new SymbolState(BRACKETSOPT,  1));
        state37.put("RPAREN", new SymbolState(N_DOT_ID_0,  3));
        Map<String, SymbolState> state86 = new HashMap<String, SymbolState>();
        rules.put(86, state86);
        state86.put("LBRACE", new SymbolState(TYPELIST,  2));
        state24.put("BYTE", new SymbolState(MODIFIER,  1));
        state96.put("LBRACE", new SymbolState(9));
        state123.put("FALSE", new SymbolState(47));
        state119.put("CHAR", new SymbolState(EXPRESSION2REST,  2));
        state39.put("TYPE", new SymbolState(50));
        state33.put("TRANSIENT", new SymbolState(BASICTYPE,  1));
        state113.put("STR_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state23.put("TRUE", new SymbolState(PREFIXOP,  1));
        state100.put("PROTECTED", new SymbolState(MEMBERDECL,  1));
        state24.put("CLASS", new SymbolState(MODIFIER,  1));
        state100.put("PUBLIC", new SymbolState(MEMBERDECL,  1));
        state51.put("INSTANCEOF", new SymbolState(PRIMARY,  1));
        state62.put("SYNCHRONIZED", new SymbolState(SELECTOR,  3));
        state8.put("CHAR", new SymbolState(14));
        state32.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state104.put("IMPORT", new SymbolState(127));
        state125.put("PLUS", new SymbolState(22));
        state47.put("BYTE", new SymbolState(BOOLEANLITERAL,  1));
        state73.put("LONG", new SymbolState(EXPRESSION3,  2));
        state17.put("BECOMES", new SymbolState(BASICTYPE,  1));
        state36.put("STRICTFP", new SymbolState(TYPE,  1));
        state36.put("FINAL", new SymbolState(TYPE,  1));
        state27.put("STRICTFP", new SymbolState(LITERAL,  1));
        state36.put("BECOMES", new SymbolState(TYPE,  1));
        state6.put("ID", new SymbolState(MODIFIER,  1));
        state10.put("BYTE", new SymbolState(N_SELECTOR_0,  0));
        state20.put("PRIVATE", new SymbolState(VARIABLEINITIALIZER,  1));
        state94.put("N_MODIFIER_0", new SymbolState(18));
        state72.put("PROTECTED", new SymbolState(INTERFACEDECLARATION,  3));
        state133.put("FLOAT", new SymbolState(2));
        state95.put("BOOLEAN", new SymbolState(METHODORFIELDDECL,  3));
        state10.put("VOLATILE", new SymbolState(N_SELECTOR_0,  0));
        state18.put("ABSTRACT", new SymbolState(88));
        state19.put("LPAREN", new SymbolState(63));
        state17.put("VOLATILE", new SymbolState(BASICTYPE,  1));
        state2.put("CHAR", new SymbolState(BASICTYPE,  1));
        state56.put("BYTE", new SymbolState(EXPRESSION1,  1));
        state45.put("DOUBLE", new SymbolState(INTEGERLITERAL,  1));
        state19.put("LITERAL", new SymbolState(57));
        state20.put("NATIVE", new SymbolState(VARIABLEINITIALIZER,  1));
        state140.put("BOOLEAN", new SymbolState(EXPRESSION2,  2));
        state29.put("VARIABLEINITIALIZER", new SymbolState(128));
        state66.put("FLOAT", new SymbolState(MODIFIER,  1));
        state103.put("BYTE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state19.put("BOOLEAN", new SymbolState(17));
        state103.put("ABSTRACT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state7.put("PUBLIC", new SymbolState(BOOLEANLITERAL,  1));
        state112.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state72.put("ABSTRACT", new SymbolState(INTERFACEDECLARATION,  3));
        state3.put("SHORT", new SymbolState(32));
        state55.put("NATIVE", new SymbolState(EXPRESSION,  1));
        state17.put("ID", new SymbolState(BASICTYPE,  1));
        state124.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state81.put("EOF", new SymbolState(INTERFACEDECLARATION,  5));
        state104.put("PROTECTED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state71.put("BOOLEAN", new SymbolState(BRACKETSOPT,  1));
        state78.put("BOOLEAN", new SymbolState(EXPRESSION3,  2));
        state73.put("ABSTRACT", new SymbolState(EXPRESSION3,  2));
        state113.put("TRANSIENT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state63.put("LITERAL", new SymbolState(57));
        state22.put("ID", new SymbolState(PREFIXOP,  1));
        state80.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state68.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state4.put("SYNCHRONIZED", new SymbolState(LITERAL,  1));
        state3.put("LPAREN", new SymbolState(63));
        state31.put("SYNCHRONIZED", new SymbolState(LITERAL,  1));
        state44.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state24.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state59.put("DOT", new SymbolState(LITERAL,  1));
        state52.put("FLOAT", new SymbolState(CLASSBODYDECLARATION,  2));
        state124.put("STR_LITERAL", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state66.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state48.put("BYTE", new SymbolState(ARGUMENTS,  2));
        state45.put("SEMI", new SymbolState(INTEGERLITERAL,  1));
        state44.put("FINAL", new SymbolState(BASICTYPE,  1));
        state29.put("LITERAL", new SymbolState(57));
        Map<String, SymbolState> state141 = new HashMap<String, SymbolState>();
        rules.put(141, state141);
        state141.put("RPAREN", new SymbolState(129));
        state124.put("FALSE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state129.put("RBRACE", new SymbolState(PAREXPRESSION,  3));
        state51.put("INT", new SymbolState(PRIMARY,  1));
        state18.put("STRICTFP", new SymbolState(6));
        state114.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state36.put("LBRACE", new SymbolState(TYPE,  1));
        state23.put("DOUBLE", new SymbolState(PREFIXOP,  1));
        state58.put("COMMA", new SymbolState(N_SELECTOR_0,  2));
        state19.put("ID", new SymbolState(5));
        state114.put("SHORT", new SymbolState(MODIFIER,  1));
        state57.put("FLOAT", new SymbolState(PRIMARY,  1));
        state39.put("BASICTYPE", new SymbolState(36));
        state6.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state17.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state4.put("BECOMES", new SymbolState(LITERAL,  1));
        state140.put("PROTECTED", new SymbolState(EXPRESSION2,  2));
        state37.put("EXCLAMATION", new SymbolState(N_DOT_ID_0,  3));
        state137.put("INT", new SymbolState(15));
        state59.put("BYTE", new SymbolState(LITERAL,  1));
        state32.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state90.put("INTERFACE", new SymbolState(IMPORTDECLARATION,  6));
        state85.put("TRANSIENT", new SymbolState(EXPRESSION,  3));
        state91.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state126.put("EOF", new SymbolState(TYPEDECLARATION,  2));
        state100.put("BYTE", new SymbolState(MEMBERDECL,  1));
        state94.put("STRICTFP", new SymbolState(N_MODIFIER_0,  0));
        state33.put("SYNCHRONIZED", new SymbolState(BASICTYPE,  1));
        state47.put("NATIVE", new SymbolState(BOOLEANLITERAL,  1));
        state73.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state78.put("ABSTRACT", new SymbolState(EXPRESSION3,  2));
        state71.put("SEMI", new SymbolState(BRACKETSOPT,  1));
        state72.put("PUBLIC", new SymbolState(INTERFACEDECLARATION,  3));
        state125.put("PRIMARY", new SymbolState(10));
        state131.put("DOT", new SymbolState(N_DOT_ID_0,  0));
        state22.put("DECIMAL_INTEGER_LITERAL", new SymbolState(PREFIXOP,  1));
        state12.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state7.put("BYTE", new SymbolState(BOOLEANLITERAL,  1));
        state112.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state29.put("FALSE", new SymbolState(47));
        state24.put("FINAL", new SymbolState(MODIFIER,  1));
        state123.put("INTEGERLITERAL", new SymbolState(59));
        state124.put("NATIVE", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state57.put("CHAR", new SymbolState(PRIMARY,  1));
        state28.put("STRICTFP", new SymbolState(SELECTOR,  3));
        state52.put("CHAR", new SymbolState(CLASSBODYDECLARATION,  2));
        state133.put("TYPE", new SymbolState(130));
        state78.put("LONG", new SymbolState(EXPRESSION3,  2));
        state26.put("PUBLIC", new SymbolState(LITERAL,  1));
        state35.put("INT", new SymbolState(BASICTYPE,  1));
        state80.put("LONG", new SymbolState(MODIFIER,  1));
        state80.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state28.put("SHORT", new SymbolState(SELECTOR,  3));
        state104.put("INTERFACE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state19.put("TRUE", new SymbolState(7));
        state62.put("RBRACE", new SymbolState(SELECTOR,  3));
        Map<String, SymbolState> state127 = new HashMap<String, SymbolState>();
        rules.put(127, state127);
        state127.put("ID", new SymbolState(131));
        state50.put("LBRACE", new SymbolState(N_COMMA_TYPE_0,  0));
        state68.put("CLASSBODYDECLARATION", new SymbolState(132));
        state38.put("BASICTYPE", new SymbolState(36));
        state55.put("ID", new SymbolState(EXPRESSION,  1));
        state91.put("FINAL", new SymbolState(MODIFIER,  1));
        state86.put("COMMA", new SymbolState(133));
        state128.put("PRIVATE", new SymbolState(VARIABLEDECLARATORREST,  3));
        state49.put("STRICTFP", new SymbolState(N_MODIFIER_0,  2));
        state40.put("PRIVATE", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state27.put("LONG", new SymbolState(LITERAL,  1));
        state32.put("SHORT", new SymbolState(BASICTYPE,  1));
        state54.put("INSTANCEOF", new SymbolState(134));
        state137.put("STR_LITERAL", new SymbolState(4));
        state68.put("RBRACE", new SymbolState(135));
        state87.put("STRICTFP", new SymbolState(MEMBERDECL,  1));
        state35.put("CHAR_LITERAL", new SymbolState(BASICTYPE,  1));
        state28.put("RPAREN", new SymbolState(SELECTOR,  3));
        state125.put("LONG", new SymbolState(44));
        state63.put("EXCLAMATION", new SymbolState(13));
        state74.put("N_TYPEDECLARATION_0", new SymbolState(136));
        state112.put("PUBLIC", new SymbolState(MODIFIER,  1));
        state68.put("TRANSIENT", new SymbolState(N_MODIFIER_0,  0));
        state32.put("STATIC", new SymbolState(BASICTYPE,  1));
        state17.put("MINUS", new SymbolState(BASICTYPE,  1));
        state4.put("TRANSIENT", new SymbolState(LITERAL,  1));
        state57.put("RBRACKET", new SymbolState(PRIMARY,  1));
        state12.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state133.put("DOUBLE", new SymbolState(35));
        state4.put("PUBLIC", new SymbolState(LITERAL,  1));
        state135.put("PRIVATE", new SymbolState(CLASSBODY,  3));
        state113.put("ID", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state45.put("SYNCHRONIZED", new SymbolState(INTEGERLITERAL,  1));
        state111.put("BECOMES", new SymbolState(ARGUMENTS,  4));
        state37.put("TRANSIENT", new SymbolState(N_DOT_ID_0,  3));
        state77.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state44.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state40.put("SEMI", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state31.put("CHAR", new SymbolState(LITERAL,  1));
        state25.put("IMPORT", new SymbolState(N_IMPORTDECLARATION_0,  0));
        state129.put("ID", new SymbolState(PAREXPRESSION,  3));
        state7.put("LBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state71.put("TRUE", new SymbolState(BRACKETSOPT,  1));
        state85.put("FLOAT", new SymbolState(EXPRESSION,  3));
        state92.put("BOOLEAN", new SymbolState(VARIABLEDECLARATORREST,  1));
        state44.put("MINUS", new SymbolState(BASICTYPE,  1));
        state5.put("LONG", new SymbolState(N_DOT_ID_0,  0));
        state14.put("TRUE", new SymbolState(BASICTYPE,  1));
        state81.put("SEMI", new SymbolState(INTERFACEDECLARATION,  5));
        state125.put("PAREXPRESSION", new SymbolState(51));
        state74.put("PROTECTED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state24.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state19.put("EXCLAMATION", new SymbolState(13));
        state80.put("INTERFACE", new SymbolState(MODIFIER,  1));
        state124.put("BECOMES", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state45.put("STRICTFP", new SymbolState(INTEGERLITERAL,  1));
        state100.put("TRANSIENT", new SymbolState(MEMBERDECL,  1));
        state9.put("ABSTRACT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state5.put("TRUE", new SymbolState(N_DOT_ID_0,  0));
        state49.put("LONG", new SymbolState(N_MODIFIER_0,  2));
        state58.put("SYNCHRONIZED", new SymbolState(N_SELECTOR_0,  2));
        state16.put("ABSTRACT", new SymbolState(CLASSDECLARATION,  5));
        state31.put("LBRACKET", new SymbolState(LITERAL,  1));
        state77.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state119.put("FLOAT", new SymbolState(EXPRESSION2REST,  2));
        state63.put("BYTE", new SymbolState(33));
        state52.put("LONG", new SymbolState(CLASSBODYDECLARATION,  2));
        state7.put("ID", new SymbolState(BOOLEANLITERAL,  1));
        state44.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state58.put("CHAR", new SymbolState(N_SELECTOR_0,  2));
        state139.put("SEMI", new SymbolState(SELECTOR,  2));
        state111.put("INSTANCEOF", new SymbolState(ARGUMENTS,  4));
        state20.put("PUBLIC", new SymbolState(VARIABLEINITIALIZER,  1));
        state61.put("PRIVATE", new SymbolState(TYPEDECLARATION,  2));
        state108.put("TYPE", new SymbolState(50));
        state95.put("FINAL", new SymbolState(METHODORFIELDDECL,  3));
        state9.put("FLOAT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state80.put("PRIVATE", new SymbolState(MODIFIER,  1));
        state22.put("DOUBLE", new SymbolState(PREFIXOP,  1));
        state15.put("TRUE", new SymbolState(BASICTYPE,  1));
        state26.put("LBRACKET", new SymbolState(LITERAL,  1));
        state7.put("RPAREN", new SymbolState(BOOLEANLITERAL,  1));
        state101.put("INT", new SymbolState(MODIFIER,  1));
        state49.put("CHAR", new SymbolState(N_MODIFIER_0,  2));
        state113.put("VOLATILE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state111.put("RBRACE", new SymbolState(ARGUMENTS,  4));
        state17.put("STRICTFP", new SymbolState(BASICTYPE,  1));
        state14.put("NULL", new SymbolState(BASICTYPE,  1));
        state14.put("PUBLIC", new SymbolState(BASICTYPE,  1));
        state105.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  3));
        state35.put("COMMA", new SymbolState(BASICTYPE,  1));
        state58.put("DOUBLE", new SymbolState(N_SELECTOR_0,  2));
        state4.put("STATIC", new SymbolState(LITERAL,  1));
        state12.put("PROTECTED", new SymbolState(MODIFIER,  1));
        state139.put("BECOMES", new SymbolState(SELECTOR,  2));
        state31.put("RBRACKET", new SymbolState(LITERAL,  1));
        state110.put("EXCLAMATION", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state7.put("RBRACE", new SymbolState(BOOLEANLITERAL,  1));
        state105.put("CLASS", new SymbolState(CLASSDECLARATION,  3));
        state47.put("BOOLEAN", new SymbolState(BOOLEANLITERAL,  1));
        state114.put("NATIVE", new SymbolState(MODIFIER,  1));
        state78.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state54.put("RPAREN", new SymbolState(EXPRESSION2,  1));
        state28.put("COMMA", new SymbolState(SELECTOR,  3));
        state59.put("PUBLIC", new SymbolState(LITERAL,  1));
        state39.put("INT", new SymbolState(15));
        state113.put("LBRACE", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state85.put("PUBLIC", new SymbolState(EXPRESSION,  3));
        state129.put("RPAREN", new SymbolState(PAREXPRESSION,  3));
        state124.put("LPAREN", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state3.put("LONG", new SymbolState(44));
        state77.put("FLOAT", new SymbolState(MODIFIER,  1));
        state52.put("VOLATILE", new SymbolState(CLASSBODYDECLARATION,  2));
        state83.put("LPAREN", new SymbolState(TYPE,  3));
        state54.put("DOUBLE", new SymbolState(EXPRESSION2,  1));
        state85.put("RPAREN", new SymbolState(EXPRESSION,  3));
        state7.put("INSTANCEOF", new SymbolState(BOOLEANLITERAL,  1));
        state45.put("LBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state18.put("TRANSIENT", new SymbolState(77));
        state137.put("LPAREN", new SymbolState(63));
        state112.put("ID", new SymbolState(MODIFIER,  1));
        state94.put("SYNCHRONIZED", new SymbolState(N_MODIFIER_0,  0));
        state35.put("RBRACE", new SymbolState(BASICTYPE,  1));
        state123.put("ID", new SymbolState(5));
        state48.put("COMMA", new SymbolState(ARGUMENTS,  2));
        state54.put("COMMA", new SymbolState(EXPRESSION2,  1));
        state40.put("CLASS", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state77.put("INT", new SymbolState(MODIFIER,  1));
        state58.put("STRICTFP", new SymbolState(N_SELECTOR_0,  2));
        state10.put("NATIVE", new SymbolState(N_SELECTOR_0,  0));
        state78.put("NATIVE", new SymbolState(EXPRESSION3,  2));
        state36.put("EXCLAMATION", new SymbolState(TYPE,  1));
        state97.put("VOLATILE", new SymbolState(METHODORFIELDREST,  1));
        state24.put("NATIVE", new SymbolState(MODIFIER,  1));
        state54.put("FLOAT", new SymbolState(EXPRESSION2,  1));
        state43.put("EOF", new SymbolState(TYPEDECLARATION,  1));
        state1.put("NULL", new SymbolState(26));
        state87.put("BOOLEAN", new SymbolState(MEMBERDECL,  1));
        state1.put("BOOLEAN", new SymbolState(17));
        state1.put("BASICTYPE", new SymbolState(36));
        state27.put("DOUBLE", new SymbolState(LITERAL,  1));
        state12.put("VOLATILE", new SymbolState(MODIFIER,  1));
        state111.put("DOT", new SymbolState(ARGUMENTS,  4));
        state37.put("INT", new SymbolState(N_DOT_ID_0,  3));
        state124.put("PROTECTED", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state87.put("SEMI", new SymbolState(MEMBERDECL,  1));
        state83.put("CHAR_LITERAL", new SymbolState(TYPE,  3));
        state118.put("STATIC", new SymbolState(CLASSDECLARATION,  5));
        state45.put("RBRACKET", new SymbolState(INTEGERLITERAL,  1));
        state10.put("PRIVATE", new SymbolState(N_SELECTOR_0,  0));
        state87.put("RBRACE", new SymbolState(MEMBERDECL,  1));
        state29.put("INT", new SymbolState(15));
        state63.put("FALSE", new SymbolState(47));
        state73.put("PRIVATE", new SymbolState(EXPRESSION3,  2));
        state28.put("RBRACE", new SymbolState(SELECTOR,  3));
        state123.put("DOUBLE", new SymbolState(35));
        state28.put("LONG", new SymbolState(SELECTOR,  3));
        state5.put("NULL", new SymbolState(N_DOT_ID_0,  0));
        state52.put("SEMI", new SymbolState(CLASSBODYDECLARATION,  2));
        state7.put("BOOLEAN", new SymbolState(BOOLEANLITERAL,  1));
        state90.put("EOF", new SymbolState(IMPORTDECLARATION,  6));
        state85.put("STATIC", new SymbolState(EXPRESSION,  3));
        state123.put("CHAR_LITERAL", new SymbolState(27));
        state47.put("ID", new SymbolState(BOOLEANLITERAL,  1));
        state119.put("PUBLIC", new SymbolState(EXPRESSION2REST,  2));
        state17.put("NULL", new SymbolState(BASICTYPE,  1));
        state134.put("CHAR", new SymbolState(14));
        state15.put("RPAREN", new SymbolState(BASICTYPE,  1));
        state118.put("CLASS", new SymbolState(CLASSDECLARATION,  5));
        state17.put("EXCLAMATION", new SymbolState(BASICTYPE,  1));
        state37.put("BOOLEAN", new SymbolState(N_DOT_ID_0,  3));
        state118.put("VOLATILE", new SymbolState(CLASSDECLARATION,  5));
        state21.put("INTERFACE", new SymbolState(IMPORTDECLARATION,  4));
        state71.put("STRICTFP", new SymbolState(BRACKETSOPT,  1));
        state88.put("STATIC", new SymbolState(MODIFIER,  1));
        state106.put("DOUBLE", new SymbolState(EXPRESSION3,  2));
        state77.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state90.put("PRIVATE", new SymbolState(IMPORTDECLARATION,  6));
        state128.put("LONG", new SymbolState(VARIABLEDECLARATORREST,  3));
        state18.put("SYNCHRONIZED", new SymbolState(101));
        state7.put("FINAL", new SymbolState(BOOLEANLITERAL,  1));
        state71.put("PROTECTED", new SymbolState(BRACKETSOPT,  1));
        state13.put("MINUS", new SymbolState(PREFIXOP,  1));
        state2.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state132.put("SHORT", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state36.put("LPAREN", new SymbolState(TYPE,  1));
        state129.put("INT", new SymbolState(PAREXPRESSION,  3));
        state9.put("DOUBLE", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state129.put("SHORT", new SymbolState(PAREXPRESSION,  3));
        state45.put("PROTECTED", new SymbolState(INTEGERLITERAL,  1));
        state113.put("PUBLIC", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state113.put("PLUS", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state58.put("FLOAT", new SymbolState(N_SELECTOR_0,  2));
        state44.put("BOOLEAN", new SymbolState(BASICTYPE,  1));
        state114.put("SYNCHRONIZED", new SymbolState(MODIFIER,  1));
        state2.put("DOUBLE", new SymbolState(BASICTYPE,  1));
        state68.put("PUBLIC", new SymbolState(N_MODIFIER_0,  0));
        state106.put("LONG", new SymbolState(EXPRESSION3,  2));
        state111.put("VOLATILE", new SymbolState(ARGUMENTS,  4));
        state20.put("TRANSIENT", new SymbolState(VARIABLEINITIALIZER,  1));
        state98.put("FLOAT", new SymbolState(2));
        state110.put("LPAREN", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state129.put("BOOLEAN", new SymbolState(PAREXPRESSION,  3));
        state2.put("COMMA", new SymbolState(BASICTYPE,  1));
        state78.put("LBRACKET", new SymbolState(137));
        state101.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state126.put("PUBLIC", new SymbolState(TYPEDECLARATION,  2));
        state5.put("BECOMES", new SymbolState(N_DOT_ID_0,  0));
        state67.put("RBRACE", new SymbolState(N_INTERFACEBODYDECLARATION_0,  0));
        state14.put("CHAR", new SymbolState(BASICTYPE,  1));
        state29.put("TRUE", new SymbolState(7));
        state52.put("RBRACE", new SymbolState(CLASSBODYDECLARATION,  2));
        state33.put("LPAREN", new SymbolState(BASICTYPE,  1));
        state128.put("FINAL", new SymbolState(VARIABLEDECLARATORREST,  3));
        state18.put("CLASS", new SymbolState(138));
        state113.put("FLOAT", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state59.put("BOOLEAN", new SymbolState(LITERAL,  1));
        state95.put("DOUBLE", new SymbolState(METHODORFIELDDECL,  3));
        state24.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state48.put("FLOAT", new SymbolState(ARGUMENTS,  2));
        state90.put("NATIVE", new SymbolState(IMPORTDECLARATION,  6));
        state80.put("BOOLEAN", new SymbolState(MODIFIER,  1));
        state132.put("BYTE", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state110.put("DECIMAL_INTEGER_LITERAL", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state139.put("PUBLIC", new SymbolState(SELECTOR,  2));
        state47.put("VOLATILE", new SymbolState(BOOLEANLITERAL,  1));
        state12.put("FLOAT", new SymbolState(MODIFIER,  1));
        state21.put("STRICTFP", new SymbolState(IMPORTDECLARATION,  4));
        state31.put("FINAL", new SymbolState(LITERAL,  1));
        state132.put("FINAL", new SymbolState(N_CLASSBODYDECLARATION_0,  2));
        state37.put("COMMA", new SymbolState(N_DOT_ID_0,  3));
        state19.put("SHORT", new SymbolState(32));
        state73.put("VOLATILE", new SymbolState(EXPRESSION3,  2));
        state137.put("CHAR", new SymbolState(14));
        state92.put("FLOAT", new SymbolState(VARIABLEDECLARATORREST,  1));
        state32.put("COMMA", new SymbolState(BASICTYPE,  1));
        state22.put("STR_LITERAL", new SymbolState(PREFIXOP,  1));
        state59.put("ID", new SymbolState(LITERAL,  1));
        state111.put("BOOLEAN", new SymbolState(ARGUMENTS,  4));
        state128.put("PUBLIC", new SymbolState(VARIABLEDECLARATORREST,  3));
        state29.put("NULL", new SymbolState(26));
        state90.put("ABSTRACT", new SymbolState(IMPORTDECLARATION,  6));
        state71.put("LPAREN", new SymbolState(BRACKETSOPT,  1));
        state29.put("MINUS", new SymbolState(23));
        state85.put("PROTECTED", new SymbolState(EXPRESSION,  3));
        state62.put("TRANSIENT", new SymbolState(SELECTOR,  3));
        state49.put("ABSTRACT", new SymbolState(N_MODIFIER_0,  2));
        state119.put("STATIC", new SymbolState(EXPRESSION2REST,  2));
        state54.put("ID", new SymbolState(EXPRESSION2,  1));
        state112.put("ABSTRACT", new SymbolState(MODIFIER,  1));
        state16.put("TRANSIENT", new SymbolState(CLASSDECLARATION,  5));
        Map<String, SymbolState> state64 = new HashMap<String, SymbolState>();
        rules.put(64, state64);
        state64.put("ID", new SymbolState(139));
        state48.put("TRANSIENT", new SymbolState(ARGUMENTS,  2));
        state137.put("FALSE", new SymbolState(47));
        state97.put("PROTECTED", new SymbolState(METHODORFIELDREST,  1));
        state77.put("SHORT", new SymbolState(MODIFIER,  1));
        state7.put("RBRACKET", new SymbolState(BOOLEANLITERAL,  1));
        state136.put("TYPEDECLARATION", new SymbolState(53));
        state20.put("CHAR", new SymbolState(VARIABLEINITIALIZER,  1));
        state101.put("FINAL", new SymbolState(MODIFIER,  1));
        state2.put("LBRACE", new SymbolState(BASICTYPE,  1));
        state33.put("RBRACKET", new SymbolState(BASICTYPE,  1));
        state41.put("COMMA", new SymbolState(N_COMMA_EXPRESSION_0,  3));
        state87.put("LONG", new SymbolState(MEMBERDECL,  1));
        state23.put("SHORT", new SymbolState(PREFIXOP,  1));
        state54.put("SHORT", new SymbolState(EXPRESSION2,  1));
        state74.put("SYNCHRONIZED", new SymbolState(N_TYPEDECLARATION_0,  0));
        state95.put("TRANSIENT", new SymbolState(METHODORFIELDDECL,  3));
        state20.put("STRICTFP", new SymbolState(VARIABLEINITIALIZER,  1));
        state87.put("ID", new SymbolState(MEMBERDECL,  1));
        state100.put("FINAL", new SymbolState(MEMBERDECL,  1));
        state111.put("FINAL", new SymbolState(ARGUMENTS,  4));
        state87.put("PROTECTED", new SymbolState(MEMBERDECL,  1));
        state104.put("EOF", new SymbolState(N_TYPEDECLARATION_0,  0));
        state40.put("EOF", new SymbolState(N_IMPORTDECLARATION_0,  2));
        state83.put("BYTE", new SymbolState(TYPE,  3));
        state35.put("FLOAT", new SymbolState(BASICTYPE,  1));
        state74.put("PRIVATE", new SymbolState(N_TYPEDECLARATION_0,  0));
        state38.put("BYTE", new SymbolState(33));
        state58.put("RPAREN", new SymbolState(N_SELECTOR_0,  2));
        state88.put("STRICTFP", new SymbolState(MODIFIER,  1));
        state111.put("PUBLIC", new SymbolState(ARGUMENTS,  4));
        state5.put("FALSE", new SymbolState(N_DOT_ID_0,  0));
        state54.put("EXPRESSION2REST", new SymbolState(140));
        state53.put("PUBLIC", new SymbolState(N_TYPEDECLARATION_0,  2));
        state80.put("ID", new SymbolState(MODIFIER,  1));
        state54.put("FINAL", new SymbolState(EXPRESSION2,  1));
        state137.put("DOUBLE", new SymbolState(35));
        state15.put("INT", new SymbolState(BASICTYPE,  1));
        state56.put("BECOMES", new SymbolState(EXPRESSION1,  1));
        state7.put("FLOAT", new SymbolState(BOOLEANLITERAL,  1));
        state125.put("EXCLAMATION", new SymbolState(13));
        state63.put("EXPRESSION", new SymbolState(141));
        state114.put("BYTE", new SymbolState(MODIFIER,  1));
        state80.put("TRANSIENT", new SymbolState(MODIFIER,  1));
        state54.put("RBRACE", new SymbolState(EXPRESSION2,  1));
        state128.put("NATIVE", new SymbolState(VARIABLEDECLARATORREST,  3));
        state14.put("IMPLEMENTS", new SymbolState(BASICTYPE,  1));
        state59.put("INT", new SymbolState(LITERAL,  1));
        state139.put("FLOAT", new SymbolState(SELECTOR,  2));
        state91.put("ID", new SymbolState(MODIFIER,  1));
        state124.put("LBRACKET", new SymbolState(N_LBRACKET_RBRACKET_0,  3));
        state1.put("LPAREN", new SymbolState(63));
        state135.put("STRICTFP", new SymbolState(CLASSBODY,  3));
        state13.put("NULL", new SymbolState(PREFIXOP,  1));
        state53.put("NATIVE", new SymbolState(N_TYPEDECLARATION_0,  2));
        state125.put("SHORT", new SymbolState(32));
        state111.put("STRICTFP", new SymbolState(ARGUMENTS,  4));
        state128.put("ID", new SymbolState(VARIABLEDECLARATORREST,  3));
        state3.put("NULL", new SymbolState(26));
        state101.put("DOUBLE", new SymbolState(MODIFIER,  1));
        state9.put("INT", new SymbolState(N_CLASSBODYDECLARATION_0,  0));
        state106.put("BECOMES", new SymbolState(EXPRESSION3,  2));
        state36.put("STR_LITERAL", new SymbolState(TYPE,  1));
        state6.put("CHAR", new SymbolState(MODIFIER,  1));
        state16.put("INTERFACE", new SymbolState(CLASSDECLARATION,  5));
        state38.put("CHAR", new SymbolState(14));
        state95.put("STATIC", new SymbolState(METHODORFIELDDECL,  3));
        state2.put("PLUS", new SymbolState(BASICTYPE,  1));
        state14.put("FALSE", new SymbolState(BASICTYPE,  1));
        state78.put("CHAR", new SymbolState(EXPRESSION3,  2));
        state81.put("PROTECTED", new SymbolState(INTERFACEDECLARATION,  5));
        state87.put("STATIC", new SymbolState(MEMBERDECL,  1));
        state140.put("SHORT", new SymbolState(EXPRESSION2,  2));
        state83.put("ABSTRACT", new SymbolState(TYPE,  3));
        state35.put("CHAR", new SymbolState(BASICTYPE,  1));
        state110.put("FALSE", new SymbolState(ASSIGNMENTOPERATOR,  1));
        state4.put("SEMI", new SymbolState(LITERAL,  1));
        state113.put("FINAL", new SymbolState(N_LBRACKET_RBRACKET_0,  0));
        state85.put("RBRACE", new SymbolState(EXPRESSION,  3));
        state28.put("SYNCHRONIZED", new SymbolState(SELECTOR,  3));
        state72.put("NATIVE", new SymbolState(INTERFACEDECLARATION,  3));
        return rules;
    }
}
