package cs444.codegen;

import java.io.PrintStream;

import cs444.parser.symbols.ANonTerminal;
import cs444.parser.symbols.ISymbol;
import cs444.parser.symbols.ast.AInterfaceOrClassSymbol;
import cs444.parser.symbols.ast.BooleanLiteralSymbol;
import cs444.parser.symbols.ast.ByteLiteralSymbol;
import cs444.parser.symbols.ast.CharacterLiteralSymbol;
import cs444.parser.symbols.ast.ConstructorSymbol;
import cs444.parser.symbols.ast.DclSymbol;
import cs444.parser.symbols.ast.EmptyStatementSymbol;
import cs444.parser.symbols.ast.FieldAccessSymbol;
import cs444.parser.symbols.ast.IntegerLiteralSymbol;
import cs444.parser.symbols.ast.MethodSymbol;
import cs444.parser.symbols.ast.NullSymbol;
import cs444.parser.symbols.ast.ShortLiteralSymbol;
import cs444.parser.symbols.ast.StringLiteralSymbol;
import cs444.parser.symbols.ast.SuperSymbol;
import cs444.parser.symbols.ast.ThisSymbol;
import cs444.parser.symbols.ast.cleanup.SimpleMethodInvoke;
import cs444.parser.symbols.ast.cleanup.SimpleNameSymbol;
import cs444.parser.symbols.ast.expressions.AddExprSymbol;
import cs444.parser.symbols.ast.expressions.AndExprSymbol;
import cs444.parser.symbols.ast.expressions.ArrayAccessExprSymbol;
import cs444.parser.symbols.ast.expressions.AssignmentExprSymbol;
import cs444.parser.symbols.ast.expressions.CastExpressionSymbol;
import cs444.parser.symbols.ast.expressions.CreationExpression;
import cs444.parser.symbols.ast.expressions.DivideExprSymbol;
import cs444.parser.symbols.ast.expressions.EAndExprSymbol;
import cs444.parser.symbols.ast.expressions.EOrExprSymbol;
import cs444.parser.symbols.ast.expressions.EqExprSymbol;
import cs444.parser.symbols.ast.expressions.ForExprSymbol;
import cs444.parser.symbols.ast.expressions.IfExprSymbol;
import cs444.parser.symbols.ast.expressions.InstanceOfExprSymbol;
import cs444.parser.symbols.ast.expressions.LeExprSymbol;
import cs444.parser.symbols.ast.expressions.LtExprSymbol;
import cs444.parser.symbols.ast.expressions.MultiplyExprSymbol;
import cs444.parser.symbols.ast.expressions.NeExprSymbol;
import cs444.parser.symbols.ast.expressions.NegOpExprSymbol;
import cs444.parser.symbols.ast.expressions.NotOpExprSymbol;
import cs444.parser.symbols.ast.expressions.OrExprSymbol;
import cs444.parser.symbols.ast.expressions.RemainderExprSymbol;
import cs444.parser.symbols.ast.expressions.ReturnExprSymbol;
import cs444.parser.symbols.ast.expressions.SubtractExprSymbol;
import cs444.parser.symbols.ast.expressions.WhileExprSymbol;

public interface ICodeGenVisitor {
    void visit(final SimpleMethodInvoke invoke);
    void visit(final FieldAccessSymbol field);
    void visit(final AInterfaceOrClassSymbol aInterfaceOrClassSymbol);
    void visit(final MethodSymbol method);
    void visit(final ConstructorSymbol constructor);
    void visit(final CreationExpression creationExpression);
    void visit(final ANonTerminal aNonTerminal);
    void visit(final WhileExprSymbol whileExprSymbol);
    void visit(final ForExprSymbol forExprSymbol);
    void visit(final IfExprSymbol ifExprSymbol);
    void visit(final ReturnExprSymbol retSymbol);
    void visit(final CastExpressionSymbol symbol);
    void visit(final NegOpExprSymbol op);
    void visit(final NotOpExprSymbol op);
    void visit(final MultiplyExprSymbol op);
    void visit(final AssignmentExprSymbol op);
    void visit(final DivideExprSymbol op);
    void visit(final RemainderExprSymbol op);
    void visit(final AddExprSymbol op);
    void visit(final SubtractExprSymbol op);
    void visit(final LtExprSymbol op);
    void visit(final EqExprSymbol op);
    void visit(final NeExprSymbol op);
    void visit(final AndExprSymbol op);
    void visit(final OrExprSymbol op);
    void visit(final EAndExprSymbol op);
    void visit(final EOrExprSymbol op);
    void visit(final LeExprSymbol op);
    void visit(final InstanceOfExprSymbol op);
    void visit(final IntegerLiteralSymbol intLiteral);
    void visit(final NullSymbol nullSymbol);
    void visit(final BooleanLiteralSymbol boolSymbol);
    void visit(final ThisSymbol thisSymbol);
    void visit(final SuperSymbol superSymbol);
    void visit(final StringLiteralSymbol stringSymbol);
    void visit(final CharacterLiteralSymbol characterSymbol);
    void visit(final ArrayAccessExprSymbol arrayAccess);
    void visit(final DclSymbol dclSymbol);
    void visit(final ByteLiteralSymbol byteLiteral);
    void visit(final ShortLiteralSymbol shortLiteral);
    void visit(final SimpleNameSymbol name);
    void visit(EmptyStatementSymbol empty);

    void visit(final ISymbol other);

    void printToFileAndEmpty(PrintStream printer);

}
